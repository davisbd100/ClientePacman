ÚG
ôC:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Runtime\Brushes\TintTextureGenerator.cs
[ 
ExecuteInEditMode 
] 
public 
class  
TintTextureGenerator !
:" #
MonoBehaviour$ 1
{		 
public 

int 
k_TintMapSize 
= 
$num "
;" #
public 

void 
Start 
( 
) 
{ 
Refresh 
( 
GetComponent 
< 
Grid !
>! "
(" #
)# $
)$ %
;% &
} 
private 
	Texture2D 
m_TintTexture #
;# $
private 
	Texture2D 
tintTexture !
{ 
get 
{ 	
if 
( 
m_TintTexture 
==  
null! %
)% &
{ 
m_TintTexture 
= 
new  #
	Texture2D$ -
(- .
k_TintMapSize. ;
,; <
k_TintMapSize= J
,J K
TextureFormatL Y
.Y Z
ARGB32Z `
,` a
falseb g
)g h
;h i
m_TintTexture   
.   
	hideFlags   '
=  ( )
	HideFlags  * 3
.  3 4
HideAndDontSave  4 C
;  C D
m_TintTexture!! 
.!! 
wrapMode!! &
=!!' (
TextureWrapMode!!) 8
.!!8 9
Clamp!!9 >
;!!> ?
m_TintTexture"" 
."" 

filterMode"" (
="") *

FilterMode""+ 5
.""5 6
Bilinear""6 >
;""> ?%
RefreshGlobalShaderValues## )
(##) *
)##* +
;##+ ,
}$$ 
return%% 
m_TintTexture%%  
;%%  !
}&& 	
}'' 
public-- 

void-- 
Refresh-- 
(-- 
Grid-- 
grid-- !
)--! "
{.. 
if// 

(// 
grid// 
==// 
null// 
)// 
return00 
;00 
int22 
w22 
=22 
tintTexture22 
.22 
width22 !
;22! "
int33 
h33 
=33 
tintTexture33 
.33 
height33 "
;33" #
for44 
(44 
int44 
y44 
=44 
$num44 
;44 
y44 
<44 
h44 
;44 
y44  
++44  "
)44" #
{55 	
for66 
(66 
int66 
x66 
=66 
$num66 
;66 
x66 
<66 
w66  !
;66! "
x66# $
++66$ &
)66& '
{77 

Vector3Int88 
world88  
=88! "
TextureToWorld88# 1
(881 2
new882 5

Vector3Int886 @
(88@ A
x88A B
,88B C
y88D E
,88E F
$num88G H
)88H I
)88I J
;88J K
tintTexture99 
.99 
SetPixel99 $
(99$ %
x99% &
,99& '
y99( )
,99) *
GetGridInformation99+ =
(99= >
grid99> B
)99B C
.99C D
GetPositionProperty99D W
(99W X
world99X ]
,99] ^
$str99_ e
,99e f
Color99g l
.99l m
white99m r
)99r s
)99s t
;99t u
}:: 
};; 	
tintTexture<< 
.<< 
Apply<< 
(<< 
)<< 
;<< 
}== 
publicDD 

voidDD 
RefreshDD 
(DD 
GridDD 
gridDD !
,DD! "

Vector3IntDD# -
positionDD. 6
)DD6 7
{EE 
ifFF 

(FF 
gridFF 
==FF 
nullFF 
)FF 
returnGG 
;GG %
RefreshGlobalShaderValuesII !
(II! "
)II" #
;II# $

Vector3IntJJ 
texPositionJJ 
=JJ  
WorldToTextureJJ! /
(JJ/ 0
positionJJ0 8
)JJ8 9
;JJ9 :
tintTextureKK 
.KK 
SetPixelKK 
(KK 
texPositionKK (
.KK( )
xKK) *
,KK* +
texPositionKK, 7
.KK7 8
yKK8 9
,KK9 :
GetGridInformationKK; M
(KKM N
gridKKN R
)KKR S
.KKS T
GetPositionPropertyKKT g
(KKg h
positionKKh p
,KKp q
$strKKr x
,KKx y
ColorKKz 
.	KK Ä
white
KKÄ Ö
)
KKÖ Ü
)
KKÜ á
;
KKá à
tintTextureLL 
.LL 
ApplyLL 
(LL 
)LL 
;LL 
}MM 
publicUU 

ColorUU 
GetColorUU 
(UU 
GridUU 
gridUU #
,UU# $

Vector3IntUU% /
positionUU0 8
)UU8 9
{VV 
ifWW 

(WW 
gridWW 
==WW 
nullWW 
)WW 
returnXX 
ColorXX 
.XX 
whiteXX 
;XX 
returnZZ 
GetGridInformationZZ !
(ZZ! "
gridZZ" &
)ZZ& '
.ZZ' (
GetPositionPropertyZZ( ;
(ZZ; <
positionZZ< D
,ZZD E
$strZZF L
,ZZL M
ColorZZN S
.ZZS T
whiteZZT Y
)ZZY Z
;ZZZ [
}[[ 
publicbb 

voidbb 
SetColorbb 
(bb 
Gridbb 
gridbb "
,bb" #

Vector3Intbb$ .
positionbb/ 7
,bb7 8
Colorbb9 >
colorbb? D
)bbD E
{cc 
ifdd 

(dd 
griddd 
==dd 
nulldd 
)dd 
returnee 
;ee 
GetGridInformationgg 
(gg 
gridgg 
)gg  
.gg  !
SetPositionPropertygg! 4
(gg4 5
positiongg5 =
,gg= >
$strgg? E
,ggE F
colorggG L
)ggL M
;ggM N
Refreshhh 
(hh 
gridhh 
,hh 
positionhh 
)hh 
;hh  
}ii 

Vector3Intkk 
WorldToTexturekk 
(kk 

Vector3Intkk (
worldkk) .
)kk. /
{ll 
returnmm 
newmm 

Vector3Intmm 
(mm 
worldmm #
.mm# $
xmm$ %
+mm& '
tintTexturemm( 3
.mm3 4
widthmm4 9
/mm: ;
$nummm< =
,mm= >
worldmm? D
.mmD E
ymmE F
+mmG H
tintTexturemmI T
.mmT U
heightmmU [
/mm\ ]
$nummm^ _
,mm_ `
$nummma b
)mmb c
;mmc d
}nn 

Vector3Intpp 
TextureToWorldpp 
(pp 

Vector3Intpp (
texpospp) /
)pp/ 0
{qq 
returnrr 
newrr 

Vector3Intrr 
(rr 
texposrr $
.rr$ %
xrr% &
-rr' (
tintTexturerr) 4
.rr4 5
widthrr5 :
/rr; <
$numrr= >
,rr> ?
texposrr@ F
.rrF G
yrrG H
-rrI J
tintTexturerrK V
.rrV W
heightrrW ]
/rr^ _
$numrr` a
,rra b
$numrrc d
)rrd e
;rre f
}ss 
GridInformationuu 
GetGridInformationuu &
(uu& '
Griduu' +
griduu, 0
)uu0 1
{vv 
GridInformationww 
gridInformationww '
=ww( )
gridww* .
.ww. /
GetComponentww/ ;
<ww; <
GridInformationww< K
>wwK L
(wwL M
)wwM N
;wwN O
ifyy 

(yy 
gridInformationyy 
==yy 
nullyy #
)yy# $
gridInformationzz 
=zz 
gridzz "
.zz" #

gameObjectzz# -
.zz- .
AddComponentzz. :
<zz: ;
GridInformationzz; J
>zzJ K
(zzK L
)zzL M
;zzM N
return|| 
gridInformation|| 
;|| 
}}} 
void %
RefreshGlobalShaderValues	 "
(" #
)# $
{
ÄÄ 
Shader
ÅÅ 
.
ÅÅ 
SetGlobalTexture
ÅÅ 
(
ÅÅ  
$str
ÅÅ  *
,
ÅÅ* +
m_TintTexture
ÅÅ, 9
)
ÅÅ9 :
;
ÅÅ: ;
Shader
ÇÇ 
.
ÇÇ 
SetGlobalFloat
ÇÇ 
(
ÇÇ 
$str
ÇÇ ,
,
ÇÇ, -
k_TintMapSize
ÇÇ. ;
)
ÇÇ; <
;
ÇÇ< =
}
ÉÉ 
}ÑÑ ˘®
úC:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Runtime\GridInformation\GridInformation.cs
	namespace 	
UnityEngine
 
. 
Tilemaps 
{ 
[ 
Serializable 
] 
internal 
enum 
GridInformationType %
{		 
Integer

 
,

 
String 
, 
Float 
, 
Double 
, 
UnityObject 
, 
Color 
} 
[ 
Serializable 
] 
[ 
AddComponentMenu 
( 
$str 0
)0 1
]1 2
public 

class 
GridInformation  
:! "
MonoBehaviour# 0
,0 1*
ISerializationCallbackReceiver2 P
{ 
internal 
struct  
GridInformationValue ,
{ 	
public 
GridInformationType &
type' +
;+ ,
public 
object 
data 
; 
} 	
[ 	
Serializable	 
] 
internal   
struct   
GridInformationKey   *
{!! 	
public"" 

Vector3Int"" 
position"" &
;""& '
public## 
String## 
name## 
;## 
}$$ 	
private&& 

Dictionary&& 
<&& 
GridInformationKey&& -
,&&- . 
GridInformationValue&&/ C
>&&C D 
m_PositionProperties&&E Y
=&&Z [
new&&\ _

Dictionary&&` j
<&&j k
GridInformationKey&&k }
,&&} ~!
GridInformationValue	&& ì
>
&&ì î
(
&&î ï
)
&&ï ñ
;
&&ñ ó
internal'' 

Dictionary'' 
<'' 
GridInformationKey'' .
,''. / 
GridInformationValue''0 D
>''D E
PositionProperties''F X
{(( 	
get)) 
{)) 
return))  
m_PositionProperties)) -
;))- .
}))/ 0
}** 	
[,, 	
SerializeField,,	 
],, 
[-- 	
HideInInspector--	 
]-- 
private.. 
List.. 
<.. 
GridInformationKey.. '
>..' (
m_PositionIntKeys..) :
=..; <
new..= @
List..A E
<..E F
GridInformationKey..F X
>..X Y
(..Y Z
)..Z [
;..[ \
[00 	
SerializeField00	 
]00 
[11 	
HideInInspector11	 
]11 
private22 
List22 
<22 
int22 
>22 
m_PositionIntValues22 -
=22. /
new220 3
List224 8
<228 9
int229 <
>22< =
(22= >
)22> ?
;22? @
[44 	
SerializeField44	 
]44 
[55 	
HideInInspector55	 
]55 
private66 
List66 
<66 
GridInformationKey66 '
>66' ( 
m_PositionStringKeys66) =
=66> ?
new66@ C
List66D H
<66H I
GridInformationKey66I [
>66[ \
(66\ ]
)66] ^
;66^ _
[88 	
SerializeField88	 
]88 
[99 	
HideInInspector99	 
]99 
private:: 
List:: 
<:: 
String:: 
>:: "
m_PositionStringValues:: 3
=::4 5
new::6 9
List::: >
<::> ?
String::? E
>::E F
(::F G
)::G H
;::H I
[<< 	
SerializeField<<	 
]<< 
[== 	
HideInInspector==	 
]== 
private>> 
List>> 
<>> 
GridInformationKey>> '
>>>' (
m_PositionFloatKeys>>) <
=>>= >
new>>? B
List>>C G
<>>G H
GridInformationKey>>H Z
>>>Z [
(>>[ \
)>>\ ]
;>>] ^
[@@ 	
SerializeField@@	 
]@@ 
[AA 	
HideInInspectorAA	 
]AA 
privateBB 
ListBB 
<BB 
floatBB 
>BB !
m_PositionFloatValuesBB 1
=BB2 3
newBB4 7
ListBB8 <
<BB< =
floatBB= B
>BBB C
(BBC D
)BBD E
;BBE F
[DD 	
SerializeFieldDD	 
]DD 
[EE 	
HideInInspectorEE	 
]EE 
privateFF 
ListFF 
<FF 
GridInformationKeyFF '
>FF' ( 
m_PositionDoubleKeysFF) =
=FF> ?
newFF@ C
ListFFD H
<FFH I
GridInformationKeyFFI [
>FF[ \
(FF\ ]
)FF] ^
;FF^ _
[HH 	
SerializeFieldHH	 
]HH 
[II 	
HideInInspectorII	 
]II 
privateJJ 
ListJJ 
<JJ 
DoubleJJ 
>JJ "
m_PositionDoubleValuesJJ 3
=JJ4 5
newJJ6 9
ListJJ: >
<JJ> ?
DoubleJJ? E
>JJE F
(JJF G
)JJG H
;JJH I
[LL 	
SerializeFieldLL	 
]LL 
[MM 	
HideInInspectorMM	 
]MM 
privateNN 
ListNN 
<NN 
GridInformationKeyNN '
>NN' ( 
m_PositionObjectKeysNN) =
=NN> ?
newNN@ C
ListNND H
<NNH I
GridInformationKeyNNI [
>NN[ \
(NN\ ]
)NN] ^
;NN^ _
[PP 	
SerializeFieldPP	 
]PP 
[QQ 	
HideInInspectorQQ	 
]QQ 
privateRR 
ListRR 
<RR 
ObjectRR 
>RR "
m_PositionObjectValuesRR 3
=RR4 5
newRR6 9
ListRR: >
<RR> ?
ObjectRR? E
>RRE F
(RRF G
)RRG H
;RRH I
[TT 	
SerializeFieldTT	 
]TT 
[UU 	
HideInInspectorUU	 
]UU 
privateVV 
ListVV 
<VV 
GridInformationKeyVV '
>VV' (
m_PositionColorKeysVV) <
=VV= >
newVV? B
ListVVC G
<VVG H
GridInformationKeyVVH Z
>VVZ [
(VV[ \
)VV\ ]
;VV] ^
[XX 	
SerializeFieldXX	 
]XX 
[YY 	
HideInInspectorYY	 
]YY 
privateZZ 
ListZZ 
<ZZ 
ColorZZ 
>ZZ !
m_PositionColorValuesZZ 1
=ZZ2 3
newZZ4 7
ListZZ8 <
<ZZ< =
ColorZZ= B
>ZZB C
(ZZC D
)ZZD E
;ZZE F
void\\ *
ISerializationCallbackReceiver\\ +
.\\+ ,
OnBeforeSerialize\\, =
(\\= >
)\\> ?
{]] 	
Grid^^ 
grid^^ 
=^^  
GetComponentInParent^^ ,
<^^, -
Grid^^- 1
>^^1 2
(^^2 3
)^^3 4
;^^4 5
if__ 
(__ 
grid__ 
==__ 
null__ 
)__ 
return`` 
;`` 
m_PositionIntKeysbb 
.bb 
Clearbb #
(bb# $
)bb$ %
;bb% &
m_PositionIntValuescc 
.cc  
Clearcc  %
(cc% &
)cc& '
;cc' ( 
m_PositionStringKeysdd  
.dd  !
Cleardd! &
(dd& '
)dd' (
;dd( )"
m_PositionStringValuesee "
.ee" #
Clearee# (
(ee( )
)ee) *
;ee* +
m_PositionFloatKeysff 
.ff  
Clearff  %
(ff% &
)ff& '
;ff' (!
m_PositionFloatValuesgg !
.gg! "
Cleargg" '
(gg' (
)gg( )
;gg) * 
m_PositionDoubleKeyshh  
.hh  !
Clearhh! &
(hh& '
)hh' (
;hh( )"
m_PositionDoubleValuesii "
.ii" #
Clearii# (
(ii( )
)ii) *
;ii* + 
m_PositionObjectKeysjj  
.jj  !
Clearjj! &
(jj& '
)jj' (
;jj( )"
m_PositionObjectValueskk "
.kk" #
Clearkk# (
(kk( )
)kk) *
;kk* +
m_PositionColorKeysll 
.ll  
Clearll  %
(ll% &
)ll& '
;ll' (!
m_PositionColorValuesmm !
.mm! "
Clearmm" '
(mm' (
)mm( )
;mm) *
foreachoo 
(oo 
varoo 
kvpoo 
inoo  
m_PositionPropertiesoo  4
)oo4 5
{pp 
switchqq 
(qq 
kvpqq 
.qq 
Valueqq !
.qq! "
typeqq" &
)qq& '
{rr 
casess 
GridInformationTypess ,
.ss, -
Integerss- 4
:ss4 5
m_PositionIntKeystt )
.tt) *
Addtt* -
(tt- .
kvptt. 1
.tt1 2
Keytt2 5
)tt5 6
;tt6 7
m_PositionIntValuesuu +
.uu+ ,
Adduu, /
(uu/ 0
(uu0 1
intuu1 4
)uu4 5
kvpuu5 8
.uu8 9
Valueuu9 >
.uu> ?
datauu? C
)uuC D
;uuD E
breakvv 
;vv 
caseww 
GridInformationTypeww ,
.ww, -
Stringww- 3
:ww3 4 
m_PositionStringKeysxx ,
.xx, -
Addxx- 0
(xx0 1
kvpxx1 4
.xx4 5
Keyxx5 8
)xx8 9
;xx9 :"
m_PositionStringValuesyy .
.yy. /
Addyy/ 2
(yy2 3
kvpyy3 6
.yy6 7
Valueyy7 <
.yy< =
datayy= A
asyyB D
StringyyE K
)yyK L
;yyL M
breakzz 
;zz 
case{{ 
GridInformationType{{ ,
.{{, -
Float{{- 2
:{{2 3
m_PositionFloatKeys|| +
.||+ ,
Add||, /
(||/ 0
kvp||0 3
.||3 4
Key||4 7
)||7 8
;||8 9!
m_PositionFloatValues}} -
.}}- .
Add}}. 1
(}}1 2
(}}2 3
float}}3 8
)}}8 9
kvp}}9 <
.}}< =
Value}}= B
.}}B C
data}}C G
)}}G H
;}}H I
break~~ 
;~~ 
case 
GridInformationType ,
., -
Double- 3
:3 4"
m_PositionDoubleKeys
ÄÄ ,
.
ÄÄ, -
Add
ÄÄ- 0
(
ÄÄ0 1
kvp
ÄÄ1 4
.
ÄÄ4 5
Key
ÄÄ5 8
)
ÄÄ8 9
;
ÄÄ9 :$
m_PositionDoubleValues
ÅÅ .
.
ÅÅ. /
Add
ÅÅ/ 2
(
ÅÅ2 3
(
ÅÅ3 4
double
ÅÅ4 :
)
ÅÅ: ;
kvp
ÅÅ; >
.
ÅÅ> ?
Value
ÅÅ? D
.
ÅÅD E
data
ÅÅE I
)
ÅÅI J
;
ÅÅJ K
break
ÇÇ 
;
ÇÇ 
case
ÉÉ !
GridInformationType
ÉÉ ,
.
ÉÉ, -
Color
ÉÉ- 2
:
ÉÉ2 3!
m_PositionColorKeys
ÑÑ +
.
ÑÑ+ ,
Add
ÑÑ, /
(
ÑÑ/ 0
kvp
ÑÑ0 3
.
ÑÑ3 4
Key
ÑÑ4 7
)
ÑÑ7 8
;
ÑÑ8 9#
m_PositionColorValues
ÖÖ -
.
ÖÖ- .
Add
ÖÖ. 1
(
ÖÖ1 2
(
ÖÖ2 3
Color
ÖÖ3 8
)
ÖÖ8 9
kvp
ÖÖ9 <
.
ÖÖ< =
Value
ÖÖ= B
.
ÖÖB C
data
ÖÖC G
)
ÖÖG H
;
ÖÖH I
break
ÜÜ 
;
ÜÜ 
default
áá 
:
áá "
m_PositionObjectKeys
àà ,
.
àà, -
Add
àà- 0
(
àà0 1
kvp
àà1 4
.
àà4 5
Key
àà5 8
)
àà8 9
;
àà9 :$
m_PositionObjectValues
ââ .
.
ââ. /
Add
ââ/ 2
(
ââ2 3
kvp
ââ3 6
.
ââ6 7
Value
ââ7 <
.
ââ< =
data
ââ= A
as
ââB D
Object
ââE K
)
ââK L
;
ââL M
break
ää 
;
ää 
}
ãã 
}
åå 
}
çç 	
void
èè ,
ISerializationCallbackReceiver
èè +
.
èè+ , 
OnAfterDeserialize
èè, >
(
èè> ?
)
èè? @
{
êê 	"
m_PositionProperties
ëë  
.
ëë  !
Clear
ëë! &
(
ëë& '
)
ëë' (
;
ëë( )
for
íí 
(
íí 
int
íí 
i
íí 
=
íí 
$num
íí 
;
íí 
i
íí 
!=
íí  
Math
íí! %
.
íí% &
Min
íí& )
(
íí) *
m_PositionIntKeys
íí* ;
.
íí; <
Count
íí< A
,
ííA B!
m_PositionIntValues
ííC V
.
ííV W
Count
ííW \
)
íí\ ]
;
íí] ^
i
íí_ `
++
íí` b
)
ííb c
{
ìì "
GridInformationValue
îî $
positionValue
îî% 2
;
îî2 3
positionValue
ïï 
.
ïï 
type
ïï "
=
ïï# $!
GridInformationType
ïï% 8
.
ïï8 9
Integer
ïï9 @
;
ïï@ A
positionValue
ññ 
.
ññ 
data
ññ "
=
ññ# $!
m_PositionIntValues
ññ% 8
[
ññ8 9
i
ññ9 :
]
ññ: ;
;
ññ; <"
m_PositionProperties
óó $
.
óó$ %
Add
óó% (
(
óó( )
m_PositionIntKeys
óó) :
[
óó: ;
i
óó; <
]
óó< =
,
óó= >
positionValue
óó? L
)
óóL M
;
óóM N
}
òò 
for
ôô 
(
ôô 
int
ôô 
i
ôô 
=
ôô 
$num
ôô 
;
ôô 
i
ôô 
!=
ôô  
Math
ôô! %
.
ôô% &
Min
ôô& )
(
ôô) *"
m_PositionStringKeys
ôô* >
.
ôô> ?
Count
ôô? D
,
ôôD E$
m_PositionStringValues
ôôF \
.
ôô\ ]
Count
ôô] b
)
ôôb c
;
ôôc d
i
ôôe f
++
ôôf h
)
ôôh i
{
öö "
GridInformationValue
õõ $
positionValue
õõ% 2
;
õõ2 3
positionValue
úú 
.
úú 
type
úú "
=
úú# $!
GridInformationType
úú% 8
.
úú8 9
String
úú9 ?
;
úú? @
positionValue
ùù 
.
ùù 
data
ùù "
=
ùù# $$
m_PositionStringValues
ùù% ;
[
ùù; <
i
ùù< =
]
ùù= >
;
ùù> ?"
m_PositionProperties
ûû $
.
ûû$ %
Add
ûû% (
(
ûû( )"
m_PositionStringKeys
ûû) =
[
ûû= >
i
ûû> ?
]
ûû? @
,
ûû@ A
positionValue
ûûB O
)
ûûO P
;
ûûP Q
}
üü 
for
†† 
(
†† 
int
†† 
i
†† 
=
†† 
$num
†† 
;
†† 
i
†† 
!=
††  
Math
††! %
.
††% &
Min
††& )
(
††) *!
m_PositionFloatKeys
††* =
.
††= >
Count
††> C
,
††C D#
m_PositionFloatValues
††E Z
.
††Z [
Count
††[ `
)
††` a
;
††a b
i
††c d
++
††d f
)
††f g
{
°° "
GridInformationValue
¢¢ $
positionValue
¢¢% 2
;
¢¢2 3
positionValue
££ 
.
££ 
type
££ "
=
££# $!
GridInformationType
££% 8
.
££8 9
Float
££9 >
;
££> ?
positionValue
§§ 
.
§§ 
data
§§ "
=
§§# $#
m_PositionFloatValues
§§% :
[
§§: ;
i
§§; <
]
§§< =
;
§§= >"
m_PositionProperties
•• $
.
••$ %
Add
••% (
(
••( )!
m_PositionFloatKeys
••) <
[
••< =
i
••= >
]
••> ?
,
••? @
positionValue
••A N
)
••N O
;
••O P
}
¶¶ 
for
ßß 
(
ßß 
int
ßß 
i
ßß 
=
ßß 
$num
ßß 
;
ßß 
i
ßß 
!=
ßß  
Math
ßß! %
.
ßß% &
Min
ßß& )
(
ßß) *"
m_PositionDoubleKeys
ßß* >
.
ßß> ?
Count
ßß? D
,
ßßD E$
m_PositionDoubleValues
ßßF \
.
ßß\ ]
Count
ßß] b
)
ßßb c
;
ßßc d
i
ßße f
++
ßßf h
)
ßßh i
{
®® "
GridInformationValue
©© $
positionValue
©©% 2
;
©©2 3
positionValue
™™ 
.
™™ 
type
™™ "
=
™™# $!
GridInformationType
™™% 8
.
™™8 9
Double
™™9 ?
;
™™? @
positionValue
´´ 
.
´´ 
data
´´ "
=
´´# $$
m_PositionDoubleValues
´´% ;
[
´´; <
i
´´< =
]
´´= >
;
´´> ?"
m_PositionProperties
¨¨ $
.
¨¨$ %
Add
¨¨% (
(
¨¨( )"
m_PositionDoubleKeys
¨¨) =
[
¨¨= >
i
¨¨> ?
]
¨¨? @
,
¨¨@ A
positionValue
¨¨B O
)
¨¨O P
;
¨¨P Q
}
≠≠ 
for
ÆÆ 
(
ÆÆ 
int
ÆÆ 
i
ÆÆ 
=
ÆÆ 
$num
ÆÆ 
;
ÆÆ 
i
ÆÆ 
!=
ÆÆ  
Math
ÆÆ! %
.
ÆÆ% &
Min
ÆÆ& )
(
ÆÆ) *"
m_PositionObjectKeys
ÆÆ* >
.
ÆÆ> ?
Count
ÆÆ? D
,
ÆÆD E$
m_PositionObjectValues
ÆÆF \
.
ÆÆ\ ]
Count
ÆÆ] b
)
ÆÆb c
;
ÆÆc d
i
ÆÆe f
++
ÆÆf h
)
ÆÆh i
{
ØØ "
GridInformationValue
∞∞ $
positionValue
∞∞% 2
;
∞∞2 3
positionValue
±± 
.
±± 
type
±± "
=
±±# $!
GridInformationType
±±% 8
.
±±8 9
UnityObject
±±9 D
;
±±D E
positionValue
≤≤ 
.
≤≤ 
data
≤≤ "
=
≤≤# $$
m_PositionObjectValues
≤≤% ;
[
≤≤; <
i
≤≤< =
]
≤≤= >
;
≤≤> ?"
m_PositionProperties
≥≥ $
.
≥≥$ %
Add
≥≥% (
(
≥≥( )"
m_PositionObjectKeys
≥≥) =
[
≥≥= >
i
≥≥> ?
]
≥≥? @
,
≥≥@ A
positionValue
≥≥B O
)
≥≥O P
;
≥≥P Q
}
¥¥ 
for
µµ 
(
µµ 
int
µµ 
i
µµ 
=
µµ 
$num
µµ 
;
µµ 
i
µµ 
!=
µµ  
Math
µµ! %
.
µµ% &
Min
µµ& )
(
µµ) *!
m_PositionColorKeys
µµ* =
.
µµ= >
Count
µµ> C
,
µµC D#
m_PositionColorValues
µµE Z
.
µµZ [
Count
µµ[ `
)
µµ` a
;
µµa b
i
µµc d
++
µµd f
)
µµf g
{
∂∂ "
GridInformationValue
∑∑ $
positionValue
∑∑% 2
;
∑∑2 3
positionValue
∏∏ 
.
∏∏ 
type
∏∏ "
=
∏∏# $!
GridInformationType
∏∏% 8
.
∏∏8 9
Color
∏∏9 >
;
∏∏> ?
positionValue
ππ 
.
ππ 
data
ππ "
=
ππ# $#
m_PositionColorValues
ππ% :
[
ππ: ;
i
ππ; <
]
ππ< =
;
ππ= >"
m_PositionProperties
∫∫ $
.
∫∫$ %
Add
∫∫% (
(
∫∫( )!
m_PositionColorKeys
∫∫) <
[
∫∫< =
i
∫∫= >
]
∫∫> ?
,
∫∫? @
positionValue
∫∫A N
)
∫∫N O
;
∫∫O P
}
ªª 
}
ºº 	
public
«« 
bool
«« !
SetPositionProperty
«« '
<
««' (
T
««( )
>
««) *
(
««* +

Vector3Int
««+ 5
position
««6 >
,
««> ?
String
««@ F
name
««G K
,
««K L
T
««M N
positionProperty
««O _
)
««_ `
{
»» 	
throw
…… 
new
…… %
NotImplementedException
…… -
(
……- .
$str
……. d
)
……d e
;
……e f
}
   	
public
”” 
bool
”” !
SetPositionProperty
”” '
(
””' (

Vector3Int
””( 2
position
””3 ;
,
””; <
String
””= C
name
””D H
,
””H I
int
””J M
positionProperty
””N ^
)
””^ _
{
‘‘ 	
return
’’ !
SetPositionProperty
’’ &
(
’’& '
position
’’' /
,
’’/ 0
name
’’1 5
,
’’5 6!
GridInformationType
’’7 J
.
’’J K
Integer
’’K R
,
’’R S
positionProperty
’’T d
)
’’d e
;
’’e f
}
÷÷ 	
public
ﬂﬂ 
bool
ﬂﬂ !
SetPositionProperty
ﬂﬂ '
(
ﬂﬂ' (

Vector3Int
ﬂﬂ( 2
position
ﬂﬂ3 ;
,
ﬂﬂ; <
String
ﬂﬂ= C
name
ﬂﬂD H
,
ﬂﬂH I
string
ﬂﬂJ P
positionProperty
ﬂﬂQ a
)
ﬂﬂa b
{
‡‡ 	
return
·· !
SetPositionProperty
·· &
(
··& '
position
··' /
,
··/ 0
name
··1 5
,
··5 6!
GridInformationType
··7 J
.
··J K
String
··K Q
,
··Q R
positionProperty
··S c
)
··c d
;
··d e
}
‚‚ 	
public
ÎÎ 
bool
ÎÎ !
SetPositionProperty
ÎÎ '
(
ÎÎ' (

Vector3Int
ÎÎ( 2
position
ÎÎ3 ;
,
ÎÎ; <
String
ÎÎ= C
name
ÎÎD H
,
ÎÎH I
float
ÎÎJ O
positionProperty
ÎÎP `
)
ÎÎ` a
{
ÏÏ 	
return
ÌÌ !
SetPositionProperty
ÌÌ &
(
ÌÌ& '
position
ÌÌ' /
,
ÌÌ/ 0
name
ÌÌ1 5
,
ÌÌ5 6!
GridInformationType
ÌÌ7 J
.
ÌÌJ K
Float
ÌÌK P
,
ÌÌP Q
positionProperty
ÌÌR b
)
ÌÌb c
;
ÌÌc d
}
ÓÓ 	
public
˜˜ 
bool
˜˜ !
SetPositionProperty
˜˜ '
(
˜˜' (

Vector3Int
˜˜( 2
position
˜˜3 ;
,
˜˜; <
String
˜˜= C
name
˜˜D H
,
˜˜H I
double
˜˜J P
positionProperty
˜˜Q a
)
˜˜a b
{
¯¯ 	
return
˘˘ !
SetPositionProperty
˘˘ &
(
˘˘& '
position
˘˘' /
,
˘˘/ 0
name
˘˘1 5
,
˘˘5 6!
GridInformationType
˘˘7 J
.
˘˘J K
Double
˘˘K Q
,
˘˘Q R
positionProperty
˘˘S c
)
˘˘c d
;
˘˘d e
}
˙˙ 	
public
ÉÉ 
bool
ÉÉ !
SetPositionProperty
ÉÉ '
(
ÉÉ' (

Vector3Int
ÉÉ( 2
position
ÉÉ3 ;
,
ÉÉ; <
String
ÉÉ= C
name
ÉÉD H
,
ÉÉH I
UnityEngine
ÉÉJ U
.
ÉÉU V
Object
ÉÉV \
positionProperty
ÉÉ] m
)
ÉÉm n
{
ÑÑ 	
return
ÖÖ !
SetPositionProperty
ÖÖ &
(
ÖÖ& '
position
ÖÖ' /
,
ÖÖ/ 0
name
ÖÖ1 5
,
ÖÖ5 6!
GridInformationType
ÖÖ7 J
.
ÖÖJ K
UnityObject
ÖÖK V
,
ÖÖV W
positionProperty
ÖÖX h
)
ÖÖh i
;
ÖÖi j
}
ÜÜ 	
public
èè 
bool
èè !
SetPositionProperty
èè '
(
èè' (

Vector3Int
èè( 2
position
èè3 ;
,
èè; <
String
èè= C
name
èèD H
,
èèH I
Color
èèJ O
positionProperty
èèP `
)
èè` a
{
êê 	
return
ëë !
SetPositionProperty
ëë &
(
ëë& '
position
ëë' /
,
ëë/ 0
name
ëë1 5
,
ëë5 6!
GridInformationType
ëë7 J
.
ëëJ K
Color
ëëK P
,
ëëP Q
positionProperty
ëëR b
)
ëëb c
;
ëëc d
}
íí 	
private
îî 
bool
îî !
SetPositionProperty
îî (
(
îî( )

Vector3Int
îî) 3
position
îî4 <
,
îî< =
String
îî> D
name
îîE I
,
îîI J!
GridInformationType
îîK ^
dataType
îî_ g
,
îîg h
System
îîi o
.
îîo p
Object
îîp v
positionPropertyîîw á
)îîá à
{
ïï 	
Grid
ññ 
grid
ññ 
=
ññ "
GetComponentInParent
ññ ,
<
ññ, -
Grid
ññ- 1
>
ññ1 2
(
ññ2 3
)
ññ3 4
;
ññ4 5
if
óó 
(
óó 
grid
óó 
!=
óó 
null
óó 
&&
óó 
positionProperty
óó  0
!=
óó1 3
null
óó4 8
)
óó8 9
{
òò  
GridInformationKey
ôô "
positionKey
ôô# .
;
ôô. /
positionKey
öö 
.
öö 
position
öö $
=
öö% &
position
öö' /
;
öö/ 0
positionKey
õõ 
.
õõ 
name
õõ  
=
õõ! "
name
õõ# '
;
õõ' ("
GridInformationValue
ùù $
positionValue
ùù% 2
;
ùù2 3
positionValue
ûû 
.
ûû 
type
ûû "
=
ûû# $
dataType
ûû% -
;
ûû- .
positionValue
üü 
.
üü 
data
üü "
=
üü# $
positionProperty
üü% 5
;
üü5 6"
m_PositionProperties
°° $
[
°°$ %
positionKey
°°% 0
]
°°0 1
=
°°2 3
positionValue
°°4 A
;
°°A B
return
¢¢ 
true
¢¢ 
;
¢¢ 
}
££ 
return
§§ 
false
§§ 
;
§§ 
}
•• 	
public
∞∞ 
T
∞∞ !
GetPositionProperty
∞∞ $
<
∞∞$ %
T
∞∞% &
>
∞∞& '
(
∞∞' (

Vector3Int
∞∞( 2
position
∞∞3 ;
,
∞∞; <
String
∞∞= C
name
∞∞D H
,
∞∞H I
T
∞∞J K
defaultValue
∞∞L X
)
∞∞X Y
where
∞∞Z _
T
∞∞` a
:
∞∞b c
UnityEngine
∞∞d o
.
∞∞o p
Object
∞∞p v
{
±± 	 
GridInformationKey
≤≤ 
positionKey
≤≤ *
;
≤≤* +
positionKey
≥≥ 
.
≥≥ 
position
≥≥  
=
≥≥! "
position
≥≥# +
;
≥≥+ ,
positionKey
¥¥ 
.
¥¥ 
name
¥¥ 
=
¥¥ 
name
¥¥ #
;
¥¥# $"
GridInformationValue
∂∂  
positionValue
∂∂! .
;
∂∂. /
if
∑∑ 
(
∑∑ "
m_PositionProperties
∑∑ $
.
∑∑$ %
TryGetValue
∑∑% 0
(
∑∑0 1
positionKey
∑∑1 <
,
∑∑< =
out
∑∑> A
positionValue
∑∑B O
)
∑∑O P
)
∑∑P Q
{
∏∏ 
if
ππ 
(
ππ 
positionValue
ππ !
.
ππ! "
type
ππ" &
!=
ππ' )!
GridInformationType
ππ* =
.
ππ= >
UnityObject
ππ> I
)
ππI J
throw
∫∫ 
new
∫∫ "
InvalidCastException
∫∫ 2
(
∫∫2 3
$str
∫∫3 m
)
∫∫m n
;
∫∫n o
return
ªª 
positionValue
ªª $
.
ªª$ %
data
ªª% )
as
ªª* ,
T
ªª- .
;
ªª. /
}
ºº 
return
ΩΩ 
defaultValue
ΩΩ 
;
ΩΩ  
}
ææ 	
public
»» 
int
»» !
GetPositionProperty
»» &
(
»»& '

Vector3Int
»»' 1
position
»»2 :
,
»»: ;
String
»»< B
name
»»C G
,
»»G H
int
»»I L
defaultValue
»»M Y
)
»»Y Z
{
…… 	 
GridInformationKey
   
positionKey
   *
;
  * +
positionKey
ÀÀ 
.
ÀÀ 
position
ÀÀ  
=
ÀÀ! "
position
ÀÀ# +
;
ÀÀ+ ,
positionKey
ÃÃ 
.
ÃÃ 
name
ÃÃ 
=
ÃÃ 
name
ÃÃ #
;
ÃÃ# $"
GridInformationValue
ŒŒ  
positionValue
ŒŒ! .
;
ŒŒ. /
if
œœ 
(
œœ "
m_PositionProperties
œœ $
.
œœ$ %
TryGetValue
œœ% 0
(
œœ0 1
positionKey
œœ1 <
,
œœ< =
out
œœ> A
positionValue
œœB O
)
œœO P
)
œœP Q
{
–– 
if
—— 
(
—— 
positionValue
—— !
.
——! "
type
——" &
!=
——' )!
GridInformationType
——* =
.
——= >
Integer
——> E
)
——E F
throw
““ 
new
““ "
InvalidCastException
““ 2
(
““2 3
$str
““3 m
)
““m n
;
““n o
return
”” 
(
”” 
int
”” 
)
”” 
positionValue
”” )
.
””) *
data
””* .
;
””. /
}
‘‘ 
return
’’ 
defaultValue
’’ 
;
’’  
}
÷÷ 	
public
‡‡ 
string
‡‡ !
GetPositionProperty
‡‡ )
(
‡‡) *

Vector3Int
‡‡* 4
position
‡‡5 =
,
‡‡= >
String
‡‡? E
name
‡‡F J
,
‡‡J K
string
‡‡L R
defaultValue
‡‡S _
)
‡‡_ `
{
·· 	 
GridInformationKey
‚‚ 
positionKey
‚‚ *
;
‚‚* +
positionKey
„„ 
.
„„ 
position
„„  
=
„„! "
position
„„# +
;
„„+ ,
positionKey
‰‰ 
.
‰‰ 
name
‰‰ 
=
‰‰ 
name
‰‰ #
;
‰‰# $"
GridInformationValue
ÊÊ  
positionValue
ÊÊ! .
;
ÊÊ. /
if
ÁÁ 
(
ÁÁ "
m_PositionProperties
ÁÁ $
.
ÁÁ$ %
TryGetValue
ÁÁ% 0
(
ÁÁ0 1
positionKey
ÁÁ1 <
,
ÁÁ< =
out
ÁÁ> A
positionValue
ÁÁB O
)
ÁÁO P
)
ÁÁP Q
{
ËË 
if
ÈÈ 
(
ÈÈ 
positionValue
ÈÈ !
.
ÈÈ! "
type
ÈÈ" &
!=
ÈÈ' )!
GridInformationType
ÈÈ* =
.
ÈÈ= >
String
ÈÈ> D
)
ÈÈD E
throw
ÍÍ 
new
ÍÍ "
InvalidCastException
ÍÍ 2
(
ÍÍ2 3
$str
ÍÍ3 m
)
ÍÍm n
;
ÍÍn o
return
ÎÎ 
(
ÎÎ 
string
ÎÎ 
)
ÎÎ 
positionValue
ÎÎ ,
.
ÎÎ, -
data
ÎÎ- 1
;
ÎÎ1 2
}
ÏÏ 
return
ÌÌ 
defaultValue
ÌÌ 
;
ÌÌ  
}
ÓÓ 	
public
¯¯ 
float
¯¯ !
GetPositionProperty
¯¯ (
(
¯¯( )

Vector3Int
¯¯) 3
position
¯¯4 <
,
¯¯< =
String
¯¯> D
name
¯¯E I
,
¯¯I J
float
¯¯K P
defaultValue
¯¯Q ]
)
¯¯] ^
{
˘˘ 	 
GridInformationKey
˙˙ 
positionKey
˙˙ *
;
˙˙* +
positionKey
˚˚ 
.
˚˚ 
position
˚˚  
=
˚˚! "
position
˚˚# +
;
˚˚+ ,
positionKey
¸¸ 
.
¸¸ 
name
¸¸ 
=
¸¸ 
name
¸¸ #
;
¸¸# $"
GridInformationValue
˛˛  
positionValue
˛˛! .
;
˛˛. /
if
ˇˇ 
(
ˇˇ "
m_PositionProperties
ˇˇ $
.
ˇˇ$ %
TryGetValue
ˇˇ% 0
(
ˇˇ0 1
positionKey
ˇˇ1 <
,
ˇˇ< =
out
ˇˇ> A
positionValue
ˇˇB O
)
ˇˇO P
)
ˇˇP Q
{
ÄÄ 
if
ÅÅ 
(
ÅÅ 
positionValue
ÅÅ !
.
ÅÅ! "
type
ÅÅ" &
!=
ÅÅ' )!
GridInformationType
ÅÅ* =
.
ÅÅ= >
Float
ÅÅ> C
)
ÅÅC D
throw
ÇÇ 
new
ÇÇ "
InvalidCastException
ÇÇ 2
(
ÇÇ2 3
$str
ÇÇ3 m
)
ÇÇm n
;
ÇÇn o
return
ÉÉ 
(
ÉÉ 
float
ÉÉ 
)
ÉÉ 
positionValue
ÉÉ +
.
ÉÉ+ ,
data
ÉÉ, 0
;
ÉÉ0 1
}
ÑÑ 
return
ÖÖ 
defaultValue
ÖÖ 
;
ÖÖ  
}
ÜÜ 	
public
êê 
double
êê !
GetPositionProperty
êê )
(
êê) *

Vector3Int
êê* 4
position
êê5 =
,
êê= >
String
êê? E
name
êêF J
,
êêJ K
double
êêL R
defaultValue
êêS _
)
êê_ `
{
ëë 	 
GridInformationKey
íí 
positionKey
íí *
;
íí* +
positionKey
ìì 
.
ìì 
position
ìì  
=
ìì! "
position
ìì# +
;
ìì+ ,
positionKey
îî 
.
îî 
name
îî 
=
îî 
name
îî #
;
îî# $"
GridInformationValue
ññ  
positionValue
ññ! .
;
ññ. /
if
óó 
(
óó "
m_PositionProperties
óó $
.
óó$ %
TryGetValue
óó% 0
(
óó0 1
positionKey
óó1 <
,
óó< =
out
óó> A
positionValue
óóB O
)
óóO P
)
óóP Q
{
òò 
if
ôô 
(
ôô 
positionValue
ôô !
.
ôô! "
type
ôô" &
!=
ôô' )!
GridInformationType
ôô* =
.
ôô= >
Double
ôô> D
)
ôôD E
throw
öö 
new
öö "
InvalidCastException
öö 2
(
öö2 3
$str
öö3 m
)
ööm n
;
öön o
return
õõ 
(
õõ 
double
õõ 
)
õõ 
positionValue
õõ ,
.
õõ, -
data
õõ- 1
;
õõ1 2
}
úú 
return
ùù 
defaultValue
ùù 
;
ùù  
}
ûû 	
public
®® 
Color
®® !
GetPositionProperty
®® (
(
®®( )

Vector3Int
®®) 3
position
®®4 <
,
®®< =
String
®®> D
name
®®E I
,
®®I J
Color
®®K P
defaultValue
®®Q ]
)
®®] ^
{
©© 	 
GridInformationKey
™™ 
positionKey
™™ *
;
™™* +
positionKey
´´ 
.
´´ 
position
´´  
=
´´! "
position
´´# +
;
´´+ ,
positionKey
¨¨ 
.
¨¨ 
name
¨¨ 
=
¨¨ 
name
¨¨ #
;
¨¨# $"
GridInformationValue
ÆÆ  
positionValue
ÆÆ! .
;
ÆÆ. /
if
ØØ 
(
ØØ "
m_PositionProperties
ØØ $
.
ØØ$ %
TryGetValue
ØØ% 0
(
ØØ0 1
positionKey
ØØ1 <
,
ØØ< =
out
ØØ> A
positionValue
ØØB O
)
ØØO P
)
ØØP Q
{
∞∞ 
if
±± 
(
±± 
positionValue
±± !
.
±±! "
type
±±" &
!=
±±' )!
GridInformationType
±±* =
.
±±= >
Color
±±> C
)
±±C D
throw
≤≤ 
new
≤≤ "
InvalidCastException
≤≤ 2
(
≤≤2 3
$str
≤≤3 m
)
≤≤m n
;
≤≤n o
return
≥≥ 
(
≥≥ 
Color
≥≥ 
)
≥≥ 
positionValue
≥≥ +
.
≥≥+ ,
data
≥≥, 0
;
≥≥0 1
}
¥¥ 
return
µµ 
defaultValue
µµ 
;
µµ  
}
∂∂ 	
public
ææ 
bool
ææ #
ErasePositionProperty
ææ )
(
ææ) *

Vector3Int
ææ* 4
position
ææ5 =
,
ææ= >
String
ææ? E
name
ææF J
)
ææJ K
{
øø 	 
GridInformationKey
¿¿ 
positionKey
¿¿ *
;
¿¿* +
positionKey
¡¡ 
.
¡¡ 
position
¡¡  
=
¡¡! "
position
¡¡# +
;
¡¡+ ,
positionKey
¬¬ 
.
¬¬ 
name
¬¬ 
=
¬¬ 
name
¬¬ #
;
¬¬# $
return
√√ "
m_PositionProperties
√√ '
.
√√' (
Remove
√√( .
(
√√. /
positionKey
√√/ :
)
√√: ;
;
√√; <
}
ƒƒ 	
public
…… 
virtual
…… 
void
…… 
Reset
…… !
(
……! "
)
……" #
{
   	"
m_PositionProperties
ÀÀ  
.
ÀÀ  !
Clear
ÀÀ! &
(
ÀÀ& '
)
ÀÀ' (
;
ÀÀ( )
}
ÃÃ 	
public
”” 

Vector3Int
”” 
[
”” 
]
”” 
GetAllPositions
”” +
(
””+ ,
string
””, 2
propertyName
””3 ?
)
””? @
{
‘‘ 	
return
’’ "
m_PositionProperties
’’ '
.
’’' (
Keys
’’( ,
.
’’, -
ToList
’’- 3
(
’’3 4
)
’’4 5
.
’’5 6
FindAll
’’6 =
(
’’= >
x
’’> ?
=>
’’@ B
x
’’C D
.
’’D E
name
’’E I
==
’’J L
propertyName
’’M Y
)
’’Y Z
.
’’Z [
Select
’’[ a
(
’’a b
x
’’b c
=>
’’d f
x
’’g h
.
’’h i
position
’’i q
)
’’q r
.
’’r s
ToArray
’’s z
(
’’z {
)
’’{ |
;
’’| }
}
÷÷ 	
}
◊◊ 
}ÿÿ ËG
úC:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Runtime\Tiles\AnimatedTile\AnimatedTile.cs
	namespace 	
UnityEngine
 
. 
Tilemaps 
{ 
[ 
Serializable 
] 
[ 
CreateAssetMenu 
( 
fileName 
= 
$str  3
,3 4
menuName5 =
=> ?
$str@ U
)U V
]V W
public 

class 
AnimatedTile 
: 
TileBase  (
{ 
public 
Sprite 
[ 
] 
m_AnimatedSprites )
;) *
public 
float 

m_MinSpeed 
=  !
$num" $
;$ %
public 
float 

m_MaxSpeed 
=  !
$num" $
;$ %
public## 
float##  
m_AnimationStartTime## )
;##) *
public'' 
Tile'' 
.'' 
ColliderType''  
m_TileColliderType''! 3
;''3 4
public// 
override// 
void// 
GetTileData// (
(//( )

Vector3Int//) 3
location//4 <
,//< =
ITilemap//> F
tileMap//G N
,//N O
ref//P S
TileData//T \
tileData//] e
)//e f
{00 	
tileData11 
.11 
	transform11 
=11  
	Matrix4x411! *
.11* +
identity11+ 3
;113 4
tileData22 
.22 
color22 
=22 
Color22 "
.22" #
white22# (
;22( )
if33 
(33 
m_AnimatedSprites33 !
!=33" $
null33% )
&&33* ,
m_AnimatedSprites33- >
.33> ?
Length33? E
>33F G
$num33H I
)33I J
{44 
tileData55 
.55 
sprite55 
=55  !
m_AnimatedSprites55" 3
[553 4
m_AnimatedSprites554 E
.55E F
Length55F L
-55M N
$num55O P
]55P Q
;55Q R
tileData66 
.66 
colliderType66 %
=66& '
m_TileColliderType66( :
;66: ;
}77 
}88 	
publicAA 
overrideAA 
boolAA  
GetTileAnimationDataAA 1
(AA1 2

Vector3IntAA2 <
locationAA= E
,AAE F
ITilemapAAG O
tileMapAAP W
,AAW X
refAAY \
TileAnimationDataAA] n
tileAnimationData	AAo Ä
)
AAÄ Å
{BB 	
ifCC 
(CC 
m_AnimatedSpritesCC !
.CC! "
LengthCC" (
>CC) *
$numCC+ ,
)CC, -
{DD 
tileAnimationDataEE !
.EE! "
animatedSpritesEE" 1
=EE2 3
m_AnimatedSpritesEE4 E
;EEE F
tileAnimationDataFF !
.FF! "
animationSpeedFF" 0
=FF1 2
RandomFF3 9
.FF9 :
RangeFF: ?
(FF? @

m_MinSpeedFF@ J
,FFJ K

m_MaxSpeedFFL V
)FFV W
;FFW X
tileAnimationDataGG !
.GG! "
animationStartTimeGG" 4
=GG5 6 
m_AnimationStartTimeGG7 K
;GGK L
returnHH 
trueHH 
;HH 
}II 
returnJJ 
falseJJ 
;JJ 
}KK 	
}LL 
[OO 
CustomEditorOO 
(OO 
typeofOO 
(OO 
AnimatedTileOO %
)OO% &
)OO& '
]OO' (
publicPP 

classPP 
AnimatedTileEditorPP #
:PP$ %
EditorPP& ,
{QQ 
privateRR 
AnimatedTileRR 
tileRR !
{RR" #
getRR$ '
{RR( )
returnRR* 0
(RR1 2
targetRR2 8
asRR9 ;
AnimatedTileRR< H
)RRH I
;RRI J
}RRK L
}RRM N
publicTT 
overrideTT 
voidTT 
OnInspectorGUITT +
(TT+ ,
)TT, -
{UU 	
	EditorGUIVV 
.VV 
BeginChangeCheckVV &
(VV& '
)VV' (
;VV( )
intWW 
countWW 
=WW 
EditorGUILayoutWW '
.WW' (
DelayedIntFieldWW( 7
(WW7 8
$strWW8 T
,WWT U
tileWWV Z
.WWZ [
m_AnimatedSpritesWW[ l
!=WWm o
nullWWp t
?WWu v
tileWWw {
.WW{ |
m_AnimatedSprites	WW| ç
.
WWç é
Length
WWé î
:
WWï ñ
$num
WWó ò
)
WWò ô
;
WWô ö
ifXX 
(XX 
countXX 
<XX 
$numXX 
)XX 
countYY 
=YY 
$numYY 
;YY 
if[[ 
([[ 
tile[[ 
.[[ 
m_AnimatedSprites[[ &
==[[' )
null[[* .
||[[/ 1
tile[[2 6
.[[6 7
m_AnimatedSprites[[7 H
.[[H I
Length[[I O
!=[[P R
count[[S X
)[[X Y
{\\ 
Array]] 
.]] 
Resize]] 
<]] 
Sprite]] #
>]]# $
(]]$ %
ref]]% (
tile]]) -
.]]- .
m_AnimatedSprites]]. ?
,]]? @
count]]A F
)]]F G
;]]G H
}^^ 
if`` 
(`` 
count`` 
==`` 
$num`` 
)`` 
returnaa 
;aa 
EditorGUILayoutcc 
.cc 

LabelFieldcc &
(cc& '
$strcc' ]
)cc] ^
;cc^ _
EditorGUILayoutdd 
.dd 
Spacedd !
(dd! "
)dd" #
;dd# $
forff 
(ff 
intff 
iff 
=ff 
$numff 
;ff 
iff 
<ff 
countff  %
;ff% &
iff' (
++ff( *
)ff* +
{gg 
tilehh 
.hh 
m_AnimatedSpriteshh &
[hh& '
ihh' (
]hh( )
=hh* +
(hh, -
Spritehh- 3
)hh3 4
EditorGUILayouthh5 D
.hhD E
ObjectFieldhhE P
(hhP Q
$strhhQ Z
+hh[ \
(hh] ^
ihh^ _
+hh_ `
$numhh` a
)hha b
,hhb c
tilehhd h
.hhh i
m_AnimatedSpriteshhi z
[hhz {
ihh{ |
]hh| }
,hh} ~
typeof	hh Ö
(
hhÖ Ü
Sprite
hhÜ å
)
hhå ç
,
hhç é
false
hhè î
,
hhî ï
null
hhñ ö
)
hhö õ
;
hhõ ú
}ii 
floatkk 
minSpeedkk 
=kk 
EditorGUILayoutkk ,
.kk, -

FloatFieldkk- 7
(kk7 8
$strkk8 G
,kkG H
tilekkI M
.kkM N

m_MinSpeedkkN X
)kkX Y
;kkY Z
floatll 
maxSpeedll 
=ll 
EditorGUILayoutll ,
.ll, -

FloatFieldll- 7
(ll7 8
$strll8 G
,llG H
tilellI M
.llM N

m_MaxSpeedllN X
)llX Y
;llY Z
ifmm 
(mm 
minSpeedmm 
<mm 
$nummm 
)mm  
minSpeednn 
=nn 
$numnn 
;nn  
ifpp 
(pp 
maxSpeedpp 
<pp 
$numpp 
)pp  
maxSpeedqq 
=qq 
$numqq 
;qq  
ifss 
(ss 
maxSpeedss 
<ss 
minSpeedss #
)ss# $
maxSpeedtt 
=tt 
minSpeedtt #
;tt# $
tilevv 
.vv 

m_MinSpeedvv 
=vv 
minSpeedvv &
;vv& '
tileww 
.ww 

m_MaxSpeedww 
=ww 
maxSpeedww &
;ww& '
tileyy 
.yy  
m_AnimationStartTimeyy %
=yy& '
EditorGUILayoutyy( 7
.yy7 8

FloatFieldyy8 B
(yyB C
$stryyC O
,yyO P
tileyyQ U
.yyU V 
m_AnimationStartTimeyyV j
)yyj k
;yyk l
tilezz 
.zz 
m_TileColliderTypezz #
=zz# $
(zz$ %
Tilezz% )
.zz) *
ColliderTypezz* 6
)zz6 7
EditorGUILayoutzz8 G
.zzG H
	EnumPopupzzH Q
(zzQ R
$strzzR a
,zza b
tilezzc g
.zzg h
m_TileColliderTypezzh z
)zzz {
;zz{ |
if{{ 
({{ 
	EditorGUI{{ 
.{{ 
EndChangeCheck{{ (
({{( )
){{) *
){{* +
EditorUtility|| 
.|| 
SetDirty|| &
(||& '
tile||' +
)||+ ,
;||, -
}}} 	
}~~ 
}ÄÄ »{
¶C:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Runtime\Tiles\HexagonalRuleTile\HexagonalRuleTile.cs
	namespace 	
UnityEngine
 
{ 
public 

class 
HexagonalRuleTile "
<" #
T# $
>$ %
:& '
HexagonalRuleTile( 9
{ 
public 
sealed 
override 
Type #
m_NeighborType$ 2
{3 4
get5 8
{9 :
return; A
typeofB H
(H I
TI J
)J K
;K L
}M N
}O P
} 
[ 
Serializable 
] 
[ 
CreateAssetMenu 
( 
fileName 
= 
$str  9
,9 :
menuName; C
=D E
$strF a
)a b
]b c
public 

class 
HexagonalRuleTile "
:# $
RuleTile% -
{ 
public 
override 
int 
m_RotationAngle +
=>, .
$num/ 1
;1 2
private 
static 
float 
[ 
] 
m_CosAngleArr1 -
=. /
{0 1
Mathf 
. 
Cos 
( 
$num 
* 
Mathf 
.  
Deg2Rad  '
)' (
,( )
Mathf   
.   
Cos   
(   
-   
$num   
*   
Mathf   !
.  ! "
Deg2Rad  " )
)  ) *
,  * +
Mathf!! 
.!! 
Cos!! 
(!! 
-!! 
$num!! 
*!! 
Mathf!! "
.!!" #
Deg2Rad!!# *
)!!* +
,!!+ ,
Mathf"" 
."" 
Cos"" 
("" 
-"" 
$num"" 
*"" 
Mathf"" "
.""" #
Deg2Rad""# *
)""* +
,""+ ,
Mathf## 
.## 
Cos## 
(## 
-## 
$num## 
*## 
Mathf## "
.##" #
Deg2Rad### *
)##* +
,##+ ,
Mathf$$ 
.$$ 
Cos$$ 
($$ 
-$$ 
$num$$ 
*$$ 
Mathf$$ "
.$$" #
Deg2Rad$$# *
)$$* +
,$$+ ,
}%% 	
;%%	 

private&& 
static&& 
float&& 
[&& 
]&& 
m_SinAngleArr1&& -
=&&. /
{&&0 1
Mathf'' 
.'' 
Sin'' 
('' 
$num'' 
*'' 
Mathf'' 
.''  
Deg2Rad''  '
)''' (
,''( )
Mathf(( 
.(( 
Sin(( 
((( 
-(( 
$num(( 
*(( 
Mathf(( !
.((! "
Deg2Rad((" )
)(() *
,((* +
Mathf)) 
.)) 
Sin)) 
()) 
-)) 
$num)) 
*)) 
Mathf)) "
.))" #
Deg2Rad))# *
)))* +
,))+ ,
Mathf** 
.** 
Sin** 
(** 
-** 
$num** 
*** 
Mathf** "
.**" #
Deg2Rad**# *
)*** +
,**+ ,
Mathf++ 
.++ 
Sin++ 
(++ 
-++ 
$num++ 
*++ 
Mathf++ "
.++" #
Deg2Rad++# *
)++* +
,+++ ,
Mathf,, 
.,, 
Sin,, 
(,, 
-,, 
$num,, 
*,, 
Mathf,, "
.,," #
Deg2Rad,,# *
),,* +
,,,+ ,
}-- 	
;--	 

private.. 
static.. 
float.. 
[.. 
].. 
m_CosAngleArr2.. -
=... /
{..0 1
Mathf// 
.// 
Cos// 
(// 
$num// 
*// 
Mathf// 
.//  
Deg2Rad//  '
)//' (
,//( )
Mathf00 
.00 
Cos00 
(00 
$num00 
*00 
Mathf00  
.00  !
Deg2Rad00! (
)00( )
,00) *
Mathf11 
.11 
Cos11 
(11 
$num11 
*11 
Mathf11 !
.11! "
Deg2Rad11" )
)11) *
,11* +
Mathf22 
.22 
Cos22 
(22 
$num22 
*22 
Mathf22 !
.22! "
Deg2Rad22" )
)22) *
,22* +
Mathf33 
.33 
Cos33 
(33 
$num33 
*33 
Mathf33 !
.33! "
Deg2Rad33" )
)33) *
,33* +
Mathf44 
.44 
Cos44 
(44 
$num44 
*44 
Mathf44 !
.44! "
Deg2Rad44" )
)44) *
,44* +
}55 	
;55	 

private66 
static66 
float66 
[66 
]66 
m_SinAngleArr266 -
=66. /
{660 1
Mathf77 
.77 
Sin77 
(77 
$num77 
*77 
Mathf77 
.77  
Deg2Rad77  '
)77' (
,77( )
Mathf88 
.88 
Sin88 
(88 
$num88 
*88 
Mathf88  
.88  !
Deg2Rad88! (
)88( )
,88) *
Mathf99 
.99 
Sin99 
(99 
$num99 
*99 
Mathf99 !
.99! "
Deg2Rad99" )
)99) *
,99* +
Mathf:: 
.:: 
Sin:: 
(:: 
$num:: 
*:: 
Mathf:: !
.::! "
Deg2Rad::" )
)::) *
,::* +
Mathf;; 
.;; 
Sin;; 
(;; 
$num;; 
*;; 
Mathf;; !
.;;! "
Deg2Rad;;" )
);;) *
,;;* +
Mathf<< 
.<< 
Sin<< 
(<< 
$num<< 
*<< 
Mathf<< !
.<<! "
Deg2Rad<<" )
)<<) *
,<<* +
}== 	
;==	 

publicBB 
boolBB 
	m_FlatTopBB 
;BB 
staticDD 
floatDD "
m_TilemapToWorldYScaleDD +
=DD, -
MathfDD. 3
.DD3 4
PowDD4 7
(DD7 8
$numDD8 9
-DD: ;
MathfDD< A
.DDA B
PowDDB E
(DDE F
$numDDF J
,DDJ K
$numDDL N
)DDN O
,DDO P
$numDDQ U
)DDU V
;DDV W
publicFF 
staticFF 
Vector3FF *
TilemapPositionToWorldPositionFF <
(FF< =

Vector3IntFF= G
tilemapPositionFFH W
)FFW X
{GG 	
Vector3HH 
worldPositionHH !
=HH" #
newHH$ '
Vector3HH( /
(HH/ 0
tilemapPositionHH0 ?
.HH? @
xHH@ A
,HHA B
tilemapPositionHHC R
.HHR S
yHHS T
)HHT U
;HHU V
ifII 
(II 
tilemapPositionII 
.II  
yII  !
%II" #
$numII$ %
!=II& (
$numII) *
)II* +
worldPositionJJ 
.JJ 
xJJ 
+=JJ  "
$numJJ# '
;JJ' (
worldPositionKK 
.KK 
yKK 
*=KK "
m_TilemapToWorldYScaleKK 5
;KK5 6
returnLL 
worldPositionLL  
;LL  !
}MM 	
publicOO 
staticOO 

Vector3IntOO  *
WorldPositionToTilemapPositionOO! ?
(OO? @
Vector3OO@ G
worldPositionOOH U
)OOU V
{PP 	
worldPositionQQ 
.QQ 
yQQ 
/=QQ "
m_TilemapToWorldYScaleQQ 5
;QQ5 6

Vector3IntRR 
tilemapPositionRR &
=RR' (
newRR) ,

Vector3IntRR- 7
(RR7 8
)RR8 9
;RR9 :
tilemapPositionSS 
.SS 
ySS 
=SS 
MathfSS  %
.SS% &

RoundToIntSS& 0
(SS0 1
worldPositionSS1 >
.SS> ?
ySS? @
)SS@ A
;SSA B
ifTT 
(TT 
tilemapPositionTT 
.TT  
yTT  !
%TT" #
$numTT$ %
!=TT& (
$numTT) *
)TT* +
tilemapPositionUU 
.UU  
xUU  !
=UU" #
MathfUU$ )
.UU) *

RoundToIntUU* 4
(UU4 5
worldPositionUU5 B
.UUB C
xUUC D
-UUE F
$numUUG K
)UUK L
;UUL M
elseVV 
tilemapPositionWW 
.WW  
xWW  !
=WW" #
MathfWW$ )
.WW) *

RoundToIntWW* 4
(WW4 5
worldPositionWW5 B
.WWB C
xWWC D
)WWD E
;WWE F
returnXX 
tilemapPositionXX "
;XX" #
}YY 	
	protected[[ 
override[[ 

Vector3Int[[ %
GetOffsetPosition[[& 7
([[7 8

Vector3Int[[8 B
location[[C K
,[[K L

Vector3Int[[M W
offset[[X ^
)[[^ _
{\\ 	

Vector3Int]] 
position]] 
=]]  !
location]]" *
+]]+ ,
offset]]- 3
;]]3 4
if__ 
(__ 
offset__ 
.__ 
y__ 
%__ 
$num__ 
!=__ 
$num__  !
&&__" $
location__% -
.__- .
y__. /
%__0 1
$num__2 3
!=__4 6
$num__7 8
)__8 9
position`` 
.`` 
x`` 
+=`` 
$num`` 
;``  
returnbb 
positionbb 
;bb 
}cc 	
	protectedee 
overrideee 

Vector3Intee %$
GetOffsetPositionReverseee& >
(ee> ?

Vector3Intee? I
positioneeJ R
,eeR S

Vector3InteeT ^
offsetee_ e
)eee f
{ff 	

Vector3Intgg 
locationgg 
=gg  !
positiongg" *
-gg+ ,
offsetgg- 3
;gg3 4
ifii 
(ii 
offsetii 
.ii 
yii 
%ii 
$numii 
!=ii 
$numii  !
&&ii" $
locationii% -
.ii- .
yii. /
%ii0 1
$numii2 3
!=ii4 6
$numii7 8
)ii8 9
locationjj 
.jj 
xjj 
-=jj 
$numjj 
;jj  
returnll 
locationll 
;ll 
}mm 	
	protecteduu 
overrideuu 

Vector3Intuu %
GetRotatedPositionuu& 8
(uu8 9

Vector3Intuu9 C
positionuuD L
,uuL M
intuuN Q
rotationuuR Z
)uuZ [
{vv 	
ifww 
(ww 
rotationww 
!=ww 
$numww 
)ww 
{xx 
Vector3yy 
worldPositionyy %
=yy& '*
TilemapPositionToWorldPositionyy( F
(yyF G
positionyyG O
)yyO P
;yyP Q
int{{ 
index{{ 
={{ 
rotation{{ $
/{{% &
$num{{' )
;{{) *
if|| 
(|| 
	m_FlatTop|| 
)|| 
{}} 
worldPosition~~ !
=~~" #
new~~$ '
Vector3~~( /
(~~/ 0
worldPosition %
.% &
x& '
*( )
m_CosAngleArr2* 8
[8 9
index9 >
]> ?
-@ A
worldPositionB O
.O P
yP Q
*R S
m_SinAngleArr2T b
[b c
indexc h
]h i
,i j
worldPosition
ÄÄ %
.
ÄÄ% &
x
ÄÄ& '
*
ÄÄ( )
m_SinAngleArr2
ÄÄ* 8
[
ÄÄ8 9
index
ÄÄ9 >
]
ÄÄ> ?
+
ÄÄ@ A
worldPosition
ÄÄB O
.
ÄÄO P
y
ÄÄP Q
*
ÄÄR S
m_CosAngleArr2
ÄÄT b
[
ÄÄb c
index
ÄÄc h
]
ÄÄh i
)
ÅÅ 
;
ÅÅ 
}
ÇÇ 
else
ÉÉ 
{
ÑÑ 
worldPosition
ÖÖ !
=
ÖÖ" #
new
ÖÖ$ '
Vector3
ÖÖ( /
(
ÖÖ/ 0
worldPosition
ÜÜ %
.
ÜÜ% &
x
ÜÜ& '
*
ÜÜ( )
m_CosAngleArr1
ÜÜ* 8
[
ÜÜ8 9
index
ÜÜ9 >
]
ÜÜ> ?
-
ÜÜ@ A
worldPosition
ÜÜB O
.
ÜÜO P
y
ÜÜP Q
*
ÜÜR S
m_SinAngleArr1
ÜÜT b
[
ÜÜb c
index
ÜÜc h
]
ÜÜh i
,
ÜÜi j
worldPosition
áá %
.
áá% &
x
áá& '
*
áá( )
m_SinAngleArr1
áá* 8
[
áá8 9
index
áá9 >
]
áá> ?
+
áá@ A
worldPosition
ááB O
.
ááO P
y
ááP Q
*
ááR S
m_CosAngleArr1
ááT b
[
ááb c
index
áác h
]
ááh i
)
àà 
;
àà 
}
ââ 
position
ãã 
=
ãã ,
WorldPositionToTilemapPosition
ãã 9
(
ãã9 :
worldPosition
ãã: G
)
ããG H
;
ããH I
}
åå 
return
çç 
position
çç 
;
çç 
}
éé 	
	protected
óó 
override
óó 

Vector3Int
óó %!
GetMirroredPosition
óó& 9
(
óó9 :

Vector3Int
óó: D
position
óóE M
,
óóM N
bool
óóO S
mirrorX
óóT [
,
óó[ \
bool
óó] a
mirrorY
óób i
)
óói j
{
òò 	
if
ôô 
(
ôô 
mirrorX
ôô 
||
ôô 
mirrorY
ôô "
)
ôô" #
{
öö 
Vector3
õõ 
worldPosition
õõ %
=
õõ& ',
TilemapPositionToWorldPosition
õõ( F
(
õõF G
position
õõG O
)
õõO P
;
õõP Q
if
ùù 
(
ùù 
	m_FlatTop
ùù 
)
ùù 
{
ûû 
if
üü 
(
üü 
mirrorX
üü 
)
üü  
worldPosition
†† %
.
††% &
y
††& '
*=
††( *
-
††+ ,
$num
††, -
;
††- .
if
°° 
(
°° 
mirrorY
°° 
)
°°  
worldPosition
¢¢ %
.
¢¢% &
x
¢¢& '
*=
¢¢( *
-
¢¢+ ,
$num
¢¢, -
;
¢¢- .
}
££ 
else
§§ 
{
•• 
if
¶¶ 
(
¶¶ 
mirrorX
¶¶ 
)
¶¶  
worldPosition
ßß %
.
ßß% &
x
ßß& '
*=
ßß( *
-
ßß+ ,
$num
ßß, -
;
ßß- .
if
®® 
(
®® 
mirrorY
®® 
)
®®  
worldPosition
©© %
.
©©% &
y
©©& '
*=
©©( *
-
©©+ ,
$num
©©, -
;
©©- .
}
™™ 
position
¨¨ 
=
¨¨ ,
WorldPositionToTilemapPosition
¨¨ 9
(
¨¨9 :
worldPosition
¨¨: G
)
¨¨G H
;
¨¨H I
}
≠≠ 
return
ÆÆ 
position
ÆÆ 
;
ÆÆ 
}
ØØ 	
}
∞∞ 
}±± ‰
¶C:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Runtime\Tiles\IsometricRuleTile\IsometricRuleTile.cs
	namespace 	
UnityEngine
 
{ 
public 

class 
IsometricRuleTile "
<" #
T# $
>$ %
:& '
IsometricRuleTile( 9
{ 
public 
sealed 
override 
Type #
m_NeighborType$ 2
{3 4
get5 8
{9 :
return; A
typeofB H
(H I
TI J
)J K
;K L
}M N
}O P
} 
[ 
Serializable 
] 
[ 
CreateAssetMenu 
( 
fileName 
= 
$str  9
,9 :
menuName; C
=D E
$strF a
)a b
]b c
public 

class 
IsometricRuleTile "
:# $
RuleTile% -
{ 
} 
} ç{
úC:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Runtime\Tiles\PipelineTile\PipelineTile.cs
	namespace 	
UnityEngine
 
. 
Tilemaps 
{ 
[ 
Serializable 
] 
[ 
CreateAssetMenu 
( 
fileName 
= 
$str  3
,3 4
menuName5 =
=> ?
$str@ U
)U V
]V W
public 

class 
PipelineTile 
: 
TileBase  (
{ 
[ 	
SerializeField	 
] 
public 
Sprite 
[ 
] 
	m_Sprites !
;! "
public 
override 
void 
RefreshTile (
(( )

Vector3Int) 3
location4 <
,< =
ITilemap> F
tileMapG N
)N O
{   	
for!! 
(!! 
int!! 
yd!! 
=!! 
-!! 
$num!! 
;!! 
yd!!  
<=!!! #
$num!!$ %
;!!% &
yd!!' )
++!!) +
)!!+ ,
for"" 
("" 
int"" 
xd"" 
="" 
-"" 
$num""  
;""  !
xd""" $
<=""% '
$num""( )
;"") *
xd""+ -
++""- /
)""/ 0
{## 

Vector3Int$$ 
position$$ '
=$$( )
new$$* -

Vector3Int$$. 8
($$8 9
location$$9 A
.$$A B
x$$B C
+$$D E
xd$$F H
,$$H I
location$$J R
.$$R S
y$$S T
+$$U V
yd$$W Y
,$$Y Z
location$$[ c
.$$c d
z$$d e
)$$e f
;$$f g
if%% 
(%% 
	TileValue%% !
(%%! "
tileMap%%" )
,%%) *
position%%+ 3
)%%3 4
)%%4 5
tileMap&& 
.&&  
RefreshTile&&  +
(&&+ ,
position&&, 4
)&&4 5
;&&5 6
}'' 
}(( 	
public00 
override00 
void00 
GetTileData00 (
(00( )

Vector3Int00) 3
location004 <
,00< =
ITilemap00> F
tileMap00G N
,00N O
ref00P S
TileData00T \
tileData00] e
)00e f
{11 	

UpdateTile22 
(22 
location22 
,22  
tileMap22! (
,22( )
ref22* -
tileData22. 6
)226 7
;227 8
}33 	
private55 
void55 

UpdateTile55 
(55  

Vector3Int55  *
location55+ 3
,553 4
ITilemap555 =
tileMap55> E
,55E F
ref55G J
TileData55K S
tileData55T \
)55\ ]
{66 	
tileData77 
.77 
	transform77 
=77  
	Matrix4x477! *
.77* +
identity77+ 3
;773 4
tileData88 
.88 
color88 
=88 
Color88 "
.88" #
white88# (
;88( )
int:: 
mask:: 
=:: 
	TileValue::  
(::  !
tileMap::! (
,::( )
location::* 2
+::3 4
new::5 8

Vector3Int::9 C
(::C D
$num::D E
,::E F
$num::G H
,::H I
$num::J K
)::K L
)::L M
?::N O
$num::P Q
:::R S
$num::T U
;::U V
mask;; 
+=;; 
	TileValue;; 
(;; 
tileMap;; %
,;;% &
location;;' /
+;;0 1
new;;2 5

Vector3Int;;6 @
(;;@ A
$num;;A B
,;;B C
$num;;D E
,;;E F
$num;;G H
);;H I
);;I J
?;;K L
$num;;M N
:;;O P
$num;;Q R
;;;R S
mask<< 
+=<< 
	TileValue<< 
(<< 
tileMap<< %
,<<% &
location<<' /
+<<0 1
new<<2 5

Vector3Int<<6 @
(<<@ A
$num<<A B
,<<B C
-<<D E
$num<<E F
,<<F G
$num<<H I
)<<I J
)<<J K
?<<L M
$num<<N O
:<<P Q
$num<<R S
;<<S T
mask== 
+=== 
	TileValue== 
(== 
tileMap== %
,==% &
location==' /
+==0 1
new==2 5

Vector3Int==6 @
(==@ A
-==A B
$num==B C
,==C D
$num==E F
,==F G
$num==H I
)==I J
)==J K
?==L M
$num==N O
:==P Q
$num==R S
;==S T
int?? 
index?? 
=?? 
GetIndex??  
(??  !
(??! "
byte??" &
)??& '
mask??' +
)??+ ,
;??, -
if@@ 
(@@ 
index@@ 
>=@@ 
$num@@ 
&&@@ 
index@@ #
<@@$ %
	m_Sprites@@& /
.@@/ 0
Length@@0 6
&&@@7 9
	TileValue@@: C
(@@C D
tileMap@@D K
,@@K L
location@@M U
)@@U V
)@@V W
{AA 
tileDataBB 
.BB 
spriteBB 
=BB  !
	m_SpritesBB" +
[BB+ ,
indexBB, 1
]BB1 2
;BB2 3
tileDataCC 
.CC 
	transformCC "
=CC# $
GetTransformCC% 1
(CC1 2
(CC2 3
byteCC3 7
)CC7 8
maskCC8 <
)CC< =
;CC= >
tileDataDD 
.DD 
flagsDD 
=DD  
	TileFlagsDD! *
.DD* +
LockTransformDD+ 8
|DD9 :
	TileFlagsDD; D
.DDD E
	LockColorDDE N
;DDN O
tileDataEE 
.EE 
colliderTypeEE %
=EE& '
TileEE( ,
.EE, -
ColliderTypeEE- 9
.EE9 :
SpriteEE: @
;EE@ A
}FF 
}GG 	
privateII 
boolII 
	TileValueII 
(II 
ITilemapII '
tileMapII( /
,II/ 0

Vector3IntII1 ;
positionII< D
)IID E
{JJ 	
TileBaseKK 
tileKK 
=KK 
tileMapKK #
.KK# $
GetTileKK$ +
(KK+ ,
positionKK, 4
)KK4 5
;KK5 6
returnLL 
(LL 
tileLL 
!=LL 
nullLL  
&&LL! #
tileLL$ (
==LL) +
thisLL, 0
)LL0 1
;LL1 2
}MM 	
privateOO 
intOO 
GetIndexOO 
(OO 
byteOO !
maskOO" &
)OO& '
{PP 	
switchQQ 
(QQ 
maskQQ 
)QQ 
{RR 
caseSS 
$numSS 
:SS 
returnSS 
$numSS  
;SS  !
caseTT 
$numTT 
:TT 
caseUU 
$numUU 
:UU 
caseVV 
$numVV 
:VV 
caseWW 
$numWW 
:WW 
returnWW 
$numWW  !
;WW! "
caseXX 
$numXX 
:XX 
caseYY 
$numYY 
:YY 
caseZZ 
$numZZ 
:ZZ 
case[[ 
$num[[ 
:[[ 
case\\ 
$num\\ 
:\\ 
case]] 
$num]] 
:]] 
return]] 
$num]]  
;]]  !
case^^ 
$num^^ 
:^^ 
case__ 
$num__ 
:__ 
case`` 
$num`` 
:`` 
caseaa 
$numaa 
:aa 
returnaa 
$numaa  !
;aa! "
casebb 
$numbb 
:bb 
returnbb 
$numbb  !
;bb! "
}cc 
returndd 
-dd 
$numdd 
;dd 
}ee 	
privategg 
	Matrix4x4gg 
GetTransformgg &
(gg& '
bytegg' +
maskgg, 0
)gg0 1
{hh 	
switchii 
(ii 
maskii 
)ii 
{jj 
casekk 
$numkk 
:kk 
casell 
$numll 
:ll 
casemm 
$nummm 
:mm 
casenn 
$numnn 
:nn 
caseoo 
$numoo 
:oo 
returnpp 
	Matrix4x4pp $
.pp$ %
TRSpp% (
(pp( )
Vector3pp) 0
.pp0 1
zeropp1 5
,pp5 6

Quaternionpp7 A
.ppA B
EulerppB G
(ppG H
$numppH J
,ppJ K
$numppL N
,ppN O
-ppP Q
$numppQ T
)ppT U
,ppU V
Vector3ppW ^
.pp^ _
onepp_ b
)ppb c
;ppc d
caseqq 
$numqq 
:qq 
caserr 
$numrr 
:rr 
returnss 
	Matrix4x4ss $
.ss$ %
TRSss% (
(ss( )
Vector3ss) 0
.ss0 1
zeross1 5
,ss5 6

Quaternionss7 A
.ssA B
EulerssB G
(ssG H
$numssH J
,ssJ K
$numssL N
,ssN O
-ssP Q
$numssQ U
)ssU V
,ssV W
Vector3ssX _
.ss_ `
oness` c
)ssc d
;ssd e
casett 
$numtt 
:tt 
caseuu 
$numuu 
:uu 
returnvv 
	Matrix4x4vv $
.vv$ %
TRSvv% (
(vv( )
Vector3vv) 0
.vv0 1
zerovv1 5
,vv5 6

Quaternionvv7 A
.vvA B
EulervvB G
(vvG H
$numvvH J
,vvJ K
$numvvL N
,vvN O
-vvP Q
$numvvQ U
)vvU V
,vvV W
Vector3vvX _
.vv_ `
onevv` c
)vvc d
;vvd e
}ww 
returnxx 
	Matrix4x4xx 
.xx 
identityxx %
;xx% &
}yy 	
}zz 
[}} 
CustomEditor}} 
(}} 
typeof}} 
(}} 
PipelineTile}} %
)}}% &
)}}& '
]}}' (
public~~ 

class~~ 
PipelineTileEditor~~ #
:~~$ %
Editor~~& ,
{ 
private
ÄÄ 
PipelineTile
ÄÄ 
tile
ÄÄ !
{
ÄÄ" #
get
ÄÄ$ '
{
ÄÄ( )
return
ÄÄ* 0
(
ÄÄ1 2
target
ÄÄ2 8
as
ÄÄ9 ;
PipelineTile
ÄÄ< H
)
ÄÄH I
;
ÄÄI J
}
ÄÄK L
}
ÄÄM N
public
ÇÇ 
void
ÇÇ 
OnEnable
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 	
if
ÑÑ 
(
ÑÑ 
tile
ÑÑ 
.
ÑÑ 
	m_Sprites
ÑÑ 
==
ÑÑ !
null
ÑÑ" &
||
ÑÑ' )
tile
ÑÑ* .
.
ÑÑ. /
	m_Sprites
ÑÑ/ 8
.
ÑÑ8 9
Length
ÑÑ9 ?
!=
ÑÑ@ B
$num
ÑÑC D
)
ÑÑD E
tile
ÖÖ 
.
ÖÖ 
	m_Sprites
ÖÖ 
=
ÖÖ  
new
ÖÖ! $
Sprite
ÖÖ% +
[
ÖÖ+ ,
$num
ÖÖ, -
]
ÖÖ- .
;
ÖÖ. /
}
ÜÜ 	
public
àà 
override
àà 
void
àà 
OnInspectorGUI
àà +
(
àà+ ,
)
àà, -
{
ââ 	
EditorGUILayout
ää 
.
ää 

LabelField
ää &
(
ää& '
$str
ää' g
)
ääg h
;
ääh i
EditorGUILayout
ãã 
.
ãã 
Space
ãã !
(
ãã! "
)
ãã" #
;
ãã# $
	EditorGUI
çç 
.
çç 
BeginChangeCheck
çç &
(
çç& '
)
çç' (
;
çç( )
tile
éé 
.
éé 
	m_Sprites
éé 
[
éé 
$num
éé 
]
éé 
=
éé 
(
éé  !
Sprite
éé! '
)
éé' (
EditorGUILayout
éé) 8
.
éé8 9
ObjectField
éé9 D
(
ééD E
$str
ééE K
,
ééK L
tile
ééM Q
.
ééQ R
	m_Sprites
ééR [
[
éé[ \
$num
éé\ ]
]
éé] ^
,
éé^ _
typeof
éé` f
(
ééf g
Sprite
éég m
)
éém n
,
één o
false
éép u
,
ééu v
null
ééw {
)
éé{ |
;
éé| }
tile
èè 
.
èè 
	m_Sprites
èè 
[
èè 
$num
èè 
]
èè 
=
èè 
(
èè  !
Sprite
èè! '
)
èè' (
EditorGUILayout
èè) 8
.
èè8 9
ObjectField
èè9 D
(
èèD E
$str
èèE J
,
èèJ K
tile
èèL P
.
èèP Q
	m_Sprites
èèQ Z
[
èèZ [
$num
èè[ \
]
èè\ ]
,
èè] ^
typeof
èè_ e
(
èèe f
Sprite
èèf l
)
èèl m
,
èèm n
false
èèo t
,
èèt u
null
èèv z
)
èèz {
;
èè{ |
tile
êê 
.
êê 
	m_Sprites
êê 
[
êê 
$num
êê 
]
êê 
=
êê 
(
êê  !
Sprite
êê! '
)
êê' (
EditorGUILayout
êê) 8
.
êê8 9
ObjectField
êê9 D
(
êêD E
$str
êêE J
,
êêJ K
tile
êêL P
.
êêP Q
	m_Sprites
êêQ Z
[
êêZ [
$num
êê[ \
]
êê\ ]
,
êê] ^
typeof
êê_ e
(
êêe f
Sprite
êêf l
)
êêl m
,
êêm n
false
êêo t
,
êêt u
null
êêv z
)
êêz {
;
êê{ |
tile
ëë 
.
ëë 
	m_Sprites
ëë 
[
ëë 
$num
ëë 
]
ëë 
=
ëë 
(
ëë  !
Sprite
ëë! '
)
ëë' (
EditorGUILayout
ëë) 8
.
ëë8 9
ObjectField
ëë9 D
(
ëëD E
$str
ëëE L
,
ëëL M
tile
ëëN R
.
ëëR S
	m_Sprites
ëëS \
[
ëë\ ]
$num
ëë] ^
]
ëë^ _
,
ëë_ `
typeof
ëëa g
(
ëëg h
Sprite
ëëh n
)
ëën o
,
ëëo p
false
ëëq v
,
ëëv w
null
ëëx |
)
ëë| }
;
ëë} ~
tile
íí 
.
íí 
	m_Sprites
íí 
[
íí 
$num
íí 
]
íí 
=
íí 
(
íí  !
Sprite
íí! '
)
íí' (
EditorGUILayout
íí) 8
.
íí8 9
ObjectField
íí9 D
(
ííD E
$str
ííE K
,
ííK L
tile
ííM Q
.
ííQ R
	m_Sprites
ííR [
[
íí[ \
$num
íí\ ]
]
íí] ^
,
íí^ _
typeof
íí` f
(
ííf g
Sprite
ííg m
)
íím n
,
íín o
false
ííp u
,
ííu v
null
ííw {
)
íí{ |
;
íí| }
if
ìì 
(
ìì 
	EditorGUI
ìì 
.
ìì 
EndChangeCheck
ìì (
(
ìì( )
)
ìì) *
)
ìì* +
EditorUtility
îî 
.
îî 
SetDirty
îî &
(
îî& '
tile
îî' +
)
îî+ ,
;
îî, -
}
ïï 	
}
ññ 
}òò øA
òC:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Runtime\Tiles\RandomTile\RandomTile.cs
	namespace 	
UnityEngine
 
. 
Tilemaps 
{ 
[ 
Serializable 
] 
[ 
CreateAssetMenu 
( 
fileName 
= 
$str  1
,1 2
menuName3 ;
=< =
$str> Q
)Q R
]R S
public 

class 

RandomTile 
: 
Tile "
{ 
[ 	
SerializeField	 
] 
public 
Sprite 
[ 
] 
	m_Sprites !
;! "
public 
override 
void 
GetTileData (
(( )

Vector3Int) 3
location4 <
,< =
ITilemap> F
tileMapG N
,N O
refP S
TileDataT \
tileData] e
)e f
{ 	
base 
. 
GetTileData 
( 
location %
,% &
tileMap' .
,. /
ref0 3
tileData4 <
)< =
;= >
if   
(   
(   
	m_Sprites   
!=   
null   "
)  " #
&&  $ &
(  ' (
	m_Sprites  ( 1
.  1 2
Length  2 8
>  9 :
$num  ; <
)  < =
)  = >
{!! 
long"" 
hash"" 
="" 
location"" $
.""$ %
x""% &
;""& '
hash## 
=## 
(## 
hash## 
+## 
$num## )
)##) *
+##+ ,
(##- .
hash##. 2
<<##3 5
$num##6 8
)##8 9
;##9 :
hash$$ 
=$$ 
($$ 
hash$$ 
+$$ 
$num$$ )
)$$) *
^$$+ ,
($$- .
hash$$. 2
>>$$3 5
$num$$6 8
)$$8 9
;$$9 :
hash%% 
^=%% 
location%%  
.%%  !
y%%! "
;%%" #
hash&& 
=&& 
(&& 
hash&& 
+&& 
$num&& )
)&&) *
+&&+ ,
(&&- .
hash&&. 2
<<&&3 5
$num&&6 7
)&&7 8
;&&8 9
hash'' 
='' 
('' 
hash'' 
+'' 
$num'' )
)'') *
^''+ ,
(''- .
hash''. 2
<<''3 5
$num''6 8
)''8 9
;''9 :
var(( 
oldState(( 
=(( 
Random(( %
.((% &
state((& +
;((+ ,
Random)) 
.)) 
	InitState))  
())  !
())! "
int))" %
)))% &
hash))& *
)))* +
;))+ ,
tileData** 
.** 
sprite** 
=**  !
	m_Sprites**" +
[**+ ,
(**, -
int**- 0
)**0 1
(**2 3
	m_Sprites**3 <
.**< =
Length**= C
***D E
Random**F L
.**L M
value**M R
)**R S
]**S T
;**T U
Random++ 
.++ 
state++ 
=++ 
oldState++ '
;++' (
},, 
}-- 	
}.. 
[11 
CustomEditor11 
(11 
typeof11 
(11 

RandomTile11 #
)11# $
)11$ %
]11% &
public22 

class22 
RandomTileEditor22 !
:22" #
Editor22$ *
{33 
private44 
SerializedProperty44 "
m_Color44# *
;44* +
private55 
SerializedProperty55 "
m_ColliderType55# 1
;551 2
private77 

RandomTile77 
tile77 
{77  !
get77" %
{77& '
return77( .
(77/ 0
target770 6
as777 9

RandomTile77: D
)77D E
;77E F
}77G H
}77I J
public99 
void99 
OnEnable99 
(99 
)99 
{:: 	
m_Color;; 
=;; 
serializedObject;; &
.;;& '
FindProperty;;' 3
(;;3 4
$str;;4 =
);;= >
;;;> ?
m_ColliderType<< 
=<< 
serializedObject<< -
.<<- .
FindProperty<<. :
(<<: ;
$str<<; K
)<<K L
;<<L M
}== 	
public?? 
override?? 
void?? 
OnInspectorGUI?? +
(??+ ,
)??, -
{@@ 	
serializedObjectAA 
.AA 
UpdateAA #
(AA# $
)AA$ %
;AA% &
	EditorGUICC 
.CC 
BeginChangeCheckCC &
(CC& '
)CC' (
;CC( )
intDD 
countDD 
=DD 
EditorGUILayoutDD '
.DD' (
DelayedIntFieldDD( 7
(DD7 8
$strDD8 K
,DDK L
tileDDM Q
.DDQ R
	m_SpritesDDR [
!=DD\ ^
nullDD_ c
?DDd e
tileDDf j
.DDj k
	m_SpritesDDk t
.DDt u
LengthDDu {
:DD| }
$numDD~ 
)	DD Ä
;
DDÄ Å
ifEE 
(EE 
countEE 
<EE 
$numEE 
)EE 
countFF 
=FF 
$numFF 
;FF 
ifGG 
(GG 
tileGG 
.GG 
	m_SpritesGG 
==GG !
nullGG" &
||GG' )
tileGG* .
.GG. /
	m_SpritesGG/ 8
.GG8 9
LengthGG9 ?
!=GG@ B
countGGC H
)GGH I
{HH 
ArrayII 
.II 
ResizeII 
<II 
SpriteII #
>II# $
(II$ %
refII% (
tileII) -
.II- .
	m_SpritesII. 7
,II7 8
countII9 >
)II> ?
;II? @
}JJ 
ifLL 
(LL 
countLL 
==LL 
$numLL 
)LL 
returnMM 
;MM 
EditorGUILayoutOO 
.OO 

LabelFieldOO &
(OO& '
$strOO' >
)OO> ?
;OO? @
EditorGUILayoutPP 
.PP 
SpacePP !
(PP! "
)PP" #
;PP# $
forRR 
(RR 
intRR 
iRR 
=RR 
$numRR 
;RR 
iRR 
<RR 
countRR  %
;RR% &
iRR' (
++RR( *
)RR* +
{SS 
tileTT 
.TT 
	m_SpritesTT 
[TT 
iTT  
]TT  !
=TT" #
(TT$ %
SpriteTT% +
)TT+ ,
EditorGUILayoutTT- <
.TT< =
ObjectFieldTT= H
(TTH I
$strTTI R
+TTS T
(TTU V
iTTV W
+TTW X
$numTTX Y
)TTY Z
,TTZ [
tileTT\ `
.TT` a
	m_SpritesTTa j
[TTj k
iTTk l
]TTl m
,TTm n
typeofTTo u
(TTu v
SpriteTTv |
)TT| }
,TT} ~
false	TT Ñ
,
TTÑ Ö
null
TTÜ ä
)
TTä ã
;
TTã å
}UU 
EditorGUILayoutWW 
.WW 
SpaceWW !
(WW! "
)WW" #
;WW# $
EditorGUILayoutYY 
.YY 
PropertyFieldYY )
(YY) *
m_ColorYY* 1
)YY1 2
;YY2 3
EditorGUILayoutZZ 
.ZZ 
PropertyFieldZZ )
(ZZ) *
m_ColliderTypeZZ* 8
)ZZ8 9
;ZZ9 :
if\\ 
(\\ 
	EditorGUI\\ 
.\\ 
EndChangeCheck\\ (
(\\( )
)\\) *
)\\* +
{]] 
EditorUtility^^ 
.^^ 
SetDirty^^ &
(^^& '
tile^^' +
)^^+ ,
;^^, -
serializedObject__  
.__  !#
ApplyModifiedProperties__! 8
(__8 9
)__9 :
;__: ;
}`` 
}aa 	
}bb 
}dd ‡„
§C:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Runtime\Tiles\RuleOverrideTile\RuleOverrideTile.cs
	namespace 	
UnityEngine
 
. 
Tilemaps 
{ 
[ 
	MovedFrom 
( 
true 
, 
$str "
)" #
]# $
[ 
Serializable 
] 
[ 
CreateAssetMenu 
( 
fileName 
= 
$str  8
,8 9
menuName: B
=C D
$strE _
)_ `
]` a
public 

class 
RuleOverrideTile !
:" #
TileBase$ ,
{ 
[ 	
Serializable	 
] 
public 
class 
TileSpritePair #
{ 	
public 
Sprite 
m_OriginalSprite *
;* +
public 
Sprite 
m_OverrideSprite *
;* +
} 	
[ 	
Serializable	 
] 
public 
class 
OverrideTilingRule '
{ 	
public   
bool   
	m_Enabled   !
;  ! "
public!! 
RuleTile!! 
.!! 

TilingRule!! &
m_TilingRule!!' 3
=!!4 5
new!!6 9
RuleTile!!: B
.!!B C

TilingRule!!C M
(!!M N
)!!N O
;!!O P
}"" 	
public(( 
Sprite(( 
this(( 
[(( 
Sprite(( !
originalSprite((" 0
]((0 1
{)) 	
get** 
{++ 
foreach,, 
(,, 
TileSpritePair,, '

spritePair,,( 2
in,,3 5
	m_Sprites,,6 ?
),,? @
{-- 
if.. 
(.. 

spritePair.. "
..." #
m_OriginalSprite..# 3
==..4 6
originalSprite..7 E
)..E F
{// 
return00 

spritePair00 )
.00) *
m_OverrideSprite00* :
;00: ;
}11 
}22 
return33 
null33 
;33 
}44 
set55 
{66 
if77 
(77 
value77 
==77 
null77 !
)77! "
{88 
	m_Sprites99 
=99 
	m_Sprites99  )
.99) *
Where99* /
(99/ 0

spritePair990 :
=>99; =

spritePair99> H
.99H I
m_OriginalSprite99I Y
!=99Z \
originalSprite99] k
)99k l
.99l m
ToList99m s
(99s t
)99t u
;99u v
}:: 
else;; 
{<< 
foreach== 
(== 
TileSpritePair== +

spritePair==, 6
in==7 9
	m_Sprites==: C
)==C D
{>> 
if?? 
(?? 

spritePair?? &
.??& '
m_OriginalSprite??' 7
==??8 :
originalSprite??; I
)??I J
{@@ 

spritePairAA &
.AA& '
m_OverrideSpriteAA' 7
=AA8 9
valueAA: ?
;AA? @
returnBB "
;BB" #
}CC 
}DD 
	m_SpritesEE 
.EE 
AddEE !
(EE! "
newEE" %
TileSpritePairEE& 4
(EE4 5
)EE5 6
{FF 
m_OriginalSpriteGG (
=GG) *
originalSpriteGG+ 9
,GG9 :
m_OverrideSpriteHH (
=HH) *
valueHH+ 0
,HH0 1
}II 
)II 
;II 
}JJ 
}KK 
}LL 	
publicRR 
RuleTileRR 
.RR 

TilingRuleRR "
thisRR# '
[RR' (
RuleTileRR( 0
.RR0 1

TilingRuleRR1 ;
originalRuleRR< H
]RRH I
{SS 	
getTT 
{UU 
ifVV 
(VV 
!VV 
m_TileVV 
)VV 
returnWW 
nullWW 
;WW  
intYY 
indexYY 
=YY 
m_TileYY "
.YY" #
m_TilingRulesYY# 0
.YY0 1
IndexOfYY1 8
(YY8 9
originalRuleYY9 E
)YYE F
;YYF G
ifZZ 
(ZZ 
indexZZ 
==ZZ 
-ZZ 
$numZZ 
)ZZ  
return[[ 
null[[ 
;[[  
if\\ 
(\\ !
m_OverrideTilingRules\\ )
.\\) *
Count\\* /
<\\0 1
index\\2 7
+\\8 9
$num\\: ;
)\\; <
return]] 
null]] 
;]]  
return__ !
m_OverrideTilingRules__ ,
[__, -
index__- 2
]__2 3
.__3 4
	m_Enabled__4 =
?__> ?!
m_OverrideTilingRules__@ U
[__U V
index__V [
]__[ \
.__\ ]
m_TilingRule__] i
:__j k
null__l p
;__p q
}`` 
setaa 
{bb 
ifcc 
(cc 
!cc 
m_Tilecc 
)cc 
returndd 
;dd 
intff 
indexff 
=ff 
m_Tileff "
.ff" #
m_TilingRulesff# 0
.ff0 1
IndexOfff1 8
(ff8 9
originalRuleff9 E
)ffE F
;ffF G
ifgg 
(gg 
indexgg 
==gg 
-gg 
$numgg 
)gg  
returnhh 
;hh 
ifjj 
(jj 
valuejj 
==jj 
nulljj !
)jj! "
{kk 
ifll 
(ll !
m_OverrideTilingRulesll -
.ll- .
Countll. 3
<ll4 5
indexll6 ;
+ll< =
$numll> ?
)ll? @
returnmm 
;mm !
m_OverrideTilingRulesnn )
[nn) *
indexnn* /
]nn/ 0
.nn0 1
	m_Enablednn1 :
=nn; <
falsenn= B
;nnB C
whileoo 
(oo !
m_OverrideTilingRulesoo 0
.oo0 1
Countoo1 6
>oo7 8
$numoo9 :
&&oo; =
!oo> ?!
m_OverrideTilingRulesoo? T
[ooT U!
m_OverrideTilingRulesooU j
.ooj k
Countook p
-ooq r
$numoos t
]oot u
.oou v
	m_Enabledoov 
)	oo Ä!
m_OverrideTilingRulespp -
.pp- .
RemoveAtpp. 6
(pp6 7!
m_OverrideTilingRulespp7 L
.ppL M
CountppM R
-ppS T
$numppU V
)ppV W
;ppW X
}qq 
elserr 
{ss 
whilett 
(tt !
m_OverrideTilingRulestt 0
.tt0 1
Counttt1 6
<tt7 8
indextt9 >
+tt? @
$numttA B
)ttB C!
m_OverrideTilingRulesuu -
.uu- .
Adduu. 1
(uu1 2
newuu2 5
OverrideTilingRuleuu6 H
(uuH I
)uuI J
)uuJ K
;uuK L!
m_OverrideTilingRulesvv )
[vv) *
indexvv* /
]vv/ 0
.vv0 1
	m_Enabledvv1 :
=vv; <
truevv= A
;vvA B!
m_OverrideTilingRulesww )
[ww) *
indexww* /
]ww/ 0
.ww0 1
m_TilingRuleww1 =
=ww> ?
CopyTilingRuleww@ N
(wwN O
valuewwO T
,wwT U
newwwV Y
RuleTilewwZ b
.wwb c

TilingRulewwc m
(wwm n
)wwn o
,wwo p
truewwq u
)wwu v
;wwv w!
m_OverrideTilingRulesxx )
[xx) *
indexxx* /
]xx/ 0
.xx0 1
m_TilingRulexx1 =
.xx= >
m_Neighborsxx> I
=xxJ K
nullxxL P
;xxP Q
}yy 
}zz 
}{{ 	
public
ÄÄ 
RuleTile
ÄÄ 
m_Tile
ÄÄ 
;
ÄÄ 
public
ÑÑ 
bool
ÑÑ 

m_Advanced
ÑÑ 
;
ÑÑ 
public
àà 
List
àà 
<
àà 
TileSpritePair
àà "
>
àà" #
	m_Sprites
àà$ -
=
àà. /
new
àà0 3
List
àà4 8
<
àà8 9
TileSpritePair
àà9 G
>
ààG H
(
ààH I
)
ààI J
;
ààJ K
public
åå 
List
åå 
<
åå  
OverrideTilingRule
åå &
>
åå& '#
m_OverrideTilingRules
åå( =
=
åå> ?
new
åå@ C
List
ååD H
<
ååH I 
OverrideTilingRule
ååI [
>
åå[ \
(
åå\ ]
)
åå] ^
;
åå^ _
public
êê  
OverrideTilingRule
êê !
m_OverrideDefault
êê" 3
=
êê4 5
new
êê6 9 
OverrideTilingRule
êê: L
(
êêL M
)
êêM N
;
êêN O
public
îî 
RuleTile
îî 
.
îî 

TilingRule
îî "
m_OriginalDefault
îî# 4
{
ïï 	
get
ññ 
{
óó 
return
òò 
new
òò 
RuleTile
òò #
.
òò# $

TilingRule
òò$ .
(
òò. /
)
òò/ 0
{
ôô 
	m_Sprites
öö 
=
öö 
new
öö  #
Sprite
öö$ *
[
öö* +
]
öö+ ,
{
öö- .
m_Tile
öö/ 5
!=
öö6 8
null
öö9 =
?
öö> ?
m_Tile
öö@ F
.
ööF G
m_DefaultSprite
ööG V
:
ööW X
null
ööY ]
}
öö^ _
,
öö_ `
m_ColliderType
õõ "
=
õõ# $
m_Tile
õõ% +
!=
õõ, .
null
õõ/ 3
?
õõ4 5
m_Tile
õõ6 <
.
õõ< =#
m_DefaultColliderType
õõ= R
:
õõS T
Tile
õõU Y
.
õõY Z
ColliderType
õõZ f
.
õõf g
None
õõg k
,
õõk l
}
úú 
;
úú 
}
ùù 
}
ûû 	
[
££ 	
HideInInspector
££	 
]
££ 
public
££  
RuleTile
££! )
m_InstanceTile
££* 8
;
££8 9
public
¨¨ 
override
¨¨ 
bool
¨¨ "
GetTileAnimationData
¨¨ 1
(
¨¨1 2

Vector3Int
¨¨2 <
position
¨¨= E
,
¨¨E F
ITilemap
¨¨G O
tilemap
¨¨P W
,
¨¨W X
ref
¨¨Y \
TileAnimationData
¨¨] n 
tileAnimationData¨¨o Ä
)¨¨Ä Å
{
≠≠ 	
if
ÆÆ 
(
ÆÆ 
!
ÆÆ 
m_InstanceTile
ÆÆ 
)
ÆÆ  
return
ØØ 
false
ØØ 
;
ØØ 
return
∞∞ 
m_InstanceTile
∞∞ !
.
∞∞! ""
GetTileAnimationData
∞∞" 6
(
∞∞6 7
position
∞∞7 ?
,
∞∞? @
tilemap
∞∞A H
,
∞∞H I
ref
∞∞J M
tileAnimationData
∞∞N _
)
∞∞_ `
;
∞∞` a
}
±± 	
public
ππ 
override
ππ 
void
ππ 
GetTileData
ππ (
(
ππ( )

Vector3Int
ππ) 3
position
ππ4 <
,
ππ< =
ITilemap
ππ> F
tilemap
ππG N
,
ππN O
ref
ππP S
TileData
ππT \
tileData
ππ] e
)
ππe f
{
∫∫ 	
if
ªª 
(
ªª 
!
ªª 
m_InstanceTile
ªª 
)
ªª  
return
ºº 
;
ºº 
m_InstanceTile
ΩΩ 
.
ΩΩ 
GetTileData
ΩΩ &
(
ΩΩ& '
position
ΩΩ' /
,
ΩΩ/ 0
tilemap
ΩΩ1 8
,
ΩΩ8 9
ref
ΩΩ: =
tileData
ΩΩ> F
)
ΩΩF G
;
ΩΩG H
}
ææ 	
public
≈≈ 
override
≈≈ 
void
≈≈ 
RefreshTile
≈≈ (
(
≈≈( )

Vector3Int
≈≈) 3
position
≈≈4 <
,
≈≈< =
ITilemap
≈≈> F
tilemap
≈≈G N
)
≈≈N O
{
∆∆ 	
if
«« 
(
«« 
!
«« 
m_InstanceTile
«« 
)
««  
return
»» 
;
»» 
m_InstanceTile
…… 
.
…… 
RefreshTile
…… &
(
……& '
position
……' /
,
……/ 0
tilemap
……1 8
)
……8 9
;
……9 :
}
   	
public
”” 
override
”” 
bool
”” 
StartUp
”” $
(
””$ %

Vector3Int
””% /
position
””0 8
,
””8 9
ITilemap
””: B
tilemap
””C J
,
””J K

GameObject
””L V
go
””W Y
)
””Y Z
{
‘‘ 	
if
’’ 
(
’’ 
!
’’ 
m_InstanceTile
’’ 
)
’’  
return
÷÷ 
true
÷÷ 
;
÷÷ 
return
◊◊ 
m_InstanceTile
◊◊ !
.
◊◊! "
StartUp
◊◊" )
(
◊◊) *
position
◊◊* 2
,
◊◊2 3
tilemap
◊◊4 ;
,
◊◊; <
go
◊◊= ?
)
◊◊? @
;
◊◊@ A
}
ÿÿ 	
public
ﬂﬂ 
void
ﬂﬂ 
ApplyOverrides
ﬂﬂ "
(
ﬂﬂ" #
IList
ﬂﬂ# (
<
ﬂﬂ( )
KeyValuePair
ﬂﬂ) 5
<
ﬂﬂ5 6
Sprite
ﬂﬂ6 <
,
ﬂﬂ< =
Sprite
ﬂﬂ> D
>
ﬂﬂD E
>
ﬂﬂE F
	overrides
ﬂﬂG P
)
ﬂﬂP Q
{
‡‡ 	
if
·· 
(
·· 
	overrides
·· 
==
·· 
null
·· !
)
··! "
throw
‚‚ 
new
‚‚ 
System
‚‚  
.
‚‚  !#
ArgumentNullException
‚‚! 6
(
‚‚6 7
$str
‚‚7 B
)
‚‚B C
;
‚‚C D
for
‰‰ 
(
‰‰ 
int
‰‰ 
i
‰‰ 
=
‰‰ 
$num
‰‰ 
;
‰‰ 
i
‰‰ 
<
‰‰ 
	overrides
‰‰  )
.
‰‰) *
Count
‰‰* /
;
‰‰/ 0
i
‰‰1 2
++
‰‰2 4
)
‰‰4 5
this
ÂÂ 
[
ÂÂ 
	overrides
ÂÂ 
[
ÂÂ 
i
ÂÂ  
]
ÂÂ  !
.
ÂÂ! "
Key
ÂÂ" %
]
ÂÂ% &
=
ÂÂ' (
	overrides
ÂÂ) 2
[
ÂÂ2 3
i
ÂÂ3 4
]
ÂÂ4 5
.
ÂÂ5 6
Value
ÂÂ6 ;
;
ÂÂ; <
}
ÊÊ 	
public
ÌÌ 
void
ÌÌ 
GetOverrides
ÌÌ  
(
ÌÌ  !
List
ÌÌ! %
<
ÌÌ% &
KeyValuePair
ÌÌ& 2
<
ÌÌ2 3
Sprite
ÌÌ3 9
,
ÌÌ9 :
Sprite
ÌÌ; A
>
ÌÌA B
>
ÌÌB C
	overrides
ÌÌD M
)
ÌÌM N
{
ÓÓ 	
if
ÔÔ 
(
ÔÔ 
	overrides
ÔÔ 
==
ÔÔ 
null
ÔÔ !
)
ÔÔ! "
throw
 
new
 
System
  
.
  !#
ArgumentNullException
! 6
(
6 7
$str
7 B
)
B C
;
C D
	overrides
ÚÚ 
.
ÚÚ 
Clear
ÚÚ 
(
ÚÚ 
)
ÚÚ 
;
ÚÚ 
if
ÙÙ 
(
ÙÙ 
!
ÙÙ 
m_Tile
ÙÙ 
)
ÙÙ 
return
ıı 
;
ıı 
List
˜˜ 
<
˜˜ 
Sprite
˜˜ 
>
˜˜ 
originalSprites
˜˜ (
=
˜˜) *
new
˜˜+ .
List
˜˜/ 3
<
˜˜3 4
Sprite
˜˜4 :
>
˜˜: ;
(
˜˜; <
)
˜˜< =
;
˜˜= >
if
˘˘ 
(
˘˘ 
m_Tile
˘˘ 
.
˘˘ 
m_DefaultSprite
˘˘ &
)
˘˘& '
originalSprites
˙˙ 
.
˙˙  
Add
˙˙  #
(
˙˙# $
m_Tile
˙˙$ *
.
˙˙* +
m_DefaultSprite
˙˙+ :
)
˙˙: ;
;
˙˙; <
foreach
¸¸ 
(
¸¸ 
RuleTile
¸¸ 
.
¸¸ 

TilingRule
¸¸ (
rule
¸¸) -
in
¸¸. 0
m_Tile
¸¸1 7
.
¸¸7 8
m_TilingRules
¸¸8 E
)
¸¸E F
foreach
˝˝ 
(
˝˝ 
Sprite
˝˝ 
sprite
˝˝  &
in
˝˝' )
rule
˝˝* .
.
˝˝. /
	m_Sprites
˝˝/ 8
)
˝˝8 9
if
˛˛ 
(
˛˛ 
sprite
˛˛ 
&&
˛˛ !
!
˛˛" #
originalSprites
˛˛# 2
.
˛˛2 3
Contains
˛˛3 ;
(
˛˛; <
sprite
˛˛< B
)
˛˛B C
)
˛˛C D
originalSprites
ˇˇ '
.
ˇˇ' (
Add
ˇˇ( +
(
ˇˇ+ ,
sprite
ˇˇ, 2
)
ˇˇ2 3
;
ˇˇ3 4
foreach
ÅÅ 
(
ÅÅ 
Sprite
ÅÅ 
sprite
ÅÅ "
in
ÅÅ# %
originalSprites
ÅÅ& 5
)
ÅÅ5 6
	overrides
ÇÇ 
.
ÇÇ 
Add
ÇÇ 
(
ÇÇ 
new
ÇÇ !
KeyValuePair
ÇÇ" .
<
ÇÇ. /
Sprite
ÇÇ/ 5
,
ÇÇ5 6
Sprite
ÇÇ7 =
>
ÇÇ= >
(
ÇÇ> ?
sprite
ÇÇ? E
,
ÇÇE F
this
ÇÇG K
[
ÇÇK L
sprite
ÇÇL R
]
ÇÇR S
)
ÇÇS T
)
ÇÇT U
;
ÇÇU V
}
ÉÉ 	
public
ää 
void
ää 
ApplyOverrides
ää "
(
ää" #
IList
ää# (
<
ää( )
KeyValuePair
ää) 5
<
ää5 6
RuleTile
ää6 >
.
ää> ?

TilingRule
ää? I
,
ääI J
RuleTile
ääK S
.
ääS T

TilingRule
ääT ^
>
ää^ _
>
ää_ `
	overrides
ääa j
)
ääj k
{
ãã 	
if
åå 
(
åå 
	overrides
åå 
==
åå 
null
åå !
)
åå! "
throw
çç 
new
çç 
System
çç  
.
çç  !#
ArgumentNullException
çç! 6
(
çç6 7
$str
çç7 B
)
ççB C
;
ççC D
for
èè 
(
èè 
int
èè 
i
èè 
=
èè 
$num
èè 
;
èè 
i
èè 
<
èè 
	overrides
èè  )
.
èè) *
Count
èè* /
;
èè/ 0
i
èè1 2
++
èè2 4
)
èè4 5
this
êê 
[
êê 
	overrides
êê 
[
êê 
i
êê  
]
êê  !
.
êê! "
Key
êê" %
]
êê% &
=
êê' (
	overrides
êê) 2
[
êê2 3
i
êê3 4
]
êê4 5
.
êê5 6
Value
êê6 ;
;
êê; <
}
ëë 	
public
òò 
void
òò 
GetOverrides
òò  
(
òò  !
List
òò! %
<
òò% &
KeyValuePair
òò& 2
<
òò2 3
RuleTile
òò3 ;
.
òò; <

TilingRule
òò< F
,
òòF G
RuleTile
òòH P
.
òòP Q

TilingRule
òòQ [
>
òò[ \
>
òò\ ]
	overrides
òò^ g
)
òòg h
{
ôô 	
if
öö 
(
öö 
	overrides
öö 
==
öö 
null
öö !
)
öö! "
throw
õõ 
new
õõ 
System
õõ  
.
õõ  !#
ArgumentNullException
õõ! 6
(
õõ6 7
$str
õõ7 B
)
õõB C
;
õõC D
	overrides
ùù 
.
ùù 
Clear
ùù 
(
ùù 
)
ùù 
;
ùù 
if
üü 
(
üü 
!
üü 
m_Tile
üü 
)
üü 
return
†† 
;
†† 
foreach
¢¢ 
(
¢¢ 
var
¢¢ 
originalRule
¢¢ %
in
¢¢& (
m_Tile
¢¢) /
.
¢¢/ 0
m_TilingRules
¢¢0 =
)
¢¢= >
{
££ 
RuleTile
§§ 
.
§§ 

TilingRule
§§ #
overrideRule
§§$ 0
=
§§1 2
this
§§3 7
[
§§7 8
originalRule
§§8 D
]
§§D E
;
§§E F
	overrides
•• 
.
•• 
Add
•• 
(
•• 
new
•• !
KeyValuePair
••" .
<
••. /
RuleTile
••/ 7
.
••7 8

TilingRule
••8 B
,
••B C
RuleTile
••D L
.
••L M

TilingRule
••M W
>
••W X
(
••X Y
originalRule
••Y e
,
••e f
overrideRule
••g s
)
••s t
)
••t u
;
••u v
}
¶¶ 
	overrides
ßß 
.
ßß 
Add
ßß 
(
ßß 
new
ßß 
KeyValuePair
ßß *
<
ßß* +
RuleTile
ßß+ 3
.
ßß3 4

TilingRule
ßß4 >
,
ßß> ?
RuleTile
ßß@ H
.
ßßH I

TilingRule
ßßI S
>
ßßS T
(
ßßT U
m_OriginalDefault
ßßU f
,
ßßf g
m_OverrideDefault
ßßh y
.
ßßy z
m_TilingRuleßßz Ü
)ßßÜ á
)ßßá à
;ßßà â
}
®® 	
public
™™ 
void
™™ 
Override
™™ 
(
™™ 
)
™™ 
{
´´ 	
if
¨¨ 
(
¨¨ 
!
¨¨ 
m_Tile
¨¨ 
||
¨¨ 
!
¨¨ 
m_InstanceTile
¨¨ *
)
¨¨* +
return
≠≠ 
;
≠≠ 
var
ØØ 
tile
ØØ 
=
ØØ 
m_InstanceTile
ØØ %
;
ØØ% &
tile
±± 
.
±± 
m_DefaultSprite
±±  
=
±±! "
m_Tile
±±# )
.
±±) *
m_DefaultSprite
±±* 9
;
±±9 :
tile
≤≤ 
.
≤≤ !
m_DefaultGameObject
≤≤ $
=
≤≤% &
m_Tile
≤≤' -
.
≤≤- .!
m_DefaultGameObject
≤≤. A
;
≤≤A B
tile
≥≥ 
.
≥≥ #
m_DefaultColliderType
≥≥ &
=
≥≥' (
m_Tile
≥≥) /
.
≥≥/ 0#
m_DefaultColliderType
≥≥0 E
;
≥≥E F
tile
µµ 
.
µµ 
m_TilingRules
µµ 
.
µµ 
Clear
µµ $
(
µµ$ %
)
µµ% &
;
µµ& '
foreach
∂∂ 
(
∂∂ 
var
∂∂ 
rule
∂∂ 
in
∂∂  
m_Tile
∂∂! '
.
∂∂' (
m_TilingRules
∂∂( 5
)
∂∂5 6
tile
∑∑ 
.
∑∑ 
m_TilingRules
∑∑ "
.
∑∑" #
Add
∑∑# &
(
∑∑& '
CopyTilingRule
∑∑' 5
(
∑∑5 6
rule
∑∑6 :
,
∑∑: ;
new
∑∑< ?
RuleTile
∑∑@ H
.
∑∑H I

TilingRule
∑∑I S
(
∑∑S T
)
∑∑T U
,
∑∑U V
true
∑∑W [
)
∑∑[ \
)
∑∑\ ]
;
∑∑] ^
if
ππ 
(
ππ 
!
ππ 

m_Advanced
ππ 
)
ππ 
{
∫∫ 
tile
ªª 
.
ªª 
m_DefaultSprite
ªª $
=
ªª% &
this
ªª' +
[
ªª+ ,
m_Tile
ªª, 2
.
ªª2 3
m_DefaultSprite
ªª3 B
]
ªªB C
;
ªªC D
foreach
ΩΩ 
(
ΩΩ 
RuleTile
ΩΩ !
.
ΩΩ! "

TilingRule
ΩΩ" ,
rule
ΩΩ- 1
in
ΩΩ2 4
tile
ΩΩ5 9
.
ΩΩ9 :
m_TilingRules
ΩΩ: G
)
ΩΩG H
for
ææ 
(
ææ 
int
ææ 
i
ææ 
=
ææ  
$num
ææ! "
;
ææ" #
i
ææ$ %
<
ææ& '
rule
ææ( ,
.
ææ, -
	m_Sprites
ææ- 6
.
ææ6 7
Length
ææ7 =
;
ææ= >
i
ææ? @
++
ææ@ B
)
ææB C
if
øø 
(
øø 
rule
øø  
.
øø  !
	m_Sprites
øø! *
[
øø* +
i
øø+ ,
]
øø, -
)
øø- .
rule
¿¿  
.
¿¿  !
	m_Sprites
¿¿! *
[
¿¿* +
i
¿¿+ ,
]
¿¿, -
=
¿¿. /
this
¿¿0 4
[
¿¿4 5
rule
¿¿5 9
.
¿¿9 :
	m_Sprites
¿¿: C
[
¿¿C D
i
¿¿D E
]
¿¿E F
]
¿¿F G
;
¿¿G H
}
¡¡ 
else
¬¬ 
{
√√ 
if
ƒƒ 
(
ƒƒ 
m_OverrideDefault
ƒƒ %
.
ƒƒ% &
	m_Enabled
ƒƒ& /
)
ƒƒ/ 0
{
≈≈ 
tile
∆∆ 
.
∆∆ 
m_DefaultSprite
∆∆ (
=
∆∆) *
m_OverrideDefault
∆∆+ <
.
∆∆< =
m_TilingRule
∆∆= I
.
∆∆I J
	m_Sprites
∆∆J S
.
∆∆S T
Length
∆∆T Z
>
∆∆[ \
$num
∆∆] ^
?
∆∆_ `
m_OverrideDefault
∆∆a r
.
∆∆r s
m_TilingRule
∆∆s 
.∆∆ Ä
	m_Sprites∆∆Ä â
[∆∆â ä
$num∆∆ä ã
]∆∆ã å
:∆∆ç é
null∆∆è ì
;∆∆ì î
tile
«« 
.
«« !
m_DefaultGameObject
«« ,
=
««- .
m_OverrideDefault
««/ @
.
««@ A
m_TilingRule
««A M
.
««M N
m_GameObject
««N Z
;
««Z [
tile
»» 
.
»» #
m_DefaultColliderType
»» .
=
»»/ 0
m_OverrideDefault
»»1 B
.
»»B C
m_TilingRule
»»C O
.
»»O P
m_ColliderType
»»P ^
;
»»^ _
}
…… 
for
   
(
   
int
   
i
   
=
   
$num
   
;
   
i
    !
<
  " #
tile
  $ (
.
  ( )
m_TilingRules
  ) 6
.
  6 7
Count
  7 <
;
  < =
i
  > ?
++
  ? A
)
  A B
{
ÀÀ 
RuleTile
ÃÃ 
.
ÃÃ 

TilingRule
ÃÃ '
originalRule
ÃÃ( 4
=
ÃÃ5 6
tile
ÃÃ7 ;
.
ÃÃ; <
m_TilingRules
ÃÃ< I
[
ÃÃI J
i
ÃÃJ K
]
ÃÃK L
;
ÃÃL M
RuleTile
ÕÕ 
.
ÕÕ 

TilingRule
ÕÕ '
overrideRule
ÕÕ( 4
=
ÕÕ5 6
this
ÕÕ7 ;
[
ÕÕ; <
m_Tile
ÕÕ< B
.
ÕÕB C
m_TilingRules
ÕÕC P
[
ÕÕP Q
i
ÕÕQ R
]
ÕÕR S
]
ÕÕS T
;
ÕÕT U
if
ŒŒ 
(
ŒŒ 
overrideRule
ŒŒ $
==
ŒŒ% '
null
ŒŒ( ,
)
ŒŒ, -
continue
œœ  
;
œœ  !
CopyTilingRule
–– "
(
––" #
overrideRule
––# /
,
––/ 0
originalRule
––1 =
,
––= >
false
––? D
)
––D E
;
––E F
}
—— 
}
““ 
}
”” 	
public
€€ 
RuleTile
€€ 
.
€€ 

TilingRule
€€ "
CopyTilingRule
€€# 1
(
€€1 2
RuleTile
€€2 :
.
€€: ;

TilingRule
€€; E
from
€€F J
,
€€J K
RuleTile
€€L T
.
€€T U

TilingRule
€€U _
to
€€` b
,
€€b c
bool
€€d h
copyRule
€€i q
)
€€q r
{
‹‹ 	
if
›› 
(
›› 
from
›› 
==
›› 
null
›› 
)
›› 
return
ﬁﬁ 
null
ﬁﬁ 
;
ﬁﬁ 
if
‡‡ 
(
‡‡ 
copyRule
‡‡ 
)
‡‡ 
{
·· 
to
‚‚ 
.
‚‚ 
m_Neighbors
‚‚ 
=
‚‚  
from
‚‚! %
.
‚‚% &
m_Neighbors
‚‚& 1
;
‚‚1 2
to
„„ 
.
„„ !
m_NeighborPositions
„„ &
=
„„' (
from
„„) -
.
„„- .!
m_NeighborPositions
„„. A
;
„„A B
to
‰‰ 
.
‰‰ 
m_RuleTransform
‰‰ "
=
‰‰# $
from
‰‰% )
.
‰‰) *
m_RuleTransform
‰‰* 9
;
‰‰9 :
}
ÂÂ 
to
ÊÊ 
.
ÊÊ 
	m_Sprites
ÊÊ 
=
ÊÊ 
from
ÊÊ 
.
ÊÊ  
	m_Sprites
ÊÊ  )
.
ÊÊ) *
Clone
ÊÊ* /
(
ÊÊ/ 0
)
ÊÊ0 1
as
ÊÊ2 4
Sprite
ÊÊ5 ;
[
ÊÊ; <
]
ÊÊ< =
;
ÊÊ= >
to
ÁÁ 
.
ÁÁ 
m_GameObject
ÁÁ 
=
ÁÁ 
from
ÁÁ "
.
ÁÁ" #
m_GameObject
ÁÁ# /
;
ÁÁ/ 0
to
ËË 
.
ËË 
m_AnimationSpeed
ËË 
=
ËË  !
from
ËË" &
.
ËË& '
m_AnimationSpeed
ËË' 7
;
ËË7 8
to
ÈÈ 
.
ÈÈ 
m_PerlinScale
ÈÈ 
=
ÈÈ 
from
ÈÈ #
.
ÈÈ# $
m_PerlinScale
ÈÈ$ 1
;
ÈÈ1 2
to
ÍÍ 
.
ÍÍ 
m_Output
ÍÍ 
=
ÍÍ 
from
ÍÍ 
.
ÍÍ 
m_Output
ÍÍ '
;
ÍÍ' (
to
ÎÎ 
.
ÎÎ 
m_ColliderType
ÎÎ 
=
ÎÎ 
from
ÎÎ  $
.
ÎÎ$ %
m_ColliderType
ÎÎ% 3
;
ÎÎ3 4
to
ÏÏ 
.
ÏÏ 
m_RandomTransform
ÏÏ  
=
ÏÏ! "
from
ÏÏ# '
.
ÏÏ' (
m_RandomTransform
ÏÏ( 9
;
ÏÏ9 :
return
ÓÓ 
to
ÓÓ 
;
ÓÓ 
}
ÔÔ 	
}
 
}ÒÒ À‘
îC:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Runtime\Tiles\RuleTile\RuleTile.cs
	namespace 	
UnityEngine
 
{ 
public 

class 
RuleTile 
< 
T 
> 
: 
RuleTile '
{ 
public 
sealed 
override 
Type #
m_NeighborType$ 2
{3 4
get5 8
{9 :
return; A
typeofB H
(H I
TI J
)J K
;K L
}M N
}O P
} 
[ 
Serializable 
] 
[ 
CreateAssetMenu 
( 
fileName 
= 
$str  /
,/ 0
menuName1 9
=: ;
$str< M
)M N
]N O
public 

class 
RuleTile 
: 
TileBase $
{ 
public 
virtual 
Type 
m_NeighborType *
{+ ,
get- 0
{1 2
return3 9
typeof: @
(@ A

TilingRuleA K
.K L
NeighborL T
)T U
;U V
}W X
}Y Z
public$$ 
Sprite$$ 
m_DefaultSprite$$ %
;$$% &
public(( 

GameObject(( 
m_DefaultGameObject(( -
;((- .
public,, 
Tile,, 
.,, 
ColliderType,,  !
m_DefaultColliderType,,! 6
=,,7 8
Tile,,9 =
.,,= >
ColliderType,,> J
.,,J K
Sprite,,K Q
;,,Q R
public.. 
virtual.. 
int.. 
m_RotationAngle.. *
=>..+ -
$num... 0
;..0 1
public// 
int// 
m_RotationCount// "
=>//# %
$num//& )
///* +
m_RotationAngle//, ;
;//; <
[55 	
Serializable55	 
]55 
public66 
class66 

TilingRule66 
{77 	
public;; 
List;; 
<;; 
int;; 
>;; 
m_Neighbors;; (
=;;) *
new;;+ .
List;;/ 3
<;;3 4
int;;4 7
>;;7 8
(;;8 9
);;9 :
;;;: ;
public?? 
List?? 
<?? 

Vector3Int?? "
>??" #
m_NeighborPositions??$ 7
=??8 9
new??: =
List??> B
<??B C

Vector3Int??C M
>??M N
(??N O
)??O P
{@@ 
newAA 

Vector3IntAA 
(AA 
-AA  
$numAA  !
,AA! "
$numAA# $
,AA$ %
$numAA& '
)AA' (
,AA( )
newBB 

Vector3IntBB 
(BB 
$numBB  
,BB  !
$numBB" #
,BB# $
$numBB% &
)BB& '
,BB' (
newCC 

Vector3IntCC 
(CC 
$numCC  
,CC  !
$numCC" #
,CC# $
$numCC% &
)CC& '
,CC' (
newDD 

Vector3IntDD 
(DD 
-DD  
$numDD  !
,DD! "
$numDD# $
,DD$ %
$numDD& '
)DD' (
,DD( )
newEE 

Vector3IntEE 
(EE 
$numEE  
,EE  !
$numEE" #
,EE# $
$numEE% &
)EE& '
,EE' (
newFF 

Vector3IntFF 
(FF 
-FF  
$numFF  !
,FF! "
-FF# $
$numFF$ %
,FF% &
$numFF' (
)FF( )
,FF) *
newGG 

Vector3IntGG 
(GG 
$numGG  
,GG  !
-GG" #
$numGG# $
,GG$ %
$numGG& '
)GG' (
,GG( )
newHH 

Vector3IntHH 
(HH 
$numHH  
,HH  !
-HH" #
$numHH# $
,HH$ %
$numHH& '
)HH' (
,HH( )
}II 
;II 
publicMM 
SpriteMM 
[MM 
]MM 
	m_SpritesMM %
;MM% &
publicQQ 

GameObjectQQ 
m_GameObjectQQ *
;QQ* +
publicUU 
floatUU 
m_AnimationSpeedUU )
;UU) *
publicYY 
floatYY 
m_PerlinScaleYY &
;YY& '
public]] 
	Transform]] 
m_RuleTransform]] ,
;]], -
publicaa 
OutputSpriteaa 
m_Outputaa  (
;aa( )
publicee 
Tileee 
.ee 
ColliderTypeee $
m_ColliderTypeee% 3
;ee3 4
publicii 
	Transformii 
m_RandomTransformii .
;ii. /
publicnn 

TilingRulenn 
(nn 
)nn 
{oo 
m_Outputpp 
=pp 
OutputSpritepp '
.pp' (
Singlepp( .
;pp. /
	m_Spritesqq 
=qq 
newqq 
Spriteqq  &
[qq& '
$numqq' (
]qq( )
;qq) *
m_GameObjectrr 
=rr 
nullrr #
;rr# $
m_AnimationSpeedss  
=ss! "
$numss# %
;ss% &
m_PerlinScalett 
=tt 
$numtt  $
;tt$ %
m_ColliderTypeuu 
=uu  
Tileuu! %
.uu% &
ColliderTypeuu& 2
.uu2 3
Spriteuu3 9
;uu9 :
}vv 
publicxx 

Dictionaryxx 
<xx 

Vector3Intxx (
,xx( )
intxx* -
>xx- .
GetNeighborsxx/ ;
(xx; <
)xx< =
{yy 

Dictionaryzz 
<zz 

Vector3Intzz %
,zz% &
intzz' *
>zz* +
dictzz, 0
=zz1 2
newzz3 6

Dictionaryzz7 A
<zzA B

Vector3IntzzB L
,zzL M
intzzN Q
>zzQ R
(zzR S
)zzS T
;zzT U
for|| 
(|| 
int|| 
i|| 
=|| 
$num|| 
;|| 
i||  !
<||" #
m_Neighbors||$ /
.||/ 0
Count||0 5
&&||6 8
i||9 :
<||; <
m_NeighborPositions||= P
.||P Q
Count||Q V
;||V W
i||X Y
++||Y [
)||[ \
dict}} 
.}} 
Add}} 
(}} 
m_NeighborPositions}} 0
[}}0 1
i}}1 2
]}}2 3
,}}3 4
m_Neighbors}}5 @
[}}@ A
i}}A B
]}}B C
)}}C D
;}}D E
return 
dict 
; 
}
ÄÄ 
public
ÅÅ 
void
ÅÅ 
ApplyNeighbors
ÅÅ &
(
ÅÅ& '

Dictionary
ÅÅ' 1
<
ÅÅ1 2

Vector3Int
ÅÅ2 <
,
ÅÅ< =
int
ÅÅ> A
>
ÅÅA B
dict
ÅÅC G
)
ÅÅG H
{
ÇÇ !
m_NeighborPositions
ÉÉ #
=
ÉÉ$ %
dict
ÉÉ& *
.
ÉÉ* +
Keys
ÉÉ+ /
.
ÉÉ/ 0
ToList
ÉÉ0 6
(
ÉÉ6 7
)
ÉÉ7 8
;
ÉÉ8 9
m_Neighbors
ÑÑ 
=
ÑÑ 
dict
ÑÑ "
.
ÑÑ" #
Values
ÑÑ# )
.
ÑÑ) *
ToList
ÑÑ* 0
(
ÑÑ0 1
)
ÑÑ1 2
;
ÑÑ2 3
}
ÖÖ 
public
áá 
	BoundsInt
áá 
	GetBounds
áá &
(
áá& '
)
áá' (
{
àà 
	BoundsInt
ââ 
bounds
ââ  
=
ââ! "
new
ââ# &
	BoundsInt
ââ' 0
(
ââ0 1

Vector3Int
ââ1 ;
.
ââ; <
zero
ââ< @
,
ââ@ A

Vector3Int
ââB L
.
ââL M
one
ââM P
)
ââP Q
;
ââQ R
foreach
ää 
(
ää 
var
ää 
neighbor
ää %
in
ää& (
GetNeighbors
ää) 5
(
ää5 6
)
ää6 7
)
ää7 8
{
ãã 
bounds
åå 
.
åå 
xMin
åå 
=
åå  !
Mathf
åå" '
.
åå' (
Min
åå( +
(
åå+ ,
bounds
åå, 2
.
åå2 3
xMin
åå3 7
,
åå7 8
neighbor
åå9 A
.
ååA B
Key
ååB E
.
ååE F
x
ååF G
)
ååG H
;
ååH I
bounds
çç 
.
çç 
yMin
çç 
=
çç  !
Mathf
çç" '
.
çç' (
Min
çç( +
(
çç+ ,
bounds
çç, 2
.
çç2 3
yMin
çç3 7
,
çç7 8
neighbor
çç9 A
.
ççA B
Key
ççB E
.
ççE F
y
ççF G
)
ççG H
;
ççH I
bounds
éé 
.
éé 
xMax
éé 
=
éé  !
Mathf
éé" '
.
éé' (
Max
éé( +
(
éé+ ,
bounds
éé, 2
.
éé2 3
xMax
éé3 7
,
éé7 8
neighbor
éé9 A
.
ééA B
Key
ééB E
.
ééE F
x
ééF G
+
ééH I
$num
ééJ K
)
ééK L
;
ééL M
bounds
èè 
.
èè 
yMax
èè 
=
èè  !
Mathf
èè" '
.
èè' (
Max
èè( +
(
èè+ ,
bounds
èè, 2
.
èè2 3
yMax
èè3 7
,
èè7 8
neighbor
èè9 A
.
èèA B
Key
èèB E
.
èèE F
y
èèF G
+
èèH I
$num
èèJ K
)
èèK L
;
èèL M
}
êê 
return
ëë 
bounds
ëë 
;
ëë 
}
íí 
public
óó 
class
óó 
Neighbor
óó !
{
òò 
public
ùù 
const
ùù 
int
ùù  
This
ùù! %
=
ùù& '
$num
ùù( )
;
ùù) *
public
¢¢ 
const
¢¢ 
int
¢¢  
NotThis
¢¢! (
=
¢¢) *
$num
¢¢+ ,
;
¢¢, -
}
££ 
public
®® 
enum
®® 
	Transform
®® !
{
©© 
Fixed
≠≠ 
,
≠≠ 
Rotated
±± 
,
±± 
MirrorX
µµ 
,
µµ 
MirrorY
ππ 
,
ππ 
MirrorXY
ΩΩ 
}
ææ 
public
√√ 
enum
√√ 
OutputSprite
√√ $
{
ƒƒ 
Single
»» 
,
»» 
Random
ÃÃ 
,
ÃÃ 
	Animation
–– 
}
—— 
}
““ 	
[
◊◊ 	
HideInInspector
◊◊	 
]
◊◊ 
public
◊◊  
List
◊◊! %
<
◊◊% &

TilingRule
◊◊& 0
>
◊◊0 1
m_TilingRules
◊◊2 ?
=
◊◊@ A
new
◊◊B E
List
◊◊F J
<
◊◊J K
RuleTile
◊◊K S
.
◊◊S T

TilingRule
◊◊T ^
>
◊◊^ _
(
◊◊_ `
)
◊◊` a
;
◊◊a b
public
ŸŸ 
HashSet
ŸŸ 
<
ŸŸ 

Vector3Int
ŸŸ !
>
ŸŸ! "
neighborPositions
ŸŸ# 4
{
⁄⁄ 	
get
€€ 
{
‹‹ 
if
›› 
(
›› !
m_NeighborPositions
›› '
.
››' (
Count
››( -
==
››. 0
$num
››1 2
)
››2 3%
UpdateNeighborPositions
ﬁﬁ +
(
ﬁﬁ+ ,
)
ﬁﬁ, -
;
ﬁﬁ- .
return
‡‡ !
m_NeighborPositions
‡‡ *
;
‡‡* +
}
·· 
}
‚‚ 	
private
‰‰ 
HashSet
‰‰ 
<
‰‰ 

Vector3Int
‰‰ "
>
‰‰" #!
m_NeighborPositions
‰‰$ 7
=
‰‰8 9
new
‰‰: =
HashSet
‰‰> E
<
‰‰E F

Vector3Int
‰‰F P
>
‰‰P Q
(
‰‰Q R
)
‰‰R S
;
‰‰S T
public
ÊÊ 
void
ÊÊ %
UpdateNeighborPositions
ÊÊ +
(
ÊÊ+ ,
)
ÊÊ, -
{
ÁÁ 	.
 m_CacheTilemapsNeighborPositions
ËË ,
.
ËË, -
Clear
ËË- 2
(
ËË2 3
)
ËË3 4
;
ËË4 5
HashSet
ÍÍ 
<
ÍÍ 

Vector3Int
ÍÍ 
>
ÍÍ 
	positions
ÍÍ  )
=
ÍÍ* +!
m_NeighborPositions
ÍÍ, ?
;
ÍÍ? @
	positions
ÎÎ 
.
ÎÎ 
Clear
ÎÎ 
(
ÎÎ 
)
ÎÎ 
;
ÎÎ 
foreach
ÌÌ 
(
ÌÌ 

TilingRule
ÌÌ 
rule
ÌÌ  $
in
ÌÌ% '
m_TilingRules
ÌÌ( 5
)
ÌÌ5 6
{
ÓÓ 
foreach
ÔÔ 
(
ÔÔ 
var
ÔÔ 
neighbor
ÔÔ %
in
ÔÔ& (
rule
ÔÔ) -
.
ÔÔ- .
GetNeighbors
ÔÔ. :
(
ÔÔ: ;
)
ÔÔ; <
)
ÔÔ< =
{
 

Vector3Int
ÒÒ 
position
ÒÒ '
=
ÒÒ( )
neighbor
ÒÒ* 2
.
ÒÒ2 3
Key
ÒÒ3 6
;
ÒÒ6 7
	positions
ÚÚ 
.
ÚÚ 
Add
ÚÚ !
(
ÚÚ! "
position
ÚÚ" *
)
ÚÚ* +
;
ÚÚ+ ,
if
ıı 
(
ıı 
rule
ıı 
.
ıı 
m_RuleTransform
ıı ,
==
ıı- /

TilingRule
ıı0 :
.
ıı: ;
	Transform
ıı; D
.
ııD E
Rotated
ııE L
)
ııL M
{
ˆˆ 
for
˜˜ 
(
˜˜ 
int
˜˜  
angle
˜˜! &
=
˜˜' (
m_RotationAngle
˜˜) 8
;
˜˜8 9
angle
˜˜: ?
<
˜˜@ A
$num
˜˜B E
;
˜˜E F
angle
˜˜G L
+=
˜˜M O
m_RotationAngle
˜˜P _
)
˜˜_ `
{
¯¯ 
	positions
˘˘ %
.
˘˘% &
Add
˘˘& )
(
˘˘) * 
GetRotatedPosition
˘˘* <
(
˘˘< =
position
˘˘= E
,
˘˘E F
angle
˘˘G L
)
˘˘L M
)
˘˘M N
;
˘˘N O
}
˙˙ 
}
˚˚ 
else
˝˝ 
if
˝˝ 
(
˝˝ 
rule
˝˝ !
.
˝˝! "
m_RuleTransform
˝˝" 1
==
˝˝2 4

TilingRule
˝˝5 ?
.
˝˝? @
	Transform
˝˝@ I
.
˝˝I J
MirrorXY
˝˝J R
)
˝˝R S
{
˛˛ 
	positions
ˇˇ !
.
ˇˇ! "
Add
ˇˇ" %
(
ˇˇ% &!
GetMirroredPosition
ˇˇ& 9
(
ˇˇ9 :
position
ˇˇ: B
,
ˇˇB C
true
ˇˇD H
,
ˇˇH I
true
ˇˇJ N
)
ˇˇN O
)
ˇˇO P
;
ˇˇP Q
	positions
ÄÄ !
.
ÄÄ! "
Add
ÄÄ" %
(
ÄÄ% &!
GetMirroredPosition
ÄÄ& 9
(
ÄÄ9 :
position
ÄÄ: B
,
ÄÄB C
true
ÄÄD H
,
ÄÄH I
false
ÄÄJ O
)
ÄÄO P
)
ÄÄP Q
;
ÄÄQ R
	positions
ÅÅ !
.
ÅÅ! "
Add
ÅÅ" %
(
ÅÅ% &!
GetMirroredPosition
ÅÅ& 9
(
ÅÅ9 :
position
ÅÅ: B
,
ÅÅB C
false
ÅÅD I
,
ÅÅI J
true
ÅÅK O
)
ÅÅO P
)
ÅÅP Q
;
ÅÅQ R
}
ÇÇ 
else
ÑÑ 
if
ÑÑ 
(
ÑÑ 
rule
ÑÑ !
.
ÑÑ! "
m_RuleTransform
ÑÑ" 1
==
ÑÑ2 4

TilingRule
ÑÑ5 ?
.
ÑÑ? @
	Transform
ÑÑ@ I
.
ÑÑI J
MirrorX
ÑÑJ Q
)
ÑÑQ R
{
ÖÖ 
	positions
ÜÜ !
.
ÜÜ! "
Add
ÜÜ" %
(
ÜÜ% &!
GetMirroredPosition
ÜÜ& 9
(
ÜÜ9 :
position
ÜÜ: B
,
ÜÜB C
true
ÜÜD H
,
ÜÜH I
false
ÜÜJ O
)
ÜÜO P
)
ÜÜP Q
;
ÜÜQ R
}
áá 
else
ââ 
if
ââ 
(
ââ 
rule
ââ !
.
ââ! "
m_RuleTransform
ââ" 1
==
ââ2 4

TilingRule
ââ5 ?
.
ââ? @
	Transform
ââ@ I
.
ââI J
MirrorY
ââJ Q
)
ââQ R
{
ää 
	positions
ãã !
.
ãã! "
Add
ãã" %
(
ãã% &!
GetMirroredPosition
ãã& 9
(
ãã9 :
position
ãã: B
,
ããB C
false
ããD I
,
ããI J
true
ããK O
)
ããO P
)
ããP Q
;
ããQ R
}
åå 
}
çç 
}
éé 
}
èè 	
public
òò 
override
òò 
bool
òò 
StartUp
òò $
(
òò$ %

Vector3Int
òò% /
location
òò0 8
,
òò8 9
ITilemap
òò: B
tilemap
òòC J
,
òòJ K

GameObject
òòL V$
instantiatedGameObject
òòW m
)
òòm n
{
ôô 	
if
öö 
(
öö $
instantiatedGameObject
öö &
!=
öö' )
null
öö* .
)
öö. /
{
õõ 
var
úú 
iden
úú 
=
úú 
	Matrix4x4
úú $
.
úú$ %
identity
úú% -
;
úú- .

Quaternion
ùù "
gameObjectQuaternion
ùù /
=
ùù0 1
new
ùù2 5

Quaternion
ùù6 @
(
ùù@ A
)
ùùA B
;
ùùB C
foreach
üü 
(
üü 

TilingRule
üü #
rule
üü$ (
in
üü) +
m_TilingRules
üü, 9
)
üü9 :
{
†† 
	Matrix4x4
°° 
	transform
°° '
=
°°( )
iden
°°* .
;
°°. /
if
¢¢ 
(
¢¢ 
RuleMatches
¢¢ #
(
¢¢# $
rule
¢¢$ (
,
¢¢( )
location
¢¢* 2
,
¢¢2 3
tilemap
¢¢4 ;
,
¢¢; <
ref
¢¢= @
	transform
¢¢A J
)
¢¢J K
)
¢¢K L
{
££ "
gameObjectQuaternion
•• ,
=
••- .

Quaternion
••/ 9
.
••9 :
LookRotation
••: F
(
••F G
new
••G J
Vector3
••K R
(
••R S
	transform
••S \
.
••\ ]
m02
••] `
,
••` a
	transform
••b k
.
••k l
m12
••l o
,
••o p
	transform
••q z
.
••z {
m22
••{ ~
)
••~ 
,•• Ä
new••Å Ñ
Vector3••Ö å
(••å ç
	transform••ç ñ
.••ñ ó
m01••ó ö
,••ö õ
	transform••ú •
.••• ¶
m11••¶ ©
,••© ™
	transform••´ ¥
.••¥ µ
m21••µ ∏
)••∏ π
)••π ∫
;••∫ ª
break
¶¶ 
;
¶¶ 
}
ßß 
}
®® 
Tilemap
™™ 
tmpMap
™™ 
=
™™  
tilemap
™™! (
.
™™( )
GetComponent
™™) 5
<
™™5 6
Tilemap
™™6 =
>
™™= >
(
™™> ?
)
™™? @
;
™™@ A$
instantiatedGameObject
´´ &
.
´´& '
	transform
´´' 0
.
´´0 1
position
´´1 9
=
´´: ;
tmpMap
´´< B
.
´´B C
LocalToWorld
´´C O
(
´´O P
tmpMap
´´P V
.
´´V W%
CellToLocalInterpolated
´´W n
(
´´n o
location
´´o w
+
´´x y
tmpMap´´z Ä
.´´Ä Å

tileAnchor´´Å ã
)´´ã å
)´´å ç
;´´ç é$
instantiatedGameObject
¨¨ &
.
¨¨& '
	transform
¨¨' 0
.
¨¨0 1
rotation
¨¨1 9
=
¨¨: ;"
gameObjectQuaternion
¨¨< P
;
¨¨P Q
}
≠≠ 
return
ØØ 
true
ØØ 
;
ØØ 
}
∞∞ 	
public
∏∏ 
override
∏∏ 
void
∏∏ 
GetTileData
∏∏ (
(
∏∏( )

Vector3Int
∏∏) 3
position
∏∏4 <
,
∏∏< =
ITilemap
∏∏> F
tilemap
∏∏G N
,
∏∏N O
ref
∏∏P S
TileData
∏∏T \
tileData
∏∏] e
)
∏∏e f
{
ππ 	
var
∫∫ 
iden
∫∫ 
=
∫∫ 
	Matrix4x4
∫∫  
.
∫∫  !
identity
∫∫! )
;
∫∫) *
tileData
ºº 
.
ºº 
sprite
ºº 
=
ºº 
m_DefaultSprite
ºº -
;
ºº- .
tileData
ΩΩ 
.
ΩΩ 

gameObject
ΩΩ 
=
ΩΩ  !!
m_DefaultGameObject
ΩΩ" 5
;
ΩΩ5 6
tileData
ææ 
.
ææ 
colliderType
ææ !
=
ææ" ##
m_DefaultColliderType
ææ$ 9
;
ææ9 :
tileData
øø 
.
øø 
flags
øø 
=
øø 
	TileFlags
øø &
.
øø& '
LockTransform
øø' 4
;
øø4 5
tileData
¿¿ 
.
¿¿ 
	transform
¿¿ 
=
¿¿  
iden
¿¿! %
;
¿¿% &
foreach
¬¬ 
(
¬¬ 

TilingRule
¬¬ 
rule
¬¬  $
in
¬¬% '
m_TilingRules
¬¬( 5
)
¬¬5 6
{
√√ 
	Matrix4x4
ƒƒ 
	transform
ƒƒ #
=
ƒƒ$ %
iden
ƒƒ& *
;
ƒƒ* +
if
≈≈ 
(
≈≈ 
RuleMatches
≈≈ 
(
≈≈  
rule
≈≈  $
,
≈≈$ %
position
≈≈& .
,
≈≈. /
tilemap
≈≈0 7
,
≈≈7 8
ref
≈≈9 <
	transform
≈≈= F
)
≈≈F G
)
≈≈G H
{
∆∆ 
switch
«« 
(
«« 
rule
««  
.
««  !
m_Output
««! )
)
««) *
{
»» 
case
…… 

TilingRule
…… '
.
……' (
OutputSprite
……( 4
.
……4 5
Single
……5 ;
:
……; <
case
   

TilingRule
   '
.
  ' (
OutputSprite
  ( 4
.
  4 5
	Animation
  5 >
:
  > ?
tileData
ÀÀ $
.
ÀÀ$ %
sprite
ÀÀ% +
=
ÀÀ, -
rule
ÀÀ. 2
.
ÀÀ2 3
	m_Sprites
ÀÀ3 <
[
ÀÀ< =
$num
ÀÀ= >
]
ÀÀ> ?
;
ÀÀ? @
break
ÃÃ !
;
ÃÃ! "
case
ÕÕ 

TilingRule
ÕÕ '
.
ÕÕ' (
OutputSprite
ÕÕ( 4
.
ÕÕ4 5
Random
ÕÕ5 ;
:
ÕÕ; <
int
ŒŒ 
index
ŒŒ  %
=
ŒŒ& '
Mathf
ŒŒ( -
.
ŒŒ- .
Clamp
ŒŒ. 3
(
ŒŒ3 4
Mathf
ŒŒ4 9
.
ŒŒ9 :

FloorToInt
ŒŒ: D
(
ŒŒD E
GetPerlinValue
ŒŒE S
(
ŒŒS T
position
ŒŒT \
,
ŒŒ\ ]
rule
ŒŒ^ b
.
ŒŒb c
m_PerlinScale
ŒŒc p
,
ŒŒp q
$num
ŒŒr y
)
ŒŒy z
*
ŒŒ{ |
ruleŒŒ} Å
.ŒŒÅ Ç
	m_SpritesŒŒÇ ã
.ŒŒã å
LengthŒŒå í
)ŒŒí ì
,ŒŒì î
$numŒŒï ñ
,ŒŒñ ó
ruleŒŒò ú
.ŒŒú ù
	m_SpritesŒŒù ¶
.ŒŒ¶ ß
LengthŒŒß ≠
-ŒŒÆ Ø
$numŒŒ∞ ±
)ŒŒ± ≤
;ŒŒ≤ ≥
tileData
œœ $
.
œœ$ %
sprite
œœ% +
=
œœ, -
rule
œœ. 2
.
œœ2 3
	m_Sprites
œœ3 <
[
œœ< =
index
œœ= B
]
œœB C
;
œœC D
if
–– 
(
––  
rule
––  $
.
––$ %
m_RandomTransform
––% 6
!=
––7 9

TilingRule
––: D
.
––D E
	Transform
––E N
.
––N O
Fixed
––O T
)
––T U
	transform
——  )
=
——* +"
ApplyRandomTransform
——, @
(
——@ A
rule
——A E
.
——E F
m_RandomTransform
——F W
,
——W X
	transform
——Y b
,
——b c
rule
——d h
.
——h i
m_PerlinScale
——i v
,
——v w
position——x Ä
)——Ä Å
;——Å Ç
break
““ !
;
““! "
}
”” 
tileData
‘‘ 
.
‘‘ 
	transform
‘‘ &
=
‘‘' (
	transform
‘‘) 2
;
‘‘2 3
tileData
’’ 
.
’’ 

gameObject
’’ '
=
’’( )
rule
’’* .
.
’’. /
m_GameObject
’’/ ;
;
’’; <
tileData
÷÷ 
.
÷÷ 
colliderType
÷÷ )
=
÷÷* +
rule
÷÷, 0
.
÷÷0 1
m_ColliderType
÷÷1 ?
;
÷÷? @
break
◊◊ 
;
◊◊ 
}
ÿÿ 
}
ŸŸ 
}
⁄⁄ 	
	protected
„„ 
static
„„ 
float
„„ 
GetPerlinValue
„„ -
(
„„- .

Vector3Int
„„. 8
position
„„9 A
,
„„A B
float
„„C H
scale
„„I N
,
„„N O
float
„„P U
offset
„„V \
)
„„\ ]
{
‰‰ 	
return
ÂÂ 
Mathf
ÂÂ 
.
ÂÂ 
PerlinNoise
ÂÂ $
(
ÂÂ$ %
(
ÂÂ% &
position
ÂÂ& .
.
ÂÂ. /
x
ÂÂ/ 0
+
ÂÂ1 2
offset
ÂÂ3 9
)
ÂÂ9 :
*
ÂÂ; <
scale
ÂÂ= B
,
ÂÂB C
(
ÂÂD E
position
ÂÂE M
.
ÂÂM N
y
ÂÂN O
+
ÂÂP Q
offset
ÂÂR X
)
ÂÂX Y
*
ÂÂZ [
scale
ÂÂ\ a
)
ÂÂa b
;
ÂÂb c
}
ÊÊ 	
static
ËË 

Dictionary
ËË 
<
ËË 
Tilemap
ËË !
,
ËË! "
KeyValuePair
ËË# /
<
ËË/ 0
HashSet
ËË0 7
<
ËË7 8
TileBase
ËË8 @
>
ËË@ A
,
ËËA B
HashSet
ËËC J
<
ËËJ K

Vector3Int
ËËK U
>
ËËU V
>
ËËV W
>
ËËW X.
 m_CacheTilemapsNeighborPositions
ËËY y
=
ËËz {
new
ËË| 

DictionaryËËÄ ä
<ËËä ã
TilemapËËã í
,ËËí ì
KeyValuePairËËî †
<ËË† °
HashSetËË° ®
<ËË® ©
TileBaseËË© ±
>ËË± ≤
,ËË≤ ≥
HashSetËË¥ ª
<ËËª º

Vector3IntËËº ∆
>ËË∆ «
>ËË« »
>ËË» …
(ËË…  
)ËË  À
;ËËÀ Ã
static
ÈÈ 
TileBase
ÈÈ 
[
ÈÈ 
]
ÈÈ $
m_AllocatedUsedTileArr
ÈÈ 0
=
ÈÈ1 2
new
ÈÈ3 6
TileBase
ÈÈ7 ?
[
ÈÈ? @
$num
ÈÈ@ A
]
ÈÈA B
;
ÈÈB C
static
ÎÎ 
bool
ÎÎ &
IsTilemapUsedTilesChange
ÎÎ ,
(
ÎÎ, -
Tilemap
ÎÎ- 4
tilemap
ÎÎ5 <
)
ÎÎ< =
{
ÏÏ 	
if
ÌÌ 
(
ÌÌ 
!
ÌÌ .
 m_CacheTilemapsNeighborPositions
ÌÌ 1
.
ÌÌ1 2
ContainsKey
ÌÌ2 =
(
ÌÌ= >
tilemap
ÌÌ> E
)
ÌÌE F
)
ÌÌF G
return
ÓÓ 
true
ÓÓ 
;
ÓÓ 
var
 
oldUsedTiles
 
=
 .
 m_CacheTilemapsNeighborPositions
 ?
[
? @
tilemap
@ G
]
G H
.
H I
Key
I L
;
L M
int
ÒÒ 
newUsedTilesCount
ÒÒ !
=
ÒÒ" #
tilemap
ÒÒ$ +
.
ÒÒ+ ,
GetUsedTilesCount
ÒÒ, =
(
ÒÒ= >
)
ÒÒ> ?
;
ÒÒ? @
if
ÛÛ 
(
ÛÛ 
newUsedTilesCount
ÛÛ !
!=
ÛÛ" $
oldUsedTiles
ÛÛ% 1
.
ÛÛ1 2
Count
ÛÛ2 7
)
ÛÛ7 8
return
ÙÙ 
true
ÙÙ 
;
ÙÙ 
if
ˆˆ 
(
ˆˆ $
m_AllocatedUsedTileArr
ˆˆ &
.
ˆˆ& '
Length
ˆˆ' -
<
ˆˆ. /
newUsedTilesCount
ˆˆ0 A
)
ˆˆA B$
m_AllocatedUsedTileArr
˜˜ &
=
˜˜' (
new
˜˜) ,
TileBase
˜˜- 5
[
˜˜5 6
newUsedTilesCount
˜˜6 G
]
˜˜G H
;
˜˜H I
tilemap
˘˘ 
.
˘˘ "
GetUsedTilesNonAlloc
˘˘ (
(
˘˘( )$
m_AllocatedUsedTileArr
˘˘) ?
)
˘˘? @
;
˘˘@ A
for
˚˚ 
(
˚˚ 
int
˚˚ 
i
˚˚ 
=
˚˚ 
$num
˚˚ 
;
˚˚ 
i
˚˚ 
<
˚˚ 
newUsedTilesCount
˚˚  1
;
˚˚1 2
i
˚˚3 4
++
˚˚4 6
)
˚˚6 7
{
¸¸ 
TileBase
˝˝ 
newUsedTile
˝˝ $
=
˝˝% &$
m_AllocatedUsedTileArr
˝˝' =
[
˝˝= >
i
˝˝> ?
]
˝˝? @
;
˝˝@ A
if
˛˛ 
(
˛˛ 
!
˛˛ 
oldUsedTiles
˛˛ !
.
˛˛! "
Contains
˛˛" *
(
˛˛* +
newUsedTile
˛˛+ 6
)
˛˛6 7
)
˛˛7 8
return
ˇˇ 
true
ˇˇ 
;
ˇˇ  
}
ÄÄ 
return
ÇÇ 
false
ÇÇ 
;
ÇÇ 
}
ÉÉ 	
static
ÑÑ 
void
ÑÑ -
CachingTilemapNeighborPositions
ÑÑ 3
(
ÑÑ3 4
Tilemap
ÑÑ4 ;
tilemap
ÑÑ< C
)
ÑÑC D
{
ÖÖ 	
int
ÜÜ 
usedTileCount
ÜÜ 
=
ÜÜ 
tilemap
ÜÜ  '
.
ÜÜ' (
GetUsedTilesCount
ÜÜ( 9
(
ÜÜ9 :
)
ÜÜ: ;
;
ÜÜ; <
HashSet
áá 
<
áá 
TileBase
áá 
>
áá 
	usedTiles
áá '
=
áá( )
new
áá* -
HashSet
áá. 5
<
áá5 6
TileBase
áá6 >
>
áá> ?
(
áá? @
)
áá@ A
;
ááA B
HashSet
àà 
<
àà 

Vector3Int
àà 
>
àà 
neighborPositions
àà  1
=
àà2 3
new
àà4 7
HashSet
àà8 ?
<
àà? @

Vector3Int
àà@ J
>
ààJ K
(
ààK L
)
ààL M
;
ààM N
if
ää 
(
ää $
m_AllocatedUsedTileArr
ää &
.
ää& '
Length
ää' -
<
ää. /
usedTileCount
ää0 =
)
ää= >$
m_AllocatedUsedTileArr
ãã &
=
ãã' (
new
ãã) ,
TileBase
ãã- 5
[
ãã5 6
usedTileCount
ãã6 C
]
ããC D
;
ããD E
tilemap
çç 
.
çç "
GetUsedTilesNonAlloc
çç (
(
çç( )$
m_AllocatedUsedTileArr
çç) ?
)
çç? @
;
çç@ A
for
èè 
(
èè 
int
èè 
i
èè 
=
èè 
$num
èè 
;
èè 
i
èè 
<
èè 
usedTileCount
èè  -
;
èè- .
i
èè/ 0
++
èè0 2
)
èè2 3
{
êê 
TileBase
ëë 
tile
ëë 
=
ëë $
m_AllocatedUsedTileArr
ëë  6
[
ëë6 7
i
ëë7 8
]
ëë8 9
;
ëë9 :
	usedTiles
íí 
.
íí 
Add
íí 
(
íí 
tile
íí "
)
íí" #
;
íí# $
RuleTile
ìì 
ruleTile
ìì !
=
ìì" #
null
ìì$ (
;
ìì( )
if
ïï 
(
ïï 
tile
ïï 
is
ïï 
RuleTile
ïï $
)
ïï$ %
ruleTile
ññ 
=
ññ 
tile
ññ #
as
ññ$ &
RuleTile
ññ' /
;
ññ/ 0
else
óó 
if
óó 
(
óó 
tile
óó 
is
óó  
RuleOverrideTile
óó! 1
)
óó1 2
ruleTile
òò 
=
òò 
(
òò  
tile
òò  $
as
òò% '
RuleOverrideTile
òò( 8
)
òò8 9
.
òò9 :
m_Tile
òò: @
;
òò@ A
if
öö 
(
öö 
ruleTile
öö 
)
öö 
foreach
õõ 
(
õõ 

Vector3Int
õõ '
neighborPosition
õõ( 8
in
õõ9 ;
ruleTile
õõ< D
.
õõD E
neighborPositions
õõE V
)
õõV W
neighborPositions
úú )
.
úú) *
Add
úú* -
(
úú- .
neighborPosition
úú. >
)
úú> ?
;
úú? @
}
ùù .
 m_CacheTilemapsNeighborPositions
üü ,
[
üü, -
tilemap
üü- 4
]
üü4 5
=
üü6 7
new
üü8 ;
KeyValuePair
üü< H
<
üüH I
HashSet
üüI P
<
üüP Q
TileBase
üüQ Y
>
üüY Z
,
üüZ [
HashSet
üü\ c
<
üüc d

Vector3Int
üüd n
>
üün o
>
üüo p
(
üüp q
	usedTiles
üüq z
,
üüz { 
neighborPositionsüü| ç
)üüç é
;üüé è
}
†† 	
static
°° 
void
°° .
 ReleaseDestroyedTilemapCacheData
°° 4
(
°°4 5
)
°°5 6
{
¢¢ 	.
 m_CacheTilemapsNeighborPositions
££ ,
=
££- ..
 m_CacheTilemapsNeighborPositions
££/ O
.
§§ 
Where
§§ 
(
§§ 
data
§§ 
=>
§§ 
data
§§ #
.
§§# $
Key
§§$ '
!=
§§( *
null
§§+ /
)
§§/ 0
.
•• 
ToDictionary
•• 
(
•• 
data
•• "
=>
••# %
data
••& *
.
••* +
Key
••+ .
,
••. /
data
••0 4
=>
••5 7
data
••8 <
.
••< =
Value
••= B
)
••B C
;
••C D
}
¶¶ 	
public
ØØ 
override
ØØ 
bool
ØØ "
GetTileAnimationData
ØØ 1
(
ØØ1 2

Vector3Int
ØØ2 <
position
ØØ= E
,
ØØE F
ITilemap
ØØG O
tilemap
ØØP W
,
ØØW X
ref
ØØY \
TileAnimationData
ØØ] n 
tileAnimationDataØØo Ä
)ØØÄ Å
{
∞∞ 	
var
±± 
iden
±± 
=
±± 
	Matrix4x4
±±  
.
±±  !
identity
±±! )
;
±±) *
foreach
≤≤ 
(
≤≤ 

TilingRule
≤≤ 
rule
≤≤  $
in
≤≤% '
m_TilingRules
≤≤( 5
)
≤≤5 6
{
≥≥ 
if
¥¥ 
(
¥¥ 
rule
¥¥ 
.
¥¥ 
m_Output
¥¥ !
==
¥¥" $

TilingRule
¥¥% /
.
¥¥/ 0
OutputSprite
¥¥0 <
.
¥¥< =
	Animation
¥¥= F
)
¥¥F G
{
µµ 
	Matrix4x4
∂∂ 
	transform
∂∂ '
=
∂∂( )
iden
∂∂* .
;
∂∂. /
if
∑∑ 
(
∑∑ 
RuleMatches
∑∑ #
(
∑∑# $
rule
∑∑$ (
,
∑∑( )
position
∑∑* 2
,
∑∑2 3
tilemap
∑∑4 ;
,
∑∑; <
ref
∑∑= @
	transform
∑∑A J
)
∑∑J K
)
∑∑K L
{
∏∏ 
tileAnimationData
ππ )
.
ππ) *
animatedSprites
ππ* 9
=
ππ: ;
rule
ππ< @
.
ππ@ A
	m_Sprites
ππA J
;
ππJ K
tileAnimationData
∫∫ )
.
∫∫) *
animationSpeed
∫∫* 8
=
∫∫9 :
rule
∫∫; ?
.
∫∫? @
m_AnimationSpeed
∫∫@ P
;
∫∫P Q
return
ªª 
true
ªª #
;
ªª# $
}
ºº 
}
ΩΩ 
}
ææ 
return
øø 
false
øø 
;
øø 
}
¿¿ 	
public
«« 
override
«« 
void
«« 
RefreshTile
«« (
(
««( )

Vector3Int
««) 3
location
««4 <
,
««< =
ITilemap
««> F
tilemap
««G N
)
««N O
{
»» 	
base
…… 
.
…… 
RefreshTile
…… 
(
…… 
location
…… %
,
……% &
tilemap
……' .
)
……. /
;
……/ 0
Tilemap
ÀÀ 
	tilemap_2
ÀÀ 
=
ÀÀ 
tilemap
ÀÀ  '
.
ÀÀ' (
GetComponent
ÀÀ( 4
<
ÀÀ4 5
Tilemap
ÀÀ5 <
>
ÀÀ< =
(
ÀÀ= >
)
ÀÀ> ?
;
ÀÀ? @.
 ReleaseDestroyedTilemapCacheData
ÕÕ ,
(
ÕÕ, -
)
ÕÕ- .
;
ÕÕ. /
if
œœ 
(
œœ &
IsTilemapUsedTilesChange
œœ (
(
œœ( )
	tilemap_2
œœ) 2
)
œœ2 3
)
œœ3 4-
CachingTilemapNeighborPositions
–– /
(
––/ 0
	tilemap_2
––0 9
)
––9 :
;
––: ;
HashSet
““ 
<
““ 

Vector3Int
““ 
>
““ 
neighborPositions
““  1
=
““2 3.
 m_CacheTilemapsNeighborPositions
““4 T
[
““T U
	tilemap_2
““U ^
]
““^ _
.
““_ `
Value
““` e
;
““e f
foreach
”” 
(
”” 

Vector3Int
”” 
offset
””  &
in
””' )
neighborPositions
””* ;
)
””; <
{
‘‘ 

Vector3Int
’’ 
position
’’ #
=
’’$ %&
GetOffsetPositionReverse
’’& >
(
’’> ?
location
’’? G
,
’’G H
offset
’’I O
)
’’O P
;
’’P Q
TileBase
÷÷ 
tile
÷÷ 
=
÷÷ 
	tilemap_2
÷÷  )
.
÷÷) *
GetTile
÷÷* 1
(
÷÷1 2
position
÷÷2 :
)
÷÷: ;
;
÷÷; <
RuleTile
◊◊ 
ruleTile
◊◊ !
=
◊◊" #
null
◊◊$ (
;
◊◊( )
if
ŸŸ 
(
ŸŸ 
tile
ŸŸ 
is
ŸŸ 
RuleTile
ŸŸ $
)
ŸŸ$ %
ruleTile
⁄⁄ 
=
⁄⁄ 
tile
⁄⁄ #
as
⁄⁄$ &
RuleTile
⁄⁄' /
;
⁄⁄/ 0
else
€€ 
if
€€ 
(
€€ 
tile
€€ 
is
€€  
RuleOverrideTile
€€! 1
)
€€1 2
ruleTile
‹‹ 
=
‹‹ 
(
‹‹  
tile
‹‹  $
as
‹‹% '
RuleOverrideTile
‹‹( 8
)
‹‹8 9
.
‹‹9 :
m_Tile
‹‹: @
;
‹‹@ A
if
ﬁﬁ 
(
ﬁﬁ 
ruleTile
ﬁﬁ 
)
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 
ruleTile
ﬂﬂ  
.
ﬂﬂ  !
neighborPositions
ﬂﬂ! 2
.
ﬂﬂ2 3
Contains
ﬂﬂ3 ;
(
ﬂﬂ; <
offset
ﬂﬂ< B
)
ﬂﬂB C
)
ﬂﬂC D
base
‡‡ 
.
‡‡ 
RefreshTile
‡‡ (
(
‡‡( )
position
‡‡) 1
,
‡‡1 2
tilemap
‡‡3 :
)
‡‡: ;
;
‡‡; <
}
·· 
}
‚‚ 	
	protected
ÎÎ 
virtual
ÎÎ 
bool
ÎÎ 
RuleMatches
ÎÎ *
(
ÎÎ* +

TilingRule
ÎÎ+ 5
rule
ÎÎ6 :
,
ÎÎ: ;

Vector3Int
ÎÎ< F
position
ÎÎG O
,
ÎÎO P
ITilemap
ÎÎQ Y
tilemap
ÎÎZ a
,
ÎÎa b
ref
ÎÎc f
	Matrix4x4
ÎÎg p
	transform
ÎÎq z
)
ÎÎz {
{
ÏÏ 	
if
ÌÌ 
(
ÌÌ 
RuleMatches
ÌÌ 
(
ÌÌ 
rule
ÌÌ  
,
ÌÌ  !
position
ÌÌ" *
,
ÌÌ* +
tilemap
ÌÌ, 3
,
ÌÌ3 4
$num
ÌÌ5 6
)
ÌÌ6 7
)
ÌÌ7 8
{
ÓÓ 
	transform
ÔÔ 
=
ÔÔ 
	Matrix4x4
ÔÔ %
.
ÔÔ% &
TRS
ÔÔ& )
(
ÔÔ) *
Vector3
ÔÔ* 1
.
ÔÔ1 2
zero
ÔÔ2 6
,
ÔÔ6 7

Quaternion
ÔÔ8 B
.
ÔÔB C
Euler
ÔÔC H
(
ÔÔH I
$num
ÔÔI K
,
ÔÔK L
$num
ÔÔM O
,
ÔÔO P
$num
ÔÔQ S
)
ÔÔS T
,
ÔÔT U
Vector3
ÔÔV ]
.
ÔÔ] ^
one
ÔÔ^ a
)
ÔÔa b
;
ÔÔb c
return
 
true
 
;
 
}
ÒÒ 
if
ÙÙ 
(
ÙÙ 
rule
ÙÙ 
.
ÙÙ 
m_RuleTransform
ÙÙ $
==
ÙÙ% '

TilingRule
ÙÙ( 2
.
ÙÙ2 3
	Transform
ÙÙ3 <
.
ÙÙ< =
Rotated
ÙÙ= D
)
ÙÙD E
{
ıı 
for
ˆˆ 
(
ˆˆ 
int
ˆˆ 
angle
ˆˆ 
=
ˆˆ  
m_RotationAngle
ˆˆ! 0
;
ˆˆ0 1
angle
ˆˆ2 7
<
ˆˆ8 9
$num
ˆˆ: =
;
ˆˆ= >
angle
ˆˆ? D
+=
ˆˆE G
m_RotationAngle
ˆˆH W
)
ˆˆW X
{
˜˜ 
if
¯¯ 
(
¯¯ 
RuleMatches
¯¯ #
(
¯¯# $
rule
¯¯$ (
,
¯¯( )
position
¯¯* 2
,
¯¯2 3
tilemap
¯¯4 ;
,
¯¯; <
angle
¯¯= B
)
¯¯B C
)
¯¯C D
{
˘˘ 
	transform
˙˙ !
=
˙˙" #
	Matrix4x4
˙˙$ -
.
˙˙- .
TRS
˙˙. 1
(
˙˙1 2
Vector3
˙˙2 9
.
˙˙9 :
zero
˙˙: >
,
˙˙> ?

Quaternion
˙˙@ J
.
˙˙J K
Euler
˙˙K P
(
˙˙P Q
$num
˙˙Q S
,
˙˙S T
$num
˙˙U W
,
˙˙W X
-
˙˙Y Z
angle
˙˙Z _
)
˙˙_ `
,
˙˙` a
Vector3
˙˙b i
.
˙˙i j
one
˙˙j m
)
˙˙m n
;
˙˙n o
return
˚˚ 
true
˚˚ #
;
˚˚# $
}
¸¸ 
}
˝˝ 
}
˛˛ 
else
ÄÄ 
if
ÄÄ 
(
ÄÄ 
rule
ÄÄ 
.
ÄÄ 
m_RuleTransform
ÄÄ )
==
ÄÄ* ,

TilingRule
ÄÄ- 7
.
ÄÄ7 8
	Transform
ÄÄ8 A
.
ÄÄA B
MirrorXY
ÄÄB J
)
ÄÄJ K
{
ÅÅ 
if
ÇÇ 
(
ÇÇ 
RuleMatches
ÇÇ 
(
ÇÇ  
rule
ÇÇ  $
,
ÇÇ$ %
position
ÇÇ& .
,
ÇÇ. /
tilemap
ÇÇ0 7
,
ÇÇ7 8
true
ÇÇ9 =
,
ÇÇ= >
true
ÇÇ? C
)
ÇÇC D
)
ÇÇD E
{
ÉÉ 
	transform
ÑÑ 
=
ÑÑ 
	Matrix4x4
ÑÑ  )
.
ÑÑ) *
TRS
ÑÑ* -
(
ÑÑ- .
Vector3
ÑÑ. 5
.
ÑÑ5 6
zero
ÑÑ6 :
,
ÑÑ: ;

Quaternion
ÑÑ< F
.
ÑÑF G
identity
ÑÑG O
,
ÑÑO P
new
ÑÑQ T
Vector3
ÑÑU \
(
ÑÑ\ ]
-
ÑÑ] ^
$num
ÑÑ^ `
,
ÑÑ` a
-
ÑÑb c
$num
ÑÑc e
,
ÑÑe f
$num
ÑÑg i
)
ÑÑi j
)
ÑÑj k
;
ÑÑk l
return
ÖÖ 
true
ÖÖ 
;
ÖÖ  
}
ÜÜ 
if
áá 
(
áá 
RuleMatches
áá 
(
áá  
rule
áá  $
,
áá$ %
position
áá& .
,
áá. /
tilemap
áá0 7
,
áá7 8
true
áá9 =
,
áá= >
false
áá? D
)
ááD E
)
ááE F
{
àà 
	transform
ââ 
=
ââ 
	Matrix4x4
ââ  )
.
ââ) *
TRS
ââ* -
(
ââ- .
Vector3
ââ. 5
.
ââ5 6
zero
ââ6 :
,
ââ: ;

Quaternion
ââ< F
.
ââF G
identity
ââG O
,
ââO P
new
ââQ T
Vector3
ââU \
(
ââ\ ]
-
ââ] ^
$num
ââ^ `
,
ââ` a
$num
ââb d
,
ââd e
$num
ââf h
)
ââh i
)
ââi j
;
ââj k
return
ää 
true
ää 
;
ää  
}
ãã 
if
åå 
(
åå 
RuleMatches
åå 
(
åå  
rule
åå  $
,
åå$ %
position
åå& .
,
åå. /
tilemap
åå0 7
,
åå7 8
false
åå9 >
,
åå> ?
true
åå@ D
)
ååD E
)
ååE F
{
çç 
	transform
éé 
=
éé 
	Matrix4x4
éé  )
.
éé) *
TRS
éé* -
(
éé- .
Vector3
éé. 5
.
éé5 6
zero
éé6 :
,
éé: ;

Quaternion
éé< F
.
ééF G
identity
ééG O
,
ééO P
new
ééQ T
Vector3
ééU \
(
éé\ ]
$num
éé] _
,
éé_ `
-
ééa b
$num
ééb d
,
ééd e
$num
ééf h
)
ééh i
)
ééi j
;
ééj k
return
èè 
true
èè 
;
èè  
}
êê 
}
ëë 
else
ìì 
if
ìì 
(
ìì 
rule
ìì 
.
ìì 
m_RuleTransform
ìì )
==
ìì* ,

TilingRule
ìì- 7
.
ìì7 8
	Transform
ìì8 A
.
ììA B
MirrorX
ììB I
)
ììI J
{
îî 
if
ïï 
(
ïï 
RuleMatches
ïï 
(
ïï  
rule
ïï  $
,
ïï$ %
position
ïï& .
,
ïï. /
tilemap
ïï0 7
,
ïï7 8
true
ïï9 =
,
ïï= >
false
ïï? D
)
ïïD E
)
ïïE F
{
ññ 
	transform
óó 
=
óó 
	Matrix4x4
óó  )
.
óó) *
TRS
óó* -
(
óó- .
Vector3
óó. 5
.
óó5 6
zero
óó6 :
,
óó: ;

Quaternion
óó< F
.
óóF G
identity
óóG O
,
óóO P
new
óóQ T
Vector3
óóU \
(
óó\ ]
-
óó] ^
$num
óó^ `
,
óó` a
$num
óób d
,
óód e
$num
óóf h
)
óóh i
)
óói j
;
óój k
return
òò 
true
òò 
;
òò  
}
ôô 
}
öö 
else
úú 
if
úú 
(
úú 
rule
úú 
.
úú 
m_RuleTransform
úú )
==
úú* ,

TilingRule
úú- 7
.
úú7 8
	Transform
úú8 A
.
úúA B
MirrorY
úúB I
)
úúI J
{
ùù 
if
ûû 
(
ûû 
RuleMatches
ûû 
(
ûû  
rule
ûû  $
,
ûû$ %
position
ûû& .
,
ûû. /
tilemap
ûû0 7
,
ûû7 8
false
ûû9 >
,
ûû> ?
true
ûû@ D
)
ûûD E
)
ûûE F
{
üü 
	transform
†† 
=
†† 
	Matrix4x4
††  )
.
††) *
TRS
††* -
(
††- .
Vector3
††. 5
.
††5 6
zero
††6 :
,
††: ;

Quaternion
††< F
.
††F G
identity
††G O
,
††O P
new
††Q T
Vector3
††U \
(
††\ ]
$num
††] _
,
††_ `
-
††a b
$num
††b d
,
††d e
$num
††f h
)
††h i
)
††i j
;
††j k
return
°° 
true
°° 
;
°°  
}
¢¢ 
}
££ 
return
•• 
false
•• 
;
•• 
}
¶¶ 	
	protected
∞∞ 
virtual
∞∞ 
	Matrix4x4
∞∞ #"
ApplyRandomTransform
∞∞$ 8
(
∞∞8 9

TilingRule
∞∞9 C
.
∞∞C D
	Transform
∞∞D M
type
∞∞N R
,
∞∞R S
	Matrix4x4
∞∞T ]
original
∞∞^ f
,
∞∞f g
float
∞∞h m
perlinScale
∞∞n y
,
∞∞y z

Vector3Int∞∞{ Ö
position∞∞Ü é
)∞∞é è
{
±± 	
float
≤≤ 
perlin
≤≤ 
=
≤≤ 
GetPerlinValue
≤≤ )
(
≤≤) *
position
≤≤* 2
,
≤≤2 3
perlinScale
≤≤4 ?
,
≤≤? @
$num
≤≤A H
)
≤≤H I
;
≤≤I J
switch
≥≥ 
(
≥≥ 
type
≥≥ 
)
≥≥ 
{
¥¥ 
case
µµ 

TilingRule
µµ 
.
µµ  
	Transform
µµ  )
.
µµ) *
MirrorXY
µµ* 2
:
µµ2 3
return
∂∂ 
original
∂∂ #
*
∂∂$ %
	Matrix4x4
∂∂& /
.
∂∂/ 0
TRS
∂∂0 3
(
∂∂3 4
Vector3
∂∂4 ;
.
∂∂; <
zero
∂∂< @
,
∂∂@ A

Quaternion
∂∂B L
.
∂∂L M
identity
∂∂M U
,
∂∂U V
new
∂∂W Z
Vector3
∂∂[ b
(
∂∂b c
Math
∂∂c g
.
∂∂g h
Abs
∂∂h k
(
∂∂k l
perlin
∂∂l r
-
∂∂s t
$num
∂∂u x
)
∂∂x y
>
∂∂z {
$num∂∂| Ä
?∂∂Å Ç
$num∂∂É Ö
:∂∂Ü á
-∂∂à â
$num∂∂â ã
,∂∂ã å
perlin∂∂ç ì
<∂∂î ï
$num∂∂ñ ô
?∂∂ö õ
$num∂∂ú û
:∂∂ü †
-∂∂° ¢
$num∂∂¢ §
,∂∂§ •
$num∂∂¶ ®
)∂∂® ©
)∂∂© ™
;∂∂™ ´
case
∑∑ 

TilingRule
∑∑ 
.
∑∑  
	Transform
∑∑  )
.
∑∑) *
MirrorX
∑∑* 1
:
∑∑1 2
return
∏∏ 
original
∏∏ #
*
∏∏$ %
	Matrix4x4
∏∏& /
.
∏∏/ 0
TRS
∏∏0 3
(
∏∏3 4
Vector3
∏∏4 ;
.
∏∏; <
zero
∏∏< @
,
∏∏@ A

Quaternion
∏∏B L
.
∏∏L M
identity
∏∏M U
,
∏∏U V
new
∏∏W Z
Vector3
∏∏[ b
(
∏∏b c
perlin
∏∏c i
<
∏∏j k
$num
∏∏l o
?
∏∏p q
$num
∏∏r t
:
∏∏u v
-
∏∏w x
$num
∏∏x z
,
∏∏z {
$num
∏∏| ~
,
∏∏~ 
$num∏∏Ä Ç
)∏∏Ç É
)∏∏É Ñ
;∏∏Ñ Ö
case
ππ 

TilingRule
ππ 
.
ππ  
	Transform
ππ  )
.
ππ) *
MirrorY
ππ* 1
:
ππ1 2
return
∫∫ 
original
∫∫ #
*
∫∫$ %
	Matrix4x4
∫∫& /
.
∫∫/ 0
TRS
∫∫0 3
(
∫∫3 4
Vector3
∫∫4 ;
.
∫∫; <
zero
∫∫< @
,
∫∫@ A

Quaternion
∫∫B L
.
∫∫L M
identity
∫∫M U
,
∫∫U V
new
∫∫W Z
Vector3
∫∫[ b
(
∫∫b c
$num
∫∫c e
,
∫∫e f
perlin
∫∫g m
<
∫∫n o
$num
∫∫p s
?
∫∫t u
$num
∫∫v x
:
∫∫y z
-
∫∫{ |
$num
∫∫| ~
,
∫∫~ 
$num∫∫Ä Ç
)∫∫Ç É
)∫∫É Ñ
;∫∫Ñ Ö
case
ªª 

TilingRule
ªª 
.
ªª  
	Transform
ªª  )
.
ªª) *
Rotated
ªª* 1
:
ªª1 2
int
ºº 
angle
ºº 
=
ºº 
Mathf
ºº  %
.
ºº% &
Clamp
ºº& +
(
ºº+ ,
Mathf
ºº, 1
.
ºº1 2

FloorToInt
ºº2 <
(
ºº< =
perlin
ºº= C
*
ººD E
m_RotationCount
ººF U
)
ººU V
,
ººV W
$num
ººX Y
,
ººY Z
m_RotationCount
ºº[ j
-
ººk l
$num
ººm n
)
ººn o
*
ººp q
m_RotationAngleººr Å
;ººÅ Ç
return
ΩΩ 
	Matrix4x4
ΩΩ $
.
ΩΩ$ %
TRS
ΩΩ% (
(
ΩΩ( )
Vector3
ΩΩ) 0
.
ΩΩ0 1
zero
ΩΩ1 5
,
ΩΩ5 6

Quaternion
ΩΩ7 A
.
ΩΩA B
Euler
ΩΩB G
(
ΩΩG H
$num
ΩΩH J
,
ΩΩJ K
$num
ΩΩL N
,
ΩΩN O
-
ΩΩP Q
angle
ΩΩQ V
)
ΩΩV W
,
ΩΩW X
Vector3
ΩΩY `
.
ΩΩ` a
one
ΩΩa d
)
ΩΩd e
;
ΩΩe f
}
ææ 
return
øø 
original
øø 
;
øø 
}
¿¿ 	
public
»» 
virtual
»» 
bool
»» 
	RuleMatch
»» %
(
»»% &
int
»»& )
neighbor
»»* 2
,
»»2 3
TileBase
»»4 <
other
»»= B
)
»»B C
{
…… 	
if
   
(
   
other
   
is
   
RuleOverrideTile
   )
)
  ) *
other
ÀÀ 
=
ÀÀ 
(
ÀÀ 
other
ÀÀ 
as
ÀÀ !
RuleOverrideTile
ÀÀ" 2
)
ÀÀ2 3
.
ÀÀ3 4
m_InstanceTile
ÀÀ4 B
;
ÀÀB C
switch
ÕÕ 
(
ÕÕ 
neighbor
ÕÕ 
)
ÕÕ 
{
ŒŒ 
case
œœ 

TilingRule
œœ 
.
œœ  
Neighbor
œœ  (
.
œœ( )
This
œœ) -
:
œœ- .
return
œœ/ 5
other
œœ6 ;
==
œœ< >
this
œœ? C
;
œœC D
case
–– 

TilingRule
–– 
.
––  
Neighbor
––  (
.
––( )
NotThis
––) 0
:
––0 1
return
––2 8
other
––9 >
!=
––? A
this
––B F
;
––F G
}
—— 
return
““ 
true
““ 
;
““ 
}
”” 	
	protected
‹‹ 
bool
‹‹ 
RuleMatches
‹‹ "
(
‹‹" #

TilingRule
‹‹# -
rule
‹‹. 2
,
‹‹2 3

Vector3Int
‹‹4 >
position
‹‹? G
,
‹‹G H
ITilemap
‹‹I Q
tilemap
‹‹R Y
,
‹‹Y Z
int
‹‹[ ^
angle
‹‹_ d
)
‹‹d e
{
›› 	
for
ﬁﬁ 
(
ﬁﬁ 
int
ﬁﬁ 
i
ﬁﬁ 
=
ﬁﬁ 
$num
ﬁﬁ 
;
ﬁﬁ 
i
ﬁﬁ 
<
ﬁﬁ 
rule
ﬁﬁ  $
.
ﬁﬁ$ %
m_Neighbors
ﬁﬁ% 0
.
ﬁﬁ0 1
Count
ﬁﬁ1 6
&&
ﬁﬁ7 9
i
ﬁﬁ: ;
<
ﬁﬁ< =
rule
ﬁﬁ> B
.
ﬁﬁB C!
m_NeighborPositions
ﬁﬁC V
.
ﬁﬁV W
Count
ﬁﬁW \
;
ﬁﬁ\ ]
i
ﬁﬁ^ _
++
ﬁﬁ_ a
)
ﬁﬁa b
{
ﬂﬂ 
int
‡‡ 
neighbor
‡‡ 
=
‡‡ 
rule
‡‡ #
.
‡‡# $
m_Neighbors
‡‡$ /
[
‡‡/ 0
i
‡‡0 1
]
‡‡1 2
;
‡‡2 3

Vector3Int
·· 
positionOffset
·· )
=
··* + 
GetRotatedPosition
··, >
(
··> ?
rule
··? C
.
··C D!
m_NeighborPositions
··D W
[
··W X
i
··X Y
]
··Y Z
,
··Z [
angle
··\ a
)
··a b
;
··b c
TileBase
‚‚ 
other
‚‚ 
=
‚‚  
tilemap
‚‚! (
.
‚‚( )
GetTile
‚‚) 0
(
‚‚0 1
GetOffsetPosition
‚‚1 B
(
‚‚B C
position
‚‚C K
,
‚‚K L
positionOffset
‚‚M [
)
‚‚[ \
)
‚‚\ ]
;
‚‚] ^
if
„„ 
(
„„ 
!
„„ 
	RuleMatch
„„ 
(
„„ 
neighbor
„„ '
,
„„' (
other
„„) .
)
„„. /
)
„„/ 0
{
‰‰ 
return
ÂÂ 
false
ÂÂ  
;
ÂÂ  !
}
ÊÊ 
}
ÁÁ 
return
ËË 
true
ËË 
;
ËË 
}
ÈÈ 	
	protected
ÛÛ 
bool
ÛÛ 
RuleMatches
ÛÛ "
(
ÛÛ" #

TilingRule
ÛÛ# -
rule
ÛÛ. 2
,
ÛÛ2 3

Vector3Int
ÛÛ4 >
position
ÛÛ? G
,
ÛÛG H
ITilemap
ÛÛI Q
tilemap
ÛÛR Y
,
ÛÛY Z
bool
ÛÛ[ _
mirrorX
ÛÛ` g
,
ÛÛg h
bool
ÛÛi m
mirrorY
ÛÛn u
)
ÛÛu v
{
ÙÙ 	
for
ıı 
(
ıı 
int
ıı 
i
ıı 
=
ıı 
$num
ıı 
;
ıı 
i
ıı 
<
ıı 
rule
ıı  $
.
ıı$ %
m_Neighbors
ıı% 0
.
ıı0 1
Count
ıı1 6
&&
ıı7 9
i
ıı: ;
<
ıı< =
rule
ıı> B
.
ııB C!
m_NeighborPositions
ııC V
.
ııV W
Count
ııW \
;
ıı\ ]
i
ıı^ _
++
ıı_ a
)
ııa b
{
ˆˆ 
int
˜˜ 
neighbor
˜˜ 
=
˜˜ 
rule
˜˜ #
.
˜˜# $
m_Neighbors
˜˜$ /
[
˜˜/ 0
i
˜˜0 1
]
˜˜1 2
;
˜˜2 3

Vector3Int
¯¯ 
positionOffset
¯¯ )
=
¯¯* +!
GetMirroredPosition
¯¯, ?
(
¯¯? @
rule
¯¯@ D
.
¯¯D E!
m_NeighborPositions
¯¯E X
[
¯¯X Y
i
¯¯Y Z
]
¯¯Z [
,
¯¯[ \
mirrorX
¯¯] d
,
¯¯d e
mirrorY
¯¯f m
)
¯¯m n
;
¯¯n o
TileBase
˘˘ 
other
˘˘ 
=
˘˘  
tilemap
˘˘! (
.
˘˘( )
GetTile
˘˘) 0
(
˘˘0 1
GetOffsetPosition
˘˘1 B
(
˘˘B C
position
˘˘C K
,
˘˘K L
positionOffset
˘˘M [
)
˘˘[ \
)
˘˘\ ]
;
˘˘] ^
if
˙˙ 
(
˙˙ 
!
˙˙ 
	RuleMatch
˙˙ 
(
˙˙ 
neighbor
˙˙ '
,
˙˙' (
other
˙˙) .
)
˙˙. /
)
˙˙/ 0
{
˚˚ 
return
¸¸ 
false
¸¸  
;
¸¸  !
}
˝˝ 
}
˛˛ 
return
ˇˇ 
true
ˇˇ 
;
ˇˇ 
}
ÄÄ 	
	protected
àà 
virtual
àà 

Vector3Int
àà $ 
GetRotatedPosition
àà% 7
(
àà7 8

Vector3Int
àà8 B
position
ààC K
,
ààK L
int
ààM P
rotation
ààQ Y
)
ààY Z
{
ââ 	
switch
ää 
(
ää 
rotation
ää 
)
ää 
{
ãã 
case
åå 
$num
åå 
:
åå 
return
çç 
position
çç #
;
çç# $
case
éé 
$num
éé 
:
éé 
return
èè 
new
èè 

Vector3Int
èè )
(
èè) *
position
èè* 2
.
èè2 3
y
èè3 4
,
èè4 5
-
èè6 7
position
èè7 ?
.
èè? @
x
èè@ A
,
èèA B
$num
èèC D
)
èèD E
;
èèE F
case
êê 
$num
êê 
:
êê 
return
ëë 
new
ëë 

Vector3Int
ëë )
(
ëë) *
-
ëë* +
position
ëë+ 3
.
ëë3 4
x
ëë4 5
,
ëë5 6
-
ëë7 8
position
ëë8 @
.
ëë@ A
y
ëëA B
,
ëëB C
$num
ëëD E
)
ëëE F
;
ëëF G
case
íí 
$num
íí 
:
íí 
return
ìì 
new
ìì 

Vector3Int
ìì )
(
ìì) *
-
ìì* +
position
ìì+ 3
.
ìì3 4
y
ìì4 5
,
ìì5 6
position
ìì7 ?
.
ìì? @
x
ìì@ A
,
ììA B
$num
ììC D
)
ììD E
;
ììE F
}
îî 
return
ïï 
position
ïï 
;
ïï 
}
ññ 	
	protected
üü 
virtual
üü 

Vector3Int
üü $!
GetMirroredPosition
üü% 8
(
üü8 9

Vector3Int
üü9 C
position
üüD L
,
üüL M
bool
üüN R
mirrorX
üüS Z
,
üüZ [
bool
üü\ `
mirrorY
üüa h
)
üüh i
{
†† 	
if
°° 
(
°° 
mirrorX
°° 
)
°° 
position
¢¢ 
.
¢¢ 
x
¢¢ 
*=
¢¢ 
-
¢¢ 
$num
¢¢  
;
¢¢  !
if
££ 
(
££ 
mirrorY
££ 
)
££ 
position
§§ 
.
§§ 
y
§§ 
*=
§§ 
-
§§ 
$num
§§  
;
§§  !
return
•• 
position
•• 
;
•• 
}
¶¶ 	
	protected
®® 
virtual
®® 

Vector3Int
®® $
GetOffsetPosition
®®% 6
(
®®6 7

Vector3Int
®®7 A
location
®®B J
,
®®J K

Vector3Int
®®L V
offset
®®W ]
)
®®] ^
{
©© 	
return
™™ 
location
™™ 
+
™™ 
offset
™™ $
;
™™$ %
}
´´ 	
	protected
≠≠ 
virtual
≠≠ 

Vector3Int
≠≠ $&
GetOffsetPositionReverse
≠≠% =
(
≠≠= >

Vector3Int
≠≠> H
position
≠≠I Q
,
≠≠Q R

Vector3Int
≠≠S ]
offset
≠≠^ d
)
≠≠d e
{
ÆÆ 	
return
ØØ 
position
ØØ 
-
ØØ 
offset
ØØ $
;
ØØ$ %
}
∞∞ 	
}
±± 
}≤≤ ∏Ë
öC:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Runtime\Tiles\TerrainTile\TerrainTile.cs
	namespace 	
UnityEngine
 
. 
Tilemaps 
{ 
[ 
Serializable 
] 
[ 
CreateAssetMenu 
( 
fileName 
= 
$str  2
,2 3
menuName4 <
== >
$str? S
)S T
]T U
public 

class 
TerrainTile 
: 
TileBase '
{ 
[ 	
SerializeField	 
] 
public 
Sprite 
[ 
] 
	m_Sprites !
;! "
public 
override 
void 
RefreshTile (
(( )

Vector3Int) 3
location4 <
,< =
ITilemap> F
tileMapG N
)N O
{ 	
for 
( 
int 
yd 
= 
- 
$num 
; 
yd  
<=! #
$num$ %
;% &
yd' )
++) +
)+ ,
for 
( 
int 
xd 
= 
- 
$num  
;  !
xd" $
<=% '
$num( )
;) *
xd+ -
++- /
)/ 0
{ 

Vector3Int   
position   '
=  ( )
new  * -

Vector3Int  . 8
(  8 9
location  9 A
.  A B
x  B C
+  D E
xd  F H
,  H I
location  J R
.  R S
y  S T
+  U V
yd  W Y
,  Y Z
location  [ c
.  c d
z  d e
)  e f
;  f g
if!! 
(!! 
	TileValue!! !
(!!! "
tileMap!!" )
,!!) *
position!!+ 3
)!!3 4
)!!4 5
tileMap"" 
.""  
RefreshTile""  +
(""+ ,
position"", 4
)""4 5
;""5 6
}## 
}$$ 	
public,, 
override,, 
void,, 
GetTileData,, (
(,,( )

Vector3Int,,) 3
location,,4 <
,,,< =
ITilemap,,> F
tileMap,,G N
,,,N O
ref,,P S
TileData,,T \
tileData,,] e
),,e f
{-- 	

UpdateTile.. 
(.. 
location.. 
,..  
tileMap..! (
,..( )
ref..* -
tileData... 6
)..6 7
;..7 8
}// 	
private11 
void11 

UpdateTile11 
(11  

Vector3Int11  *
location11+ 3
,113 4
ITilemap115 =
tileMap11> E
,11E F
ref11G J
TileData11K S
tileData11T \
)11\ ]
{22 	
tileData33 
.33 
	transform33 
=33  
	Matrix4x433! *
.33* +
identity33+ 3
;333 4
tileData44 
.44 
color44 
=44 
Color44 "
.44" #
white44# (
;44( )
int66 
mask66 
=66 
	TileValue66  
(66  !
tileMap66! (
,66( )
location66* 2
+663 4
new665 8

Vector3Int669 C
(66C D
$num66D E
,66E F
$num66G H
,66H I
$num66J K
)66K L
)66L M
?66N O
$num66P Q
:66R S
$num66T U
;66U V
mask77 
+=77 
	TileValue77 
(77 
tileMap77 %
,77% &
location77' /
+770 1
new772 5

Vector3Int776 @
(77@ A
$num77A B
,77B C
$num77D E
,77E F
$num77G H
)77H I
)77I J
?77K L
$num77M N
:77O P
$num77Q R
;77R S
mask88 
+=88 
	TileValue88 
(88 
tileMap88 %
,88% &
location88' /
+880 1
new882 5

Vector3Int886 @
(88@ A
$num88A B
,88B C
$num88D E
,88E F
$num88G H
)88H I
)88I J
?88K L
$num88M N
:88O P
$num88Q R
;88R S
mask99 
+=99 
	TileValue99 
(99 
tileMap99 %
,99% &
location99' /
+990 1
new992 5

Vector3Int996 @
(99@ A
$num99A B
,99B C
-99D E
$num99E F
,99F G
$num99H I
)99I J
)99J K
?99L M
$num99N O
:99P Q
$num99R S
;99S T
mask:: 
+=:: 
	TileValue:: 
(:: 
tileMap:: %
,::% &
location::' /
+::0 1
new::2 5

Vector3Int::6 @
(::@ A
$num::A B
,::B C
-::D E
$num::E F
,::F G
$num::H I
)::I J
)::J K
?::L M
$num::N P
:::Q R
$num::S T
;::T U
mask;; 
+=;; 
	TileValue;; 
(;; 
tileMap;; %
,;;% &
location;;' /
+;;0 1
new;;2 5

Vector3Int;;6 @
(;;@ A
-;;A B
$num;;B C
,;;C D
-;;E F
$num;;F G
,;;G H
$num;;I J
);;J K
);;K L
?;;M N
$num;;O Q
:;;R S
$num;;T U
;;;U V
mask<< 
+=<< 
	TileValue<< 
(<< 
tileMap<< %
,<<% &
location<<' /
+<<0 1
new<<2 5

Vector3Int<<6 @
(<<@ A
-<<A B
$num<<B C
,<<C D
$num<<E F
,<<F G
$num<<H I
)<<I J
)<<J K
?<<L M
$num<<N P
:<<Q R
$num<<S T
;<<T U
mask== 
+=== 
	TileValue== 
(== 
tileMap== %
,==% &
location==' /
+==0 1
new==2 5

Vector3Int==6 @
(==@ A
-==A B
$num==B C
,==C D
$num==E F
,==F G
$num==H I
)==I J
)==J K
?==L M
$num==N Q
:==R S
$num==T U
;==U V
byte?? 
original?? 
=?? 
(?? 
byte?? !
)??! "
mask??" &
;??& '
if@@ 
(@@ 
(@@ 
original@@ 
|@@ 
$num@@ 
)@@  
<@@! "
$num@@# &
)@@& '
{@@( )
mask@@* .
=@@/ 0
mask@@1 5
&@@6 7
$num@@8 ;
;@@; <
}@@= >
ifAA 
(AA 
(AA 
originalAA 
|AA 
$numAA 
)AA  
<AA! "
$numAA# &
)AA& '
{AA( )
maskAA* .
=AA/ 0
maskAA1 5
&AA6 7
$numAA8 ;
;AA; <
}AA= >
ifBB 
(BB 
(BB 
originalBB 
|BB 
$numBB 
)BB  
<BB! "
$numBB# &
)BB& '
{BB( )
maskBB* .
=BB/ 0
maskBB1 5
&BB6 7
$numBB8 ;
;BB; <
}BB= >
ifCC 
(CC 
(CC 
originalCC 
|CC 
$numCC 
)CC  
<CC! "
$numCC# &
)CC& '
{CC( )
maskCC* .
=CC/ 0
maskCC1 5
&CC6 7
$numCC8 :
;CC: ;
}CC< =
intEE 
indexEE 
=EE 
GetIndexEE  
(EE  !
(EE! "
byteEE" &
)EE& '
maskEE' +
)EE+ ,
;EE, -
ifFF 
(FF 
indexFF 
>=FF 
$numFF 
&&FF 
indexFF #
<FF$ %
	m_SpritesFF& /
.FF/ 0
LengthFF0 6
&&FF7 9
	TileValueFF: C
(FFC D
tileMapFFD K
,FFK L
locationFFM U
)FFU V
)FFV W
{GG 
tileDataHH 
.HH 
spriteHH 
=HH  !
	m_SpritesHH" +
[HH+ ,
indexHH, 1
]HH1 2
;HH2 3
tileDataII 
.II 
	transformII "
=II# $
GetTransformII% 1
(II1 2
(II2 3
byteII3 7
)II7 8
maskII8 <
)II< =
;II= >
tileDataJJ 
.JJ 
colorJJ 
=JJ  
ColorJJ! &
.JJ& '
whiteJJ' ,
;JJ, -
tileDataKK 
.KK 
flagsKK 
=KK  
	TileFlagsKK! *
.KK* +
LockTransformKK+ 8
|KK9 :
	TileFlagsKK; D
.KKD E
	LockColorKKE N
;KKN O
tileDataLL 
.LL 
colliderTypeLL %
=LL& '
TileLL( ,
.LL, -
ColliderTypeLL- 9
.LL9 :
SpriteLL: @
;LL@ A
}MM 
}NN 	
privatePP 
boolPP 
	TileValuePP 
(PP 
ITilemapPP '
tileMapPP( /
,PP/ 0

Vector3IntPP1 ;
positionPP< D
)PPD E
{QQ 	
TileBaseRR 
tileRR 
=RR 
tileMapRR #
.RR# $
GetTileRR$ +
(RR+ ,
positionRR, 4
)RR4 5
;RR5 6
returnSS 
(SS 
tileSS 
!=SS 
nullSS  
&&SS! #
tileSS$ (
==SS) +
thisSS, 0
)SS0 1
;SS1 2
}TT 	
privateVV 
intVV 
GetIndexVV 
(VV 
byteVV !
maskVV" &
)VV& '
{WW 	
switchXX 
(XX 
maskXX 
)XX 
{YY 
caseZZ 
$numZZ 
:ZZ 
returnZZ 
$numZZ  
;ZZ  !
case[[ 
$num[[ 
:[[ 
case\\ 
$num\\ 
:\\ 
case]] 
$num]] 
:]] 
case^^ 
$num^^ 
:^^ 
return^^ 
$num^^  !
;^^! "
case__ 
$num__ 
:__ 
case`` 
$num`` 
:`` 
caseaa 
$numaa 
:aa 
casebb 
$numbb 
:bb 
returnbb 
$numbb  !
;bb! "
casecc 
$numcc 
:cc 
casedd 
$numdd 
:dd 
caseee 
$numee 
:ee 
caseff 
$numff 
:ff 
returnff  
$numff! "
;ff" #
casegg 
$numgg 
:gg 
casehh 
$numhh 
:hh 
returnhh 
$numhh  !
;hh! "
caseii 
$numii 
:ii 
casejj 
$numjj 
:jj 
casekk 
$numkk 
:kk 
casell 
$numll 
:ll 
returnll 
$numll  !
;ll! "
casemm 
$nummm 
:mm 
casenn 
$numnn 
:nn 
caseoo 
$numoo 
:oo 
casepp 
$numpp 
:pp 
returnpp  
$numpp! "
;pp" #
caseqq 
$numqq 
:qq 
caserr 
$numrr 
:rr 
casess 
$numss 
:ss 
casett 
$numtt 
:tt 
returntt 
$numtt  !
;tt! "
caseuu 
$numuu 
:uu 
casevv 
$numvv 
:vv 
caseww 
$numww 
:ww 
casexx 
$numxx 
:xx 
returnxx  
$numxx! "
;xx" #
caseyy 
$numyy 
:yy 
returnyy 
$numyy  !
;yy! "
casezz 
$numzz 
:zz 
case{{ 
$num{{ 
:{{ 
case|| 
$num|| 
:|| 
case}} 
$num}} 
:}} 
return}}  
$num}}! #
;}}# $
case~~ 
$num~~ 
:~~ 
case 
$num 
: 
case
ÄÄ 
$num
ÄÄ 
:
ÄÄ 
case
ÅÅ 
$num
ÅÅ 
:
ÅÅ 
return
ÅÅ  
$num
ÅÅ! #
;
ÅÅ# $
case
ÇÇ 
$num
ÇÇ 
:
ÇÇ 
case
ÉÉ 
$num
ÉÉ 
:
ÉÉ 
return
ÉÉ  
$num
ÉÉ! #
;
ÉÉ# $
case
ÑÑ 
$num
ÑÑ 
:
ÑÑ 
case
ÖÖ 
$num
ÖÖ 
:
ÖÖ 
case
ÜÜ 
$num
ÜÜ 
:
ÜÜ 
case
áá 
$num
áá 
:
áá 
return
áá  
$num
áá! #
;
áá# $
case
àà 
$num
àà 
:
àà 
return
àà  
$num
àà! #
;
àà# $
}
ââ 
return
ää 
-
ää 
$num
ää 
;
ää 
}
ãã 	
private
çç 
	Matrix4x4
çç 
GetTransform
çç &
(
çç& '
byte
çç' +
mask
çç, 0
)
çç0 1
{
éé 	
switch
èè 
(
èè 
mask
èè 
)
èè 
{
êê 
case
ëë 
$num
ëë 
:
ëë 
case
íí 
$num
íí 
:
íí 
case
ìì 
$num
ìì 
:
ìì 
case
îî 
$num
îî 
:
îî 
case
ïï 
$num
ïï 
:
ïï 
case
ññ 
$num
ññ 
:
ññ 
case
óó 
$num
óó 
:
óó 
case
òò 
$num
òò 
:
òò 
case
ôô 
$num
ôô 
:
ôô 
case
öö 
$num
öö 
:
öö 
case
õõ 
$num
õõ 
:
õõ 
case
úú 
$num
úú 
:
úú 
return
ùù 
	Matrix4x4
ùù $
.
ùù$ %
TRS
ùù% (
(
ùù( )
Vector3
ùù) 0
.
ùù0 1
zero
ùù1 5
,
ùù5 6

Quaternion
ùù7 A
.
ùùA B
Euler
ùùB G
(
ùùG H
$num
ùùH J
,
ùùJ K
$num
ùùL N
,
ùùN O
-
ùùP Q
$num
ùùQ T
)
ùùT U
,
ùùU V
Vector3
ùùW ^
.
ùù^ _
one
ùù_ b
)
ùùb c
;
ùùc d
case
ûû 
$num
ûû 
:
ûû 
case
üü 
$num
üü 
:
üü 
case
†† 
$num
†† 
:
†† 
case
°° 
$num
°° 
:
°° 
case
¢¢ 
$num
¢¢ 
:
¢¢ 
case
££ 
$num
££ 
:
££ 
case
§§ 
$num
§§ 
:
§§ 
case
•• 
$num
•• 
:
•• 
case
¶¶ 
$num
¶¶ 
:
¶¶ 
case
ßß 
$num
ßß 
:
ßß 
return
®® 
	Matrix4x4
®® $
.
®®$ %
TRS
®®% (
(
®®( )
Vector3
®®) 0
.
®®0 1
zero
®®1 5
,
®®5 6

Quaternion
®®7 A
.
®®A B
Euler
®®B G
(
®®G H
$num
®®H J
,
®®J K
$num
®®L N
,
®®N O
-
®®P Q
$num
®®Q U
)
®®U V
,
®®V W
Vector3
®®X _
.
®®_ `
one
®®` c
)
®®c d
;
®®d e
case
©© 
$num
©© 
:
©© 
case
™™ 
$num
™™ 
:
™™ 
case
´´ 
$num
´´ 
:
´´ 
case
¨¨ 
$num
¨¨ 
:
¨¨ 
case
≠≠ 
$num
≠≠ 
:
≠≠ 
case
ÆÆ 
$num
ÆÆ 
:
ÆÆ 
case
ØØ 
$num
ØØ 
:
ØØ 
case
∞∞ 
$num
∞∞ 
:
∞∞ 
case
±± 
$num
±± 
:
±± 
case
≤≤ 
$num
≤≤ 
:
≤≤ 
return
≥≥ 
	Matrix4x4
≥≥ $
.
≥≥$ %
TRS
≥≥% (
(
≥≥( )
Vector3
≥≥) 0
.
≥≥0 1
zero
≥≥1 5
,
≥≥5 6

Quaternion
≥≥7 A
.
≥≥A B
Euler
≥≥B G
(
≥≥G H
$num
≥≥H J
,
≥≥J K
$num
≥≥L N
,
≥≥N O
-
≥≥P Q
$num
≥≥Q U
)
≥≥U V
,
≥≥V W
Vector3
≥≥X _
.
≥≥_ `
one
≥≥` c
)
≥≥c d
;
≥≥d e
}
¥¥ 
return
µµ 
	Matrix4x4
µµ 
.
µµ 
identity
µµ %
;
µµ% &
}
∂∂ 	
}
∑∑ 
[
∫∫ 
CustomEditor
∫∫ 
(
∫∫ 
typeof
∫∫ 
(
∫∫ 
TerrainTile
∫∫ $
)
∫∫$ %
)
∫∫% &
]
∫∫& '
public
ªª 

class
ªª 
TerrainTileEditor
ªª "
:
ªª# $
Editor
ªª% +
{
ºº 
private
ΩΩ 
TerrainTile
ΩΩ 
tile
ΩΩ  
{
ΩΩ! "
get
ΩΩ# &
{
ΩΩ' (
return
ΩΩ) /
(
ΩΩ0 1
target
ΩΩ1 7
as
ΩΩ8 :
TerrainTile
ΩΩ; F
)
ΩΩF G
;
ΩΩG H
}
ΩΩI J
}
ΩΩK L
public
øø 
void
øø 
OnEnable
øø 
(
øø 
)
øø 
{
¿¿ 	
if
¡¡ 
(
¡¡ 
tile
¡¡ 
.
¡¡ 
	m_Sprites
¡¡ 
==
¡¡ !
null
¡¡" &
||
¡¡' )
tile
¡¡* .
.
¡¡. /
	m_Sprites
¡¡/ 8
.
¡¡8 9
Length
¡¡9 ?
!=
¡¡@ B
$num
¡¡C E
)
¡¡E F
{
¬¬ 
tile
√√ 
.
√√ 
	m_Sprites
√√ 
=
√√  
new
√√! $
Sprite
√√% +
[
√√+ ,
$num
√√, .
]
√√. /
;
√√/ 0
EditorUtility
ƒƒ 
.
ƒƒ 
SetDirty
ƒƒ &
(
ƒƒ& '
tile
ƒƒ' +
)
ƒƒ+ ,
;
ƒƒ, -
}
≈≈ 
}
∆∆ 	
public
…… 
override
…… 
void
…… 
OnInspectorGUI
…… +
(
……+ ,
)
……, -
{
   	
EditorGUILayout
ÀÀ 
.
ÀÀ 

LabelField
ÀÀ &
(
ÀÀ& '
$str
ÀÀ' a
)
ÀÀa b
;
ÀÀb c
EditorGUILayout
ÃÃ 
.
ÃÃ 
Space
ÃÃ !
(
ÃÃ! "
)
ÃÃ" #
;
ÃÃ# $
float
ŒŒ 
oldLabelWidth
ŒŒ 
=
ŒŒ  !
EditorGUIUtility
ŒŒ" 2
.
ŒŒ2 3

labelWidth
ŒŒ3 =
;
ŒŒ= >
EditorGUIUtility
œœ 
.
œœ 

labelWidth
œœ '
=
œœ( )
$num
œœ* -
;
œœ- .
	EditorGUI
—— 
.
—— 
BeginChangeCheck
—— &
(
——& '
)
——' (
;
——( )
tile
““ 
.
““ 
	m_Sprites
““ 
[
““ 
$num
““ 
]
““ 
=
““ 
(
““  !
Sprite
““! '
)
““' (
EditorGUILayout
““) 8
.
““8 9
ObjectField
““9 D
(
““D E
$str
““E M
,
““M N
tile
““O S
.
““S T
	m_Sprites
““T ]
[
““] ^
$num
““^ _
]
““_ `
,
““` a
typeof
““b h
(
““h i
Sprite
““i o
)
““o p
,
““p q
false
““r w
,
““w x
null
““y }
)
““} ~
;
““~ 
tile
”” 
.
”” 
	m_Sprites
”” 
[
”” 
$num
”” 
]
”” 
=
”” 
(
””  !
Sprite
””! '
)
””' (
EditorGUILayout
””) 8
.
””8 9
ObjectField
””9 D
(
””D E
$str
””E R
,
””R S
tile
””T X
.
””X Y
	m_Sprites
””Y b
[
””b c
$num
””c d
]
””d e
,
””e f
typeof
””g m
(
””m n
Sprite
””n t
)
””t u
,
””u v
false
””w |
,
””| }
null””~ Ç
)””Ç É
;””É Ñ
tile
‘‘ 
.
‘‘ 
	m_Sprites
‘‘ 
[
‘‘ 
$num
‘‘ 
]
‘‘ 
=
‘‘ 
(
‘‘  !
Sprite
‘‘! '
)
‘‘' (
EditorGUILayout
‘‘) 8
.
‘‘8 9
ObjectField
‘‘9 D
(
‘‘D E
$str
‘‘E _
,
‘‘_ `
tile
‘‘a e
.
‘‘e f
	m_Sprites
‘‘f o
[
‘‘o p
$num
‘‘p q
]
‘‘q r
,
‘‘r s
typeof
‘‘t z
(
‘‘z {
Sprite‘‘{ Å
)‘‘Å Ç
,‘‘Ç É
false‘‘Ñ â
,‘‘â ä
null‘‘ã è
)‘‘è ê
;‘‘ê ë
tile
’’ 
.
’’ 
	m_Sprites
’’ 
[
’’ 
$num
’’ 
]
’’ 
=
’’ 
(
’’  !
Sprite
’’! '
)
’’' (
EditorGUILayout
’’) 8
.
’’8 9
ObjectField
’’9 D
(
’’D E
$str
’’E Y
,
’’Y Z
tile
’’[ _
.
’’_ `
	m_Sprites
’’` i
[
’’i j
$num
’’j k
]
’’k l
,
’’l m
typeof
’’n t
(
’’t u
Sprite
’’u {
)
’’{ |
,
’’| }
false’’~ É
,’’É Ñ
null’’Ö â
)’’â ä
;’’ä ã
tile
÷÷ 
.
÷÷ 
	m_Sprites
÷÷ 
[
÷÷ 
$num
÷÷ 
]
÷÷ 
=
÷÷ 
(
÷÷  !
Sprite
÷÷! '
)
÷÷' (
EditorGUILayout
÷÷) 8
.
÷÷8 9
ObjectField
÷÷9 D
(
÷÷D E
$str
÷÷E Y
,
÷÷Y Z
tile
÷÷[ _
.
÷÷_ `
	m_Sprites
÷÷` i
[
÷÷i j
$num
÷÷j k
]
÷÷k l
,
÷÷l m
typeof
÷÷n t
(
÷÷t u
Sprite
÷÷u {
)
÷÷{ |
,
÷÷| }
false÷÷~ É
,÷÷É Ñ
null÷÷Ö â
)÷÷â ä
;÷÷ä ã
tile
◊◊ 
.
◊◊ 
	m_Sprites
◊◊ 
[
◊◊ 
$num
◊◊ 
]
◊◊ 
=
◊◊ 
(
◊◊  !
Sprite
◊◊! '
)
◊◊' (
EditorGUILayout
◊◊) 8
.
◊◊8 9
ObjectField
◊◊9 D
(
◊◊D E
$str
◊◊E _
,
◊◊_ `
tile
◊◊a e
.
◊◊e f
	m_Sprites
◊◊f o
[
◊◊o p
$num
◊◊p q
]
◊◊q r
,
◊◊r s
typeof
◊◊t z
(
◊◊z {
Sprite◊◊{ Å
)◊◊Å Ç
,◊◊Ç É
false◊◊Ñ â
,◊◊â ä
null◊◊ã è
)◊◊è ê
;◊◊ê ë
tile
ÿÿ 
.
ÿÿ 
	m_Sprites
ÿÿ 
[
ÿÿ 
$num
ÿÿ 
]
ÿÿ 
=
ÿÿ 
(
ÿÿ  !
Sprite
ÿÿ! '
)
ÿÿ' (
EditorGUILayout
ÿÿ) 8
.
ÿÿ8 9
ObjectField
ÿÿ9 D
(
ÿÿD E
$str
ÿÿE d
,
ÿÿd e
tile
ÿÿf j
.
ÿÿj k
	m_Sprites
ÿÿk t
[
ÿÿt u
$num
ÿÿu v
]
ÿÿv w
,
ÿÿw x
typeof
ÿÿy 
(ÿÿ Ä
SpriteÿÿÄ Ü
)ÿÿÜ á
,ÿÿá à
falseÿÿâ é
,ÿÿé è
nullÿÿê î
)ÿÿî ï
;ÿÿï ñ
tile
ŸŸ 
.
ŸŸ 
	m_Sprites
ŸŸ 
[
ŸŸ 
$num
ŸŸ 
]
ŸŸ 
=
ŸŸ 
(
ŸŸ  !
Sprite
ŸŸ! '
)
ŸŸ' (
EditorGUILayout
ŸŸ) 8
.
ŸŸ8 9
ObjectField
ŸŸ9 D
(
ŸŸD E
$str
ŸŸE d
,
ŸŸd e
tile
ŸŸf j
.
ŸŸj k
	m_Sprites
ŸŸk t
[
ŸŸt u
$num
ŸŸu v
]
ŸŸv w
,
ŸŸw x
typeof
ŸŸy 
(ŸŸ Ä
SpriteŸŸÄ Ü
)ŸŸÜ á
,ŸŸá à
falseŸŸâ é
,ŸŸé è
nullŸŸê î
)ŸŸî ï
;ŸŸï ñ
tile
⁄⁄ 
.
⁄⁄ 
	m_Sprites
⁄⁄ 
[
⁄⁄ 
$num
⁄⁄ 
]
⁄⁄ 
=
⁄⁄ 
(
⁄⁄  !
Sprite
⁄⁄! '
)
⁄⁄' (
EditorGUILayout
⁄⁄) 8
.
⁄⁄8 9
ObjectField
⁄⁄9 D
(
⁄⁄D E
$str
⁄⁄E O
,
⁄⁄O P
tile
⁄⁄Q U
.
⁄⁄U V
	m_Sprites
⁄⁄V _
[
⁄⁄_ `
$num
⁄⁄` a
]
⁄⁄a b
,
⁄⁄b c
typeof
⁄⁄d j
(
⁄⁄j k
Sprite
⁄⁄k q
)
⁄⁄q r
,
⁄⁄r s
false
⁄⁄t y
,
⁄⁄y z
null
⁄⁄{ 
)⁄⁄ Ä
;⁄⁄Ä Å
tile
€€ 
.
€€ 
	m_Sprites
€€ 
[
€€ 
$num
€€ 
]
€€ 
=
€€ 
(
€€  !
Sprite
€€! '
)
€€' (
EditorGUILayout
€€) 8
.
€€8 9
ObjectField
€€9 D
(
€€D E
$str
€€E S
,
€€S T
tile
€€U Y
.
€€Y Z
	m_Sprites
€€Z c
[
€€c d
$num
€€d e
]
€€e f
,
€€f g
typeof
€€h n
(
€€n o
Sprite
€€o u
)
€€u v
,
€€v w
false
€€x }
,
€€} ~
null€€ É
)€€É Ñ
;€€Ñ Ö
tile
‹‹ 
.
‹‹ 
	m_Sprites
‹‹ 
[
‹‹ 
$num
‹‹ 
]
‹‹ 
=
‹‹  
(
‹‹! "
Sprite
‹‹" (
)
‹‹( )
EditorGUILayout
‹‹* 9
.
‹‹9 :
ObjectField
‹‹: E
(
‹‹E F
$str
‹‹F U
,
‹‹U V
tile
‹‹W [
.
‹‹[ \
	m_Sprites
‹‹\ e
[
‹‹e f
$num
‹‹f h
]
‹‹h i
,
‹‹i j
typeof
‹‹k q
(
‹‹q r
Sprite
‹‹r x
)
‹‹x y
,
‹‹y z
false‹‹{ Ä
,‹‹Ä Å
null‹‹Ç Ü
)‹‹Ü á
;‹‹á à
tile
›› 
.
›› 
	m_Sprites
›› 
[
›› 
$num
›› 
]
›› 
=
››  
(
››! "
Sprite
››" (
)
››( )
EditorGUILayout
››* 9
.
››9 :
ObjectField
››: E
(
››E F
$str
››F \
,
››\ ]
tile
››^ b
.
››b c
	m_Sprites
››c l
[
››l m
$num
››m o
]
››o p
,
››p q
typeof
››r x
(
››x y
Sprite
››y 
)›› Ä
,››Ä Å
false››Ç á
,››á à
null››â ç
)››ç é
;››é è
tile
ﬁﬁ 
.
ﬁﬁ 
	m_Sprites
ﬁﬁ 
[
ﬁﬁ 
$num
ﬁﬁ 
]
ﬁﬁ 
=
ﬁﬁ  
(
ﬁﬁ! "
Sprite
ﬁﬁ" (
)
ﬁﬁ( )
EditorGUILayout
ﬁﬁ* 9
.
ﬁﬁ9 :
ObjectField
ﬁﬁ: E
(
ﬁﬁE F
$str
ﬁﬁF \
,
ﬁﬁ\ ]
tile
ﬁﬁ^ b
.
ﬁﬁb c
	m_Sprites
ﬁﬁc l
[
ﬁﬁl m
$num
ﬁﬁm o
]
ﬁﬁo p
,
ﬁﬁp q
typeof
ﬁﬁr x
(
ﬁﬁx y
Sprite
ﬁﬁy 
)ﬁﬁ Ä
,ﬁﬁÄ Å
falseﬁﬁÇ á
,ﬁﬁá à
nullﬁﬁâ ç
)ﬁﬁç é
;ﬁﬁé è
tile
ﬂﬂ 
.
ﬂﬂ 
	m_Sprites
ﬂﬂ 
[
ﬂﬂ 
$num
ﬂﬂ 
]
ﬂﬂ 
=
ﬂﬂ  
(
ﬂﬂ! "
Sprite
ﬂﬂ" (
)
ﬂﬂ( )
EditorGUILayout
ﬂﬂ* 9
.
ﬂﬂ9 :
ObjectField
ﬂﬂ: E
(
ﬂﬂE F
$str
ﬂﬂF R
,
ﬂﬂR S
tile
ﬂﬂT X
.
ﬂﬂX Y
	m_Sprites
ﬂﬂY b
[
ﬂﬂb c
$num
ﬂﬂc e
]
ﬂﬂe f
,
ﬂﬂf g
typeof
ﬂﬂh n
(
ﬂﬂn o
Sprite
ﬂﬂo u
)
ﬂﬂu v
,
ﬂﬂv w
false
ﬂﬂx }
,
ﬂﬂ} ~
nullﬂﬂ É
)ﬂﬂÉ Ñ
;ﬂﬂÑ Ö
tile
‡‡ 
.
‡‡ 
	m_Sprites
‡‡ 
[
‡‡ 
$num
‡‡ 
]
‡‡ 
=
‡‡  
(
‡‡! "
Sprite
‡‡" (
)
‡‡( )
EditorGUILayout
‡‡* 9
.
‡‡9 :
ObjectField
‡‡: E
(
‡‡E F
$str
‡‡F M
,
‡‡M N
tile
‡‡O S
.
‡‡S T
	m_Sprites
‡‡T ]
[
‡‡] ^
$num
‡‡^ `
]
‡‡` a
,
‡‡a b
typeof
‡‡c i
(
‡‡i j
Sprite
‡‡j p
)
‡‡p q
,
‡‡q r
false
‡‡s x
,
‡‡x y
null
‡‡z ~
)
‡‡~ 
;‡‡ Ä
if
·· 
(
·· 
	EditorGUI
·· 
.
·· 
EndChangeCheck
·· (
(
··( )
)
··) *
)
··* +
EditorUtility
‚‚ 
.
‚‚ 
SetDirty
‚‚ &
(
‚‚& '
tile
‚‚' +
)
‚‚+ ,
;
‚‚, -
EditorGUIUtility
‰‰ 
.
‰‰ 

labelWidth
‰‰ '
=
‰‰( )
oldLabelWidth
‰‰* 7
;
‰‰7 8
}
ÂÂ 	
}
ÊÊ 
}ËË ∫K
®C:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Runtime\Tiles\WeightedRandomTile\WeightedRandomTile.cs
	namespace 	
UnityEngine
 
. 
Tilemaps 
{ 
[ 
Serializable 
] 
public 

struct 
WeightedSprite  
{ 
public 
Sprite 
Sprite 
; 
public 
int 
Weight 
; 
} 
[ 
Serializable 
] 
[ 
CreateAssetMenu 
( 
fileName 
= 
$str  :
,: ;
menuName< D
=E F
$strG c
)c d
]d e
public 

class 
WeightedRandomTile #
:$ %
Tile& *
{   
[$$ 	
SerializeField$$	 
]$$ 
public$$ 
WeightedSprite$$  .
[$$. /
]$$/ 0
Sprites$$1 8
;$$8 9
public,, 
override,, 
void,, 
GetTileData,, (
(,,( )

Vector3Int,,) 3
location,,4 <
,,,< =
ITilemap,,> F
tileMap,,G N
,,,N O
ref,,P S
TileData,,T \
tileData,,] e
),,e f
{-- 	
base.. 
... 
GetTileData.. 
(.. 
location.. %
,..% &
tileMap..' .
,... /
ref..0 3
tileData..4 <
)..< =
;..= >
if00 
(00 
Sprites00 
==00 
null00 
||00  "
Sprites00# *
.00* +
Length00+ 1
<=002 4
$num005 6
)006 7
return008 >
;00> ?
long22 
hash22 
=22 
location22  
.22  !
x22! "
;22" #
hash33 
=33 
hash33 
+33 
$num33 $
+33% &
(33' (
hash33( ,
<<33- /
$num330 2
)332 3
;333 4
hash44 
=44 
hash44 
+44 
$num44 $
^44% &
(44' (
hash44( ,
>>44- /
$num440 2
)442 3
;443 4
hash55 
^=55 
location55 
.55 
y55 
;55 
hash66 
=66 
hash66 
+66 
$num66 $
+66% &
(66' (
hash66( ,
<<66- /
$num660 1
)661 2
;662 3
hash77 
=77 
hash77 
+77 
$num77 $
^77% &
(77' (
hash77( ,
<<77- /
$num770 2
)772 3
;773 4
Random88 
.88 
	InitState88 
(88 
(88 
int88 !
)88! "
hash88# '
)88' (
;88( )
var;; 
cumulativeWeight;;  
=;;! "
$num;;# $
;;;$ %
foreach<< 
(<< 
var<< 

spriteInfo<< #
in<<$ &
Sprites<<' .
)<<. /
cumulativeWeight<<0 @
+=<<A C

spriteInfo<<D N
.<<N O
Weight<<O U
;<<U V
var?? 
randomWeight?? 
=?? 
Random?? %
.??% &
Range??& +
(??+ ,
$num??, -
,??- .
cumulativeWeight??/ ?
)??? @
;??@ A
foreach@@ 
(@@ 
var@@ 

spriteInfo@@ #
in@@$ &
Sprites@@' .
)@@. /
{@@0 1
randomWeightAA 
-=AA 

spriteInfoAA  *
.AA* +
WeightAA+ 1
;AA1 2
ifBB 
(BB 
randomWeightBB  
<BB! "
$numBB# $
)BB$ %
{BB& '
tileDataCC 
.CC 
spriteCC #
=CC$ %

spriteInfoCC& 0
.CC0 1
SpriteCC1 7
;CC7 8
breakDD 
;DD 
}EE 
}FF 
}GG 	
}HH 
[KK 
CustomEditorKK 
(KK 
typeofKK 
(KK 
WeightedRandomTileKK +
)KK+ ,
)KK, -
]KK- .
publicLL 

classLL $
WeightedRandomTileEditorLL )
:LL* +
EditorLL, 2
{MM 
privateNN 
SerializedPropertyNN "
m_ColorNN# *
;NN* +
privateOO 
SerializedPropertyOO "
m_ColliderTypeOO# 1
;OO1 2
privateQQ 
WeightedRandomTileQQ "
TileQQ# '
{QQ( )
getRR 
{RR 
returnRR 
targetRR 
asRR  "
WeightedRandomTileRR# 5
;RR5 6
}RR7 8
}SS 	
publicUU 
voidUU 
OnEnableUU 
(UU 
)UU 
{VV 	
m_ColorWW 
=WW 
serializedObjectWW &
.WW& '
FindPropertyWW' 3
(WW3 4
$strWW4 =
)WW= >
;WW> ?
m_ColliderTypeXX 
=XX 
serializedObjectXX -
.XX- .
FindPropertyXX. :
(XX: ;
$strXX; K
)XXK L
;XXL M
}YY 	
public[[ 
override[[ 
void[[ 
OnInspectorGUI[[ +
([[+ ,
)[[, -
{\\ 	
serializedObject]] 
.]] 
Update]] #
(]]# $
)]]$ %
;]]% &
	EditorGUI__ 
.__ 
BeginChangeCheck__ &
(__& '
)__' (
;__( )
intaa 
countaa 
=aa 
EditorGUILayoutaa '
.aa' (
DelayedIntFieldaa( 7
(aa7 8
$straa8 K
,aaK L
TileaaM Q
.aaQ R
SpritesaaR Y
!=aaZ \
nullaa] a
?aab c
Tileaad h
.aah i
Spritesaai p
.aap q
Lengthaaq w
:aax y
$numaaz {
)aa{ |
;aa| }
ifbb 
(bb 
countbb 
<bb 
$numbb 
)bb 
countcc 
=cc 
$numcc 
;cc 
ifee 
(ee 
Tileee 
.ee 
Spritesee 
==ee 
nullee  $
||ee% '
Tileee( ,
.ee, -
Spritesee- 4
.ee4 5
Lengthee5 ;
!=ee< >
countee? D
)eeD E
{ff 
Arraygg 
.gg 
Resizegg 
(gg 
refgg  
Tilegg! %
.gg% &
Spritesgg& -
,gg- .
countgg/ 4
)gg4 5
;gg5 6
}hh 
ifjj 
(jj 
countjj 
==jj 
$numjj 
)jj 
returnkk 
;kk 
EditorGUILayoutmm 
.mm 

LabelFieldmm &
(mm& '
$strmm' >
)mm> ?
;mm? @
EditorGUILayoutnn 
.nn 
Spacenn !
(nn! "
)nn" #
;nn# $
forpp 
(pp 
intpp 
ipp 
=pp 
$numpp 
;pp 
ipp 
<pp 
countpp  %
;pp% &
ipp' (
++pp( *
)pp* +
{qq 
Tilerr 
.rr 
Spritesrr 
[rr 
irr 
]rr 
.rr  
Spriterr  &
=rr' (
(rr) *
Spriterr* 0
)rr0 1
EditorGUILayoutrr2 A
.rrA B
ObjectFieldrrB M
(rrM N
$strrrN W
+rrX Y
(rrZ [
irr[ \
+rr] ^
$numrr_ `
)rr` a
,rra b
Tilerrc g
.rrg h
Spritesrrh o
[rro p
irrp q
]rrq r
.rrr s
Spriterrs y
,rry z
typeof	rr{ Å
(
rrÅ Ç
Sprite
rrÇ à
)
rrà â
,
rrâ ä
false
rrã ê
,
rrê ë
null
rrí ñ
)
rrñ ó
;
rró ò
Tiless 
.ss 
Spritesss 
[ss 
iss 
]ss 
.ss  
Weightss  &
=ss' (
EditorGUILayoutss) 8
.ss8 9
IntFieldss9 A
(ssA B
$strssB K
+ssL M
(ssN O
issO P
+ssQ R
$numssS T
)ssT U
,ssU V
TilessW [
.ss[ \
Spritesss\ c
[ssc d
issd e
]sse f
.ssf g
Weightssg m
)ssm n
;ssn o
}tt 
EditorGUILayoutvv 
.vv 
Spacevv !
(vv! "
)vv" #
;vv# $
EditorGUILayoutxx 
.xx 
PropertyFieldxx )
(xx) *
m_Colorxx* 1
)xx1 2
;xx2 3
EditorGUILayoutyy 
.yy 
PropertyFieldyy )
(yy) *
m_ColliderTypeyy* 8
)yy8 9
;yy9 :
if{{ 
({{ 
	EditorGUI{{ 
.{{ 
EndChangeCheck{{ (
({{( )
){{) *
){{* +
{|| 
EditorUtility}} 
.}} 
SetDirty}} &
(}}& '
Tile}}' +
)}}+ ,
;}}, -
serializedObject~~  
.~~  !#
ApplyModifiedProperties~~! 8
(~~8 9
)~~9 :
;~~: ;
} 
}
ÄÄ 	
}
ÅÅ 
}ÉÉ 