˘
£C:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Editor\Brushes\CoordinateBrush\CoordinateBrush.cs
	namespace 	
UnityEditor
 
. 
Tilemaps 
{ 
[		 
CustomGridBrush		 
(		 
true		 
,		 
false		  
,		  !
false		" '
,		' (
$str		) ;
)		; <
]		< =
[

 
CreateAssetMenu

 
(

 
fileName

 
=

 
$str

  6
,

6 7
menuName

8 @
=

A B
$str

C ]
)

] ^
]

^ _
public 

class 
CoordinateBrush  
:! "
	GridBrush# ,
{ 
} 
[ 
CustomEditor 
( 
typeof 
( 
CoordinateBrush (
)( )
)) *
]* +
public 

class !
CoordinateBrushEditor &
:' (
GridBrushEditor) 8
{ 
public 
override 
void 
OnPaintSceneGUI ,
(, -

GridLayout- 7
grid8 <
,< =

GameObject> H
brushTargetI T
,T U
	BoundsIntV _
position` h
,h i
GridBrushBasej w
.w x
Toolx |
tool	} Å
,
Å Ç
bool
É á
	executing
à ë
)
ë í
{ 	
base   
.   
OnPaintSceneGUI    
(    !
grid  ! %
,  % &
brushTarget  ' 2
,  2 3
position  4 <
,  < =
tool  > B
,  B C
	executing  D M
)  M N
;  N O
var"" 
	labelText"" 
="" 
$str"" #
+""$ %
position""& .
."". /
position""/ 7
;""7 8
if## 
(## 
position## 
.## 
size## 
.## 
x## 
>##  !
$num##" #
||##$ &
position##' /
.##/ 0
size##0 4
.##4 5
y##5 6
>##7 8
$num##9 :
)##: ;
{##< =
	labelText$$ 
+=$$ 
$str$$ &
+$$' (
position$$) 1
.$$1 2
size$$2 6
;$$6 7
}%% 
Handles'' 
.'' 
Label'' 
('' 
grid'' 
.'' 
CellToWorld'' *
(''* +
position''+ 3
.''3 4
position''4 <
)''< =
,''= >
	labelText''? H
)''H I
;''I J
}(( 	
})) 
}** Ê–
£C:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Editor\Brushes\GameObjectBrush\GameObjectBrush.cs
	namespace 	
UnityEditor
 
. 
Tilemaps 
{ 
[ 
CustomGridBrush 
( 
true 
, 
false  
,  !
false" '
,' (
$str) ;
); <
]< =
public 

class 
GameObjectBrush  
:! "
GridBrushBase# 0
{ 
[ 	
SerializeField	 
] 
[ 	
HideInInspector	 
] 
private 
	BrushCell 
[ 
] 
m_Cells #
;# $
[ 	
SerializeField	 
] 
[ 	
HideInInspector	 
] 
private 

Vector3Int 
m_Size !
;! "
[ 	
SerializeField	 
] 
[ 	
HideInInspector	 
] 
private 

Vector3Int 
m_Pivot "
;" #
[ 	
SerializeField	 
] 
[ 	
HideInInspector	 
] 
private 
bool  
m_CanChangeZPosition )
;) *
public!! 
Vector3!! 
m_Anchor!! 
=!!  !
new!!" %
Vector3!!& -
(!!- .
$num!!. 2
,!!2 3
$num!!4 8
,!!8 9
$num!!: >
)!!> ?
;!!? @
public$$ 

Vector3Int$$ 
size$$ 
{$$  
get$$! $
{$$% &
return$$' -
m_Size$$. 4
;$$4 5
}$$6 7
set$$8 ;
{$$< =
m_Size$$> D
=$$E F
value$$G L
;$$L M
SizeUpdated$$N Y
($$Y Z
)$$Z [
;$$[ \
}$$] ^
}$$_ `
public&& 

Vector3Int&& 
pivot&& 
{&&  !
get&&" %
{&&& '
return&&( .
m_Pivot&&/ 6
;&&6 7
}&&8 9
set&&: =
{&&> ?
m_Pivot&&@ G
=&&H I
value&&J O
;&&O P
}&&Q R
}&&S T
public(( 
	BrushCell(( 
[(( 
](( 
cells((  
{((! "
get((# &
{((' (
return(() /
m_Cells((0 7
;((7 8
}((9 :
}((; <
public** 
int** 
	cellCount** 
{** 
get** "
{**# $
return**% +
m_Cells**, 3
!=**4 6
null**7 ;
?**< =
m_Cells**> E
.**E F
Length**F L
:**M N
$num**O P
;**P Q
}**R S
}**T U
public,, 
bool,, 
canChangeZPosition,, &
{-- 	
get.. 
{.. 
return..  
m_CanChangeZPosition.. -
;..- .
}../ 0
set// 
{//  
m_CanChangeZPosition// &
=//' (
value//) .
;//. /
}//0 1
}00 	
public55 
GameObjectBrush55 
(55 
)55  
{66 	
Init77 
(77 

Vector3Int77 
.77 
one77 
,77  

Vector3Int77! +
.77+ ,
zero77, 0
)770 1
;771 2
SizeUpdated88 
(88 
)88 
;88 
}99 	
public?? 
void?? 
Init?? 
(?? 

Vector3Int?? #
size??$ (
)??( )
{@@ 	
InitAA 
(AA 
sizeAA 
,AA 

Vector3IntAA !
.AA! "
zeroAA" &
)AA& '
;AA' (
SizeUpdatedBB 
(BB 
)BB 
;BB 
}CC 	
publicHH 
voidHH 
InitHH 
(HH 

Vector3IntHH #
sizeHH$ (
,HH( )

Vector3IntHH* 4
pivotHH5 :
)HH: ;
{II 	
m_SizeJJ 
=JJ 
sizeJJ 
;JJ 
m_PivotKK 
=KK 
pivotKK 
;KK 
SizeUpdatedLL 
(LL 
)LL 
;LL 
}MM 	
publicVV 
overrideVV 
voidVV 
PaintVV "
(VV" #

GridLayoutVV# -

gridLayoutVV. 8
,VV8 9

GameObjectVV: D
brushTargetVVE P
,VVP Q

Vector3IntVVR \
positionVV] e
)VVe f
{WW 	
ifYY 
(YY 
brushTargetYY 
.YY 
layerYY !
==YY" $
$numYY% '
)YY' (
returnZZ 
;ZZ 

Vector3Int\\ 
min\\ 
=\\ 
position\\ %
-\\& '
pivot\\( -
;\\- .
	BoundsInt]] 
bounds]] 
=]] 
new]] "
	BoundsInt]]# ,
(]], -
min]]- 0
,]]0 1
m_Size]]2 8
)]]8 9
;]]9 :
BoxFill^^ 
(^^ 

gridLayout^^ 
,^^ 
brushTarget^^  +
,^^+ ,
bounds^^- 3
)^^3 4
;^^4 5
}__ 	
privateaa 
voidaa 
	PaintCellaa 
(aa 

GridLayoutaa )
gridaa* .
,aa. /

Vector3Intaa0 :
positionaa; C
,aaC D
	TransformaaE N
parentaaO U
,aaU V
	BrushCellaaW `
cellaaa e
)aae f
{bb 	
ifcc 
(cc 
cellcc 
.cc 

gameObjectcc 
!=cc  "
nullcc# '
)cc' (
{dd 
SetSceneCellee 
(ee 
gridee !
,ee! "
parentee# )
,ee) *
positionee+ 3
,ee3 4
cellee5 9
.ee9 :

gameObjectee: D
,eeD E
celleeF J
.eeJ K
offseteeK Q
,eeQ R
celleeS W
.eeW X
scaleeeX ]
,ee] ^
cellee_ c
.eec d
orientationeed o
,eeo p
m_Anchoreeq y
)eey z
;eez {
}ff 
}gg 	
publicpp 
overridepp 
voidpp 
Erasepp "
(pp" #

GridLayoutpp# -

gridLayoutpp. 8
,pp8 9

GameObjectpp: D
brushTargetppE P
,ppP Q

Vector3IntppR \
positionpp] e
)ppe f
{qq 	
ifss 
(ss 
brushTargetss 
.ss 
layerss !
==ss" $
$numss% '
)ss' (
returntt 
;tt 

Vector3Intvv 
minvv 
=vv 
positionvv %
-vv& '
pivotvv( -
;vv- .
	BoundsIntww 
boundsww 
=ww 
newww "
	BoundsIntww# ,
(ww, -
minww- 0
,ww0 1
m_Sizeww2 8
)ww8 9
;ww9 :
BoxErasexx 
(xx 

gridLayoutxx 
,xx  
brushTargetxx! ,
,xx, -
boundsxx. 4
)xx4 5
;xx5 6
}yy 	
private{{ 
void{{ 
	EraseCell{{ 
({{ 

GridLayout{{ )
grid{{* .
,{{. /

Vector3Int{{0 :
position{{; C
,{{C D
	Transform{{E N
parent{{O U
){{U V
{|| 	
ClearSceneCell}} 
(}} 
grid}} 
,}}  
parent}}! '
,}}' (
position}}) 1
)}}1 2
;}}2 3
}~~ 	
public
áá 
override
áá 
void
áá 
BoxFill
áá $
(
áá$ %

GridLayout
áá% /

gridLayout
áá0 :
,
áá: ;

GameObject
áá< F
brushTarget
ááG R
,
ááR S
	BoundsInt
ááT ]
position
áá^ f
)
ááf g
{
àà 	
if
ää 
(
ää 
brushTarget
ää 
.
ää 
layer
ää !
==
ää" $
$num
ää% '
)
ää' (
return
ãã 
;
ãã 
if
çç 
(
çç 
brushTarget
çç 
==
çç 
null
çç #
)
çç# $
return
éé 
;
éé 
foreach
êê 
(
êê 

Vector3Int
êê 
location
êê  (
in
êê) +
position
êê, 4
.
êê4 5 
allPositionsWithin
êê5 G
)
êêG H
{
ëë 

Vector3Int
íí 
local
íí  
=
íí! "
location
íí# +
-
íí, -
position
íí. 6
.
íí6 7
min
íí7 :
;
íí: ;
	BrushCell
ìì 
cell
ìì 
=
ìì  
m_Cells
ìì! (
[
ìì( )$
GetCellIndexWrapAround
ìì) ?
(
ìì? @
local
ìì@ E
.
ììE F
x
ììF G
,
ììG H
local
ììI N
.
ììN O
y
ììO P
,
ììP Q
local
ììR W
.
ììW X
z
ììX Y
)
ììY Z
]
ììZ [
;
ìì[ \
	PaintCell
îî 
(
îî 

gridLayout
îî $
,
îî$ %
location
îî& .
,
îî. /
brushTarget
îî0 ;
.
îî; <
	transform
îî< E
,
îîE F
cell
îîG K
)
îîK L
;
îîL M
}
ïï 
}
ññ 	
public
üü 
override
üü 
void
üü 
BoxErase
üü %
(
üü% &

GridLayout
üü& 0

gridLayout
üü1 ;
,
üü; <

GameObject
üü= G
brushTarget
üüH S
,
üüS T
	BoundsInt
üüU ^
position
üü_ g
)
üüg h
{
†† 	
if
¢¢ 
(
¢¢ 
brushTarget
¢¢ 
.
¢¢ 
layer
¢¢ !
==
¢¢" $
$num
¢¢% '
)
¢¢' (
return
££ 
;
££ 
if
•• 
(
•• 
brushTarget
•• 
==
•• 
null
•• #
)
••# $
return
¶¶ 
;
¶¶ 
foreach
®® 
(
®® 

Vector3Int
®® 
location
®®  (
in
®®) +
position
®®, 4
.
®®4 5 
allPositionsWithin
®®5 G
)
®®G H
{
©© 
	EraseCell
™™ 
(
™™ 

gridLayout
™™ $
,
™™$ %
location
™™& .
,
™™. /
brushTarget
™™0 ;
.
™™; <
	transform
™™< E
)
™™E F
;
™™F G
}
´´ 
}
¨¨ 	
public
¥¥ 
override
¥¥ 
void
¥¥ 
	FloodFill
¥¥ &
(
¥¥& '

GridLayout
¥¥' 1

gridLayout
¥¥2 <
,
¥¥< =

GameObject
¥¥> H
brushTarget
¥¥I T
,
¥¥T U

Vector3Int
¥¥V `
position
¥¥a i
)
¥¥i j
{
µµ 	
Debug
∂∂ 
.
∂∂ 

LogWarning
∂∂ 
(
∂∂ 
$str
∂∂ 6
)
∂∂6 7
;
∂∂7 8
}
∑∑ 	
public
ææ 
override
ææ 
void
ææ 
Rotate
ææ #
(
ææ# $
RotationDirection
ææ$ 5
	direction
ææ6 ?
,
ææ? @
Grid
ææA E
.
ææE F

CellLayout
ææF P
layout
ææQ W
)
ææW X
{
øø 	

Vector3Int
¿¿ 
oldSize
¿¿ 
=
¿¿  
m_Size
¿¿! '
;
¿¿' (
	BrushCell
¡¡ 
[
¡¡ 
]
¡¡ 
oldCells
¡¡  
=
¡¡! "
m_Cells
¡¡# *
.
¡¡* +
Clone
¡¡+ 0
(
¡¡0 1
)
¡¡1 2
as
¡¡3 5
	BrushCell
¡¡6 ?
[
¡¡? @
]
¡¡@ A
;
¡¡A B
size
¬¬ 
=
¬¬ 
new
¬¬ 

Vector3Int
¬¬ !
(
¬¬! "
oldSize
¬¬" )
.
¬¬) *
y
¬¬* +
,
¬¬+ ,
oldSize
¬¬- 4
.
¬¬4 5
x
¬¬5 6
,
¬¬6 7
oldSize
¬¬8 ?
.
¬¬? @
z
¬¬@ A
)
¬¬A B
;
¬¬B C
	BoundsInt
√√ 
	oldBounds
√√ 
=
√√  !
new
√√" %
	BoundsInt
√√& /
(
√√/ 0

Vector3Int
√√0 :
.
√√: ;
zero
√√; ?
,
√√? @
oldSize
√√A H
)
√√H I
;
√√I J
foreach
≈≈ 
(
≈≈ 

Vector3Int
≈≈ 
oldPos
≈≈  &
in
≈≈' )
	oldBounds
≈≈* 3
.
≈≈3 4 
allPositionsWithin
≈≈4 F
)
≈≈F G
{
∆∆ 
int
«« 
newX
«« 
=
«« 
	direction
«« $
==
««% '
RotationDirection
««( 9
.
««9 :
	Clockwise
««: C
?
««D E
oldSize
««F M
.
««M N
y
««N O
-
««P Q
oldPos
««R X
.
««X Y
y
««Y Z
-
««[ \
$num
««] ^
:
««_ `
oldPos
««a g
.
««g h
y
««h i
;
««i j
int
»» 
newY
»» 
=
»» 
	direction
»» $
==
»»% '
RotationDirection
»»( 9
.
»»9 :
	Clockwise
»»: C
?
»»D E
oldPos
»»F L
.
»»L M
x
»»M N
:
»»O P
oldSize
»»Q X
.
»»X Y
x
»»Y Z
-
»»[ \
oldPos
»»] c
.
»»c d
x
»»d e
-
»»f g
$num
»»h i
;
»»i j
int
…… 
toIndex
…… 
=
…… 
GetCellIndex
…… *
(
……* +
newX
……+ /
,
……/ 0
newY
……1 5
,
……5 6
oldPos
……7 =
.
……= >
z
……> ?
)
……? @
;
……@ A
int
   
	fromIndex
   
=
   
GetCellIndex
    ,
(
  , -
oldPos
  - 3
.
  3 4
x
  4 5
,
  5 6
oldPos
  7 =
.
  = >
y
  > ?
,
  ? @
oldPos
  A G
.
  G H
z
  H I
,
  I J
oldSize
  K R
.
  R S
x
  S T
,
  T U
oldSize
  V ]
.
  ] ^
y
  ^ _
,
  _ `
oldSize
  a h
.
  h i
z
  i j
)
  j k
;
  k l
m_Cells
ÀÀ 
[
ÀÀ 
toIndex
ÀÀ 
]
ÀÀ  
=
ÀÀ! "
oldCells
ÀÀ# +
[
ÀÀ+ ,
	fromIndex
ÀÀ, 5
]
ÀÀ5 6
;
ÀÀ6 7
}
ÃÃ 
int
ŒŒ 
	newPivotX
ŒŒ 
=
ŒŒ 
	direction
ŒŒ %
==
ŒŒ& (
RotationDirection
ŒŒ) :
.
ŒŒ: ;
	Clockwise
ŒŒ; D
?
ŒŒE F
oldSize
ŒŒG N
.
ŒŒN O
y
ŒŒO P
-
ŒŒQ R
pivot
ŒŒS X
.
ŒŒX Y
y
ŒŒY Z
-
ŒŒ[ \
$num
ŒŒ] ^
:
ŒŒ_ `
pivot
ŒŒa f
.
ŒŒf g
y
ŒŒg h
;
ŒŒh i
int
œœ 
	newPivotY
œœ 
=
œœ 
	direction
œœ %
==
œœ& (
RotationDirection
œœ) :
.
œœ: ;
	Clockwise
œœ; D
?
œœE F
pivot
œœG L
.
œœL M
x
œœM N
:
œœO P
oldSize
œœQ X
.
œœX Y
x
œœY Z
-
œœ[ \
pivot
œœ] b
.
œœb c
x
œœc d
-
œœe f
$num
œœg h
;
œœh i
pivot
–– 
=
–– 
new
–– 

Vector3Int
–– "
(
––" #
	newPivotX
––# ,
,
––, -
	newPivotY
––. 7
,
––7 8
pivot
––9 >
.
––> ?
z
––? @
)
––@ A
;
––A B
	Matrix4x4
““ 
rotation
““ 
=
““  
	Matrix4x4
““! *
.
““* +
TRS
““+ .
(
““. /
Vector3
““/ 6
.
““6 7
zero
““7 ;
,
““; <

Quaternion
““= G
.
““G H
Euler
““H M
(
““M N
$num
““N P
,
““P Q
$num
““R T
,
““T U
	direction
““V _
==
““` b
RotationDirection
““c t
.
““t u
	Clockwise
““u ~
?““ Ä
$num““Å Ñ
:““Ö Ü
-““á à
$num““à ã
)““ã å
,““å ç
Vector3““é ï
.““ï ñ
one““ñ ô
)““ô ö
;““ö õ

Quaternion
”” 
orientation
”” "
=
””# $

Quaternion
””% /
.
””/ 0
Euler
””0 5
(
””5 6
$num
””6 8
,
””8 9
$num
””: <
,
””< =
	direction
””> G
==
””H J
RotationDirection
””K \
.
””\ ]
	Clockwise
””] f
?
””g h
$num
””i l
:
””m n
-
””o p
$num
””p s
)
””s t
;
””t u
foreach
‘‘ 
(
‘‘ 
	BrushCell
‘‘ 
cell
‘‘ #
in
‘‘$ &
m_Cells
‘‘' .
)
‘‘. /
{
’’ 
cell
÷÷ 
.
÷÷ 
offset
÷÷ 
=
÷÷ 
rotation
÷÷ &
*
÷÷' (
cell
÷÷) -
.
÷÷- .
offset
÷÷. 4
;
÷÷4 5
cell
◊◊ 
.
◊◊ 
orientation
◊◊  
=
◊◊! "
cell
◊◊# '
.
◊◊' (
orientation
◊◊( 3
*
◊◊4 5
orientation
◊◊6 A
;
◊◊A B
}
ÿÿ 
}
ŸŸ 	
public
ﬁﬁ 
override
ﬁﬁ 
void
ﬁﬁ 
Flip
ﬁﬁ !
(
ﬁﬁ! "
FlipAxis
ﬁﬁ" *
flip
ﬁﬁ+ /
,
ﬁﬁ/ 0
Grid
ﬁﬁ1 5
.
ﬁﬁ5 6

CellLayout
ﬁﬁ6 @
layout
ﬁﬁA G
)
ﬁﬁG H
{
ﬂﬂ 	
if
‡‡ 
(
‡‡ 
flip
‡‡ 
==
‡‡ 
FlipAxis
‡‡  
.
‡‡  !
X
‡‡! "
)
‡‡" #
FlipX
·· 
(
·· 
)
·· 
;
·· 
else
‚‚ 
FlipY
„„ 
(
„„ 
)
„„ 
;
„„ 
}
‰‰ 	
public
ÓÓ 
override
ÓÓ 
void
ÓÓ 
Pick
ÓÓ !
(
ÓÓ! "

GridLayout
ÓÓ" ,

gridLayout
ÓÓ- 7
,
ÓÓ7 8

GameObject
ÓÓ9 C
brushTarget
ÓÓD O
,
ÓÓO P
	BoundsInt
ÓÓQ Z
position
ÓÓ[ c
,
ÓÓc d

Vector3Int
ÓÓe o
pivot
ÓÓp u
)
ÓÓu v
{
ÔÔ 	
if
ÒÒ 
(
ÒÒ 
brushTarget
ÒÒ 
.
ÒÒ 
layer
ÒÒ !
==
ÒÒ" $
$num
ÒÒ% '
)
ÒÒ' (
return
ÚÚ 
;
ÚÚ 
Reset
ÙÙ 
(
ÙÙ 
)
ÙÙ 
;
ÙÙ  
UpdateSizeAndPivot
ıı 
(
ıı 
new
ıı "

Vector3Int
ıı# -
(
ıı- .
position
ıı. 6
.
ıı6 7
size
ıı7 ;
.
ıı; <
x
ıı< =
,
ıı= >
position
ıı? G
.
ııG H
size
ııH L
.
ııL M
y
ııM N
,
ııN O
$num
ııP Q
)
ııQ R
,
ııR S
new
ııT W

Vector3Int
ııX b
(
ııb c
pivot
ııc h
.
ııh i
x
ııi j
,
ııj k
pivot
ııl q
.
ııq r
y
ıır s
,
ııs t
$num
ııu v
)
ııv w
)
ııw x
;
ııx y
foreach
˜˜ 
(
˜˜ 

Vector3Int
˜˜ 
pos
˜˜  #
in
˜˜$ &
position
˜˜' /
.
˜˜/ 0 
allPositionsWithin
˜˜0 B
)
˜˜B C
{
¯¯ 

Vector3Int
˘˘ 
brushPosition
˘˘ (
=
˘˘) *
new
˘˘+ .

Vector3Int
˘˘/ 9
(
˘˘9 :
pos
˘˘: =
.
˘˘= >
x
˘˘> ?
-
˘˘@ A
position
˘˘B J
.
˘˘J K
x
˘˘K L
,
˘˘L M
pos
˘˘N Q
.
˘˘Q R
y
˘˘R S
-
˘˘T U
position
˘˘V ^
.
˘˘^ _
y
˘˘_ `
,
˘˘` a
$num
˘˘b c
)
˘˘c d
;
˘˘d e
PickCell
˙˙ 
(
˙˙ 
pos
˙˙ 
,
˙˙ 
brushPosition
˙˙ +
,
˙˙+ ,

gridLayout
˙˙- 7
,
˙˙7 8
brushTarget
˙˙9 D
.
˙˙D E
	transform
˙˙E N
)
˙˙N O
;
˙˙O P
}
˚˚ 
}
¸¸ 	
private
˛˛ 
void
˛˛ 
PickCell
˛˛ 
(
˛˛ 

Vector3Int
˛˛ (
position
˛˛) 1
,
˛˛1 2

Vector3Int
˛˛3 =
brushPosition
˛˛> K
,
˛˛K L

GridLayout
˛˛M W
grid
˛˛X \
,
˛˛\ ]
	Transform
˛˛^ g
parent
˛˛h n
)
˛˛n o
{
ˇˇ 	
if
ÄÄ 
(
ÄÄ 
parent
ÄÄ 
!=
ÄÄ 
null
ÄÄ 
)
ÄÄ 
{
ÅÅ 
Vector3
ÇÇ 

cellCenter
ÇÇ "
=
ÇÇ# $
grid
ÇÇ% )
.
ÇÇ) *
LocalToWorld
ÇÇ* 6
(
ÇÇ6 7
grid
ÇÇ7 ;
.
ÇÇ; <%
CellToLocalInterpolated
ÇÇ< S
(
ÇÇS T
position
ÇÇT \
+
ÇÇ] ^
m_Anchor
ÇÇ_ g
)
ÇÇg h
)
ÇÇh i
;
ÇÇi j

GameObject
ÉÉ 
go
ÉÉ 
=
ÉÉ 
GetObjectInCell
ÉÉ  /
(
ÉÉ/ 0
grid
ÉÉ0 4
,
ÉÉ4 5
parent
ÉÉ6 <
,
ÉÉ< =
position
ÉÉ> F
)
ÉÉF G
;
ÉÉG H
if
ÖÖ 
(
ÖÖ 
go
ÖÖ 
!=
ÖÖ 
null
ÖÖ 
)
ÖÖ 
{
ÜÜ 
Object
áá 
prefab
áá !
=
áá" #
PrefabUtility
áá$ 1
.
áá1 2.
 GetCorrespondingObjectFromSource
áá2 R
(
ááR S
go
ááS U
)
ááU V
;
ááV W
if
ââ 
(
ââ 
prefab
ââ 
)
ââ 
{
ää 
SetGameObject
ãã %
(
ãã% &
brushPosition
ãã& 3
,
ãã3 4
(
ãã5 6

GameObject
ãã6 @
)
ãã@ A
prefab
ããB H
)
ããH I
;
ããI J
}
åå 
else
çç 
{
éé 

GameObject
èè "
newInstance
èè# .
=
èè/ 0
Instantiate
èè1 <
(
èè< =
go
èè= ?
)
èè? @
;
èè@ A
newInstance
êê #
.
êê# $
	hideFlags
êê$ -
=
êê. /
	HideFlags
êê0 9
.
êê9 :
HideAndDontSave
êê: I
;
êêI J
SetGameObject
ëë %
(
ëë% &
brushPosition
ëë& 3
,
ëë3 4
newInstance
ëë5 @
)
ëë@ A
;
ëëA B
}
íí 
	SetOffset
îî 
(
îî 
brushPosition
îî +
,
îî+ ,
go
îî- /
.
îî/ 0
	transform
îî0 9
.
îî9 :
position
îî: B
-
îîC D

cellCenter
îîE O
)
îîO P
;
îîP Q
SetScale
ïï 
(
ïï 
brushPosition
ïï *
,
ïï* +
go
ïï, .
.
ïï. /
	transform
ïï/ 8
.
ïï8 9

localScale
ïï9 C
)
ïïC D
;
ïïD E
SetOrientation
ññ "
(
ññ" #
brushPosition
ññ# 0
,
ññ0 1
go
ññ2 4
.
ññ4 5
	transform
ññ5 >
.
ññ> ?
localRotation
ññ? L
)
ññL M
;
ññM N
}
óó 
}
òò 
}
ôô 	
public
¢¢ 
override
¢¢ 
void
¢¢ 
	MoveStart
¢¢ &
(
¢¢& '

GridLayout
¢¢' 1

gridLayout
¢¢2 <
,
¢¢< =

GameObject
¢¢> H
brushTarget
¢¢I T
,
¢¢T U
	BoundsInt
¢¢V _
position
¢¢` h
)
¢¢h i
{
££ 	
if
•• 
(
•• 
brushTarget
•• 
.
•• 
layer
•• !
==
••" $
$num
••% '
)
••' (
return
¶¶ 
;
¶¶ 
Reset
®® 
(
®® 
)
®® 
;
®®  
UpdateSizeAndPivot
©© 
(
©© 
new
©© "

Vector3Int
©©# -
(
©©- .
position
©©. 6
.
©©6 7
size
©©7 ;
.
©©; <
x
©©< =
,
©©= >
position
©©? G
.
©©G H
size
©©H L
.
©©L M
y
©©M N
,
©©N O
$num
©©P Q
)
©©Q R
,
©©R S

Vector3Int
©©T ^
.
©©^ _
zero
©©_ c
)
©©c d
;
©©d e
if
´´ 
(
´´ 
brushTarget
´´ 
!=
´´ 
null
´´ #
)
´´# $
{
¨¨ 
foreach
≠≠ 
(
≠≠ 

Vector3Int
≠≠ #
pos
≠≠$ '
in
≠≠( *
position
≠≠+ 3
.
≠≠3 4 
allPositionsWithin
≠≠4 F
)
≠≠F G
{
ÆÆ 

Vector3Int
ØØ 
brushPosition
ØØ ,
=
ØØ- .
new
ØØ/ 2

Vector3Int
ØØ3 =
(
ØØ= >
pos
ØØ> A
.
ØØA B
x
ØØB C
-
ØØD E
position
ØØF N
.
ØØN O
x
ØØO P
,
ØØP Q
pos
ØØR U
.
ØØU V
y
ØØV W
-
ØØX Y
position
ØØZ b
.
ØØb c
y
ØØc d
,
ØØd e
$num
ØØf g
)
ØØg h
;
ØØh i
PickCell
∞∞ 
(
∞∞ 
pos
∞∞  
,
∞∞  !
brushPosition
∞∞" /
,
∞∞/ 0

gridLayout
∞∞1 ;
,
∞∞; <
brushTarget
∞∞= H
.
∞∞H I
	transform
∞∞I R
)
∞∞R S
;
∞∞S T
ClearSceneCell
±± "
(
±±" #

gridLayout
±±# -
,
±±- .
brushTarget
±±/ :
.
±±: ;
	transform
±±; D
,
±±D E
brushPosition
±±F S
)
±±S T
;
±±T U
}
≤≤ 
}
≥≥ 
}
¥¥ 	
public
ΩΩ 
override
ΩΩ 
void
ΩΩ 
MoveEnd
ΩΩ $
(
ΩΩ$ %

GridLayout
ΩΩ% /

gridLayout
ΩΩ0 :
,
ΩΩ: ;

GameObject
ΩΩ< F
brushTarget
ΩΩG R
,
ΩΩR S
	BoundsInt
ΩΩT ]
position
ΩΩ^ f
)
ΩΩf g
{
ææ 	
if
¿¿ 
(
¿¿ 
brushTarget
¿¿ 
.
¿¿ 
layer
¿¿ !
==
¿¿" $
$num
¿¿% '
)
¿¿' (
return
¡¡ 
;
¡¡ 
Paint
√√ 
(
√√ 

gridLayout
√√ 
,
√√ 
brushTarget
√√ )
,
√√) *
position
√√+ 3
.
√√3 4
min
√√4 7
)
√√7 8
;
√√8 9
Reset
ƒƒ 
(
ƒƒ 
)
ƒƒ 
;
ƒƒ 
}
≈≈ 	
public
»» 
void
»» 
Reset
»» 
(
»» 
)
»» 
{
…… 	
foreach
   
(
   
var
   
cell
   
in
    
m_Cells
  ! (
)
  ( )
{
ÀÀ 
if
ÃÃ 
(
ÃÃ 
cell
ÃÃ 
.
ÃÃ 

gameObject
ÃÃ #
!=
ÃÃ$ &
null
ÃÃ' +
&&
ÃÃ, .
!
ÃÃ/ 0
EditorUtility
ÃÃ0 =
.
ÃÃ= >
IsPersistent
ÃÃ> J
(
ÃÃJ K
cell
ÃÃK O
.
ÃÃO P

gameObject
ÃÃP Z
)
ÃÃZ [
)
ÃÃ[ \
{
ÕÕ 
DestroyImmediate
ŒŒ $
(
ŒŒ$ %
cell
ŒŒ% )
.
ŒŒ) *

gameObject
ŒŒ* 4
)
ŒŒ4 5
;
ŒŒ5 6
}
œœ 
}
––  
UpdateSizeAndPivot
—— 
(
—— 

Vector3Int
—— )
.
——) *
one
——* -
,
——- .

Vector3Int
——/ 9
.
——9 :
zero
——: >
)
——> ?
;
——? @
}
““ 	
private
‘‘ 
void
‘‘ 
FlipX
‘‘ 
(
‘‘ 
)
‘‘ 
{
’’ 	
	BrushCell
÷÷ 
[
÷÷ 
]
÷÷ 
oldCells
÷÷  
=
÷÷! "
m_Cells
÷÷# *
.
÷÷* +
Clone
÷÷+ 0
(
÷÷0 1
)
÷÷1 2
as
÷÷3 5
	BrushCell
÷÷6 ?
[
÷÷? @
]
÷÷@ A
;
÷÷A B
	BoundsInt
◊◊ 
	oldBounds
◊◊ 
=
◊◊  !
new
◊◊" %
	BoundsInt
◊◊& /
(
◊◊/ 0

Vector3Int
◊◊0 :
.
◊◊: ;
zero
◊◊; ?
,
◊◊? @
m_Size
◊◊A G
)
◊◊G H
;
◊◊H I
foreach
ŸŸ 
(
ŸŸ 

Vector3Int
ŸŸ 
oldPos
ŸŸ  &
in
ŸŸ' )
	oldBounds
ŸŸ* 3
.
ŸŸ3 4 
allPositionsWithin
ŸŸ4 F
)
ŸŸF G
{
⁄⁄ 
int
€€ 
newX
€€ 
=
€€ 
m_Size
€€ !
.
€€! "
x
€€" #
-
€€$ %
oldPos
€€& ,
.
€€, -
x
€€- .
-
€€/ 0
$num
€€1 2
;
€€2 3
int
‹‹ 
toIndex
‹‹ 
=
‹‹ 
GetCellIndex
‹‹ *
(
‹‹* +
newX
‹‹+ /
,
‹‹/ 0
oldPos
‹‹1 7
.
‹‹7 8
y
‹‹8 9
,
‹‹9 :
oldPos
‹‹; A
.
‹‹A B
z
‹‹B C
)
‹‹C D
;
‹‹D E
int
›› 
	fromIndex
›› 
=
›› 
GetCellIndex
››  ,
(
››, -
oldPos
››- 3
)
››3 4
;
››4 5
m_Cells
ﬁﬁ 
[
ﬁﬁ 
toIndex
ﬁﬁ 
]
ﬁﬁ  
=
ﬁﬁ! "
oldCells
ﬁﬁ# +
[
ﬁﬁ+ ,
	fromIndex
ﬁﬁ, 5
]
ﬁﬁ5 6
;
ﬁﬁ6 7
}
ﬂﬂ 
int
·· 
	newPivotX
·· 
=
·· 
m_Size
·· "
.
··" #
x
··# $
-
··% &
pivot
··' ,
.
··, -
x
··- .
-
··/ 0
$num
··1 2
;
··2 3
pivot
‚‚ 
=
‚‚ 
new
‚‚ 

Vector3Int
‚‚ "
(
‚‚" #
	newPivotX
‚‚# ,
,
‚‚, -
pivot
‚‚. 3
.
‚‚3 4
y
‚‚4 5
,
‚‚5 6
pivot
‚‚7 <
.
‚‚< =
z
‚‚= >
)
‚‚> ?
;
‚‚? @
	Matrix4x4
„„ 
flip
„„ 
=
„„ 
	Matrix4x4
„„ &
.
„„& '
TRS
„„' *
(
„„* +
Vector3
„„+ 2
.
„„2 3
zero
„„3 7
,
„„7 8

Quaternion
„„9 C
.
„„C D
identity
„„D L
,
„„L M
new
„„N Q
Vector3
„„R Y
(
„„Y Z
-
„„Z [
$num
„„[ ]
,
„„] ^
$num
„„_ a
,
„„a b
$num
„„c e
)
„„e f
)
„„f g
;
„„g h

Quaternion
‰‰ 
orientation
‰‰ "
=
‰‰# $

Quaternion
‰‰% /
.
‰‰/ 0
Euler
‰‰0 5
(
‰‰5 6
$num
‰‰6 8
,
‰‰8 9
$num
‰‰: <
,
‰‰< =
-
‰‰> ?
$num
‰‰? C
)
‰‰C D
;
‰‰D E
foreach
ÊÊ 
(
ÊÊ 
	BrushCell
ÊÊ 
cell
ÊÊ #
in
ÊÊ$ &
m_Cells
ÊÊ' .
)
ÊÊ. /
{
ÁÁ 
Vector3
ËË 
	oldOffset
ËË !
=
ËË" #
cell
ËË$ (
.
ËË( )
offset
ËË) /
;
ËË/ 0
cell
ÈÈ 
.
ÈÈ 
offset
ÈÈ 
=
ÈÈ 
flip
ÈÈ "
*
ÈÈ# $
	oldOffset
ÈÈ% .
;
ÈÈ. /
cell
ÍÍ 
.
ÍÍ 
orientation
ÍÍ  
=
ÍÍ! "
cell
ÍÍ# '
.
ÍÍ' (
orientation
ÍÍ( 3
*
ÍÍ3 4
orientation
ÍÍ4 ?
;
ÍÍ? @
}
ÎÎ 
}
ÏÏ 	
private
ÓÓ 
void
ÓÓ 
FlipY
ÓÓ 
(
ÓÓ 
)
ÓÓ 
{
ÔÔ 	
	BrushCell
 
[
 
]
 
oldCells
  
=
! "
m_Cells
# *
.
* +
Clone
+ 0
(
0 1
)
1 2
as
3 5
	BrushCell
6 ?
[
? @
]
@ A
;
A B
	BoundsInt
ÒÒ 
	oldBounds
ÒÒ 
=
ÒÒ  !
new
ÒÒ" %
	BoundsInt
ÒÒ& /
(
ÒÒ/ 0

Vector3Int
ÒÒ0 :
.
ÒÒ: ;
zero
ÒÒ; ?
,
ÒÒ? @
m_Size
ÒÒA G
)
ÒÒG H
;
ÒÒH I
foreach
ÛÛ 
(
ÛÛ 

Vector3Int
ÛÛ 
oldPos
ÛÛ  &
in
ÛÛ' )
	oldBounds
ÛÛ* 3
.
ÛÛ3 4 
allPositionsWithin
ÛÛ4 F
)
ÛÛF G
{
ÙÙ 
int
ıı 
newY
ıı 
=
ıı 
m_Size
ıı !
.
ıı! "
y
ıı" #
-
ıı$ %
oldPos
ıı& ,
.
ıı, -
y
ıı- .
-
ıı/ 0
$num
ıı1 2
;
ıı2 3
int
ˆˆ 
toIndex
ˆˆ 
=
ˆˆ 
GetCellIndex
ˆˆ *
(
ˆˆ* +
oldPos
ˆˆ+ 1
.
ˆˆ1 2
x
ˆˆ2 3
,
ˆˆ3 4
newY
ˆˆ5 9
,
ˆˆ9 :
oldPos
ˆˆ; A
.
ˆˆA B
z
ˆˆB C
)
ˆˆC D
;
ˆˆD E
int
˜˜ 
	fromIndex
˜˜ 
=
˜˜ 
GetCellIndex
˜˜  ,
(
˜˜, -
oldPos
˜˜- 3
)
˜˜3 4
;
˜˜4 5
m_Cells
¯¯ 
[
¯¯ 
toIndex
¯¯ 
]
¯¯  
=
¯¯! "
oldCells
¯¯# +
[
¯¯+ ,
	fromIndex
¯¯, 5
]
¯¯5 6
;
¯¯6 7
}
˘˘ 
int
˚˚ 
	newPivotY
˚˚ 
=
˚˚ 
m_Size
˚˚ "
.
˚˚" #
y
˚˚# $
-
˚˚% &
pivot
˚˚' ,
.
˚˚, -
y
˚˚- .
-
˚˚/ 0
$num
˚˚1 2
;
˚˚2 3
pivot
¸¸ 
=
¸¸ 
new
¸¸ 

Vector3Int
¸¸ "
(
¸¸" #
pivot
¸¸# (
.
¸¸( )
x
¸¸) *
,
¸¸* +
	newPivotY
¸¸, 5
,
¸¸5 6
pivot
¸¸7 <
.
¸¸< =
z
¸¸= >
)
¸¸> ?
;
¸¸? @
	Matrix4x4
˝˝ 
flip
˝˝ 
=
˝˝ 
	Matrix4x4
˝˝ &
.
˝˝& '
TRS
˝˝' *
(
˝˝* +
Vector3
˝˝+ 2
.
˝˝2 3
zero
˝˝3 7
,
˝˝7 8

Quaternion
˝˝9 C
.
˝˝C D
identity
˝˝D L
,
˝˝L M
new
˝˝N Q
Vector3
˝˝R Y
(
˝˝Y Z
$num
˝˝Z \
,
˝˝\ ]
-
˝˝^ _
$num
˝˝_ a
,
˝˝a b
$num
˝˝c e
)
˝˝e f
)
˝˝f g
;
˝˝g h

Quaternion
˛˛ 
orientation
˛˛ "
=
˛˛# $

Quaternion
˛˛% /
.
˛˛/ 0
Euler
˛˛0 5
(
˛˛5 6
$num
˛˛6 8
,
˛˛8 9
$num
˛˛: <
,
˛˛< =
-
˛˛> ?
$num
˛˛? C
)
˛˛C D
;
˛˛D E
foreach
ˇˇ 
(
ˇˇ 
	BrushCell
ˇˇ 
cell
ˇˇ #
in
ˇˇ$ &
m_Cells
ˇˇ' .
)
ˇˇ. /
{
ÄÄ 
Vector3
ÅÅ 
	oldOffset
ÅÅ !
=
ÅÅ" #
cell
ÅÅ$ (
.
ÅÅ( )
offset
ÅÅ) /
;
ÅÅ/ 0
cell
ÇÇ 
.
ÇÇ 
offset
ÇÇ 
=
ÇÇ 
flip
ÇÇ "
*
ÇÇ# $
	oldOffset
ÇÇ% .
;
ÇÇ. /
cell
ÉÉ 
.
ÉÉ 
orientation
ÉÉ  
=
ÉÉ! "
cell
ÉÉ# '
.
ÉÉ' (
orientation
ÉÉ( 3
*
ÉÉ4 5
orientation
ÉÉ6 A
;
ÉÉA B
}
ÑÑ 
}
ÖÖ 	
public
ää 
void
ää  
UpdateSizeAndPivot
ää &
(
ää& '

Vector3Int
ää' 1
size
ää2 6
,
ää6 7

Vector3Int
ää8 B
pivot
ääC H
)
ääH I
{
ãã 	
m_Size
åå 
=
åå 
size
åå 
;
åå 
m_Pivot
çç 
=
çç 
pivot
çç 
;
çç 
SizeUpdated
éé 
(
éé 
)
éé 
;
éé 
}
èè 	
public
ññ 
void
ññ 
SetGameObject
ññ !
(
ññ! "

Vector3Int
ññ" ,
position
ññ- 5
,
ññ5 6

GameObject
ññ7 A
go
ññB D
)
ññD E
{
óó 	
if
òò 
(
òò "
ValidateCellPosition
òò $
(
òò$ %
position
òò% -
)
òò- .
)
òò. /
m_Cells
ôô 
[
ôô 
GetCellIndex
ôô $
(
ôô$ %
position
ôô% -
)
ôô- .
]
ôô. /
.
ôô/ 0

gameObject
ôô0 :
=
ôô; <
go
ôô= ?
;
ôô? @
}
öö 	
public
°° 
void
°° 
	SetOffset
°° 
(
°° 

Vector3Int
°° (
position
°°) 1
,
°°1 2
Vector3
°°3 :
offset
°°; A
)
°°A B
{
¢¢ 	
if
££ 
(
££ "
ValidateCellPosition
££ $
(
££$ %
position
££% -
)
££- .
)
££. /
m_Cells
§§ 
[
§§ 
GetCellIndex
§§ $
(
§§$ %
position
§§% -
)
§§- .
]
§§. /
.
§§/ 0
offset
§§0 6
=
§§7 8
offset
§§9 ?
;
§§? @
}
•• 	
public
¨¨ 
void
¨¨ 
SetOrientation
¨¨ "
(
¨¨" #

Vector3Int
¨¨# -
position
¨¨. 6
,
¨¨6 7

Quaternion
¨¨8 B
orientation
¨¨C N
)
¨¨N O
{
≠≠ 	
if
ÆÆ 
(
ÆÆ "
ValidateCellPosition
ÆÆ $
(
ÆÆ$ %
position
ÆÆ% -
)
ÆÆ- .
)
ÆÆ. /
m_Cells
ØØ 
[
ØØ 
GetCellIndex
ØØ $
(
ØØ$ %
position
ØØ% -
)
ØØ- .
]
ØØ. /
.
ØØ/ 0
orientation
ØØ0 ;
=
ØØ< =
orientation
ØØ> I
;
ØØI J
}
∞∞ 	
public
∑∑ 
void
∑∑ 
SetScale
∑∑ 
(
∑∑ 

Vector3Int
∑∑ '
position
∑∑( 0
,
∑∑0 1
Vector3
∑∑2 9
scale
∑∑: ?
)
∑∑? @
{
∏∏ 	
if
ππ 
(
ππ "
ValidateCellPosition
ππ $
(
ππ$ %
position
ππ% -
)
ππ- .
)
ππ. /
m_Cells
∫∫ 
[
∫∫ 
GetCellIndex
∫∫ $
(
∫∫$ %
position
∫∫% -
)
∫∫- .
]
∫∫. /
.
∫∫/ 0
scale
∫∫0 5
=
∫∫6 7
scale
∫∫8 =
;
∫∫= >
}
ªª 	
public
øø 
int
øø 
GetCellIndex
øø 
(
øø  

Vector3Int
øø  *
brushPosition
øø+ 8
)
øø8 9
{
¿¿ 	
return
¡¡ 
GetCellIndex
¡¡ 
(
¡¡  
brushPosition
¡¡  -
.
¡¡- .
x
¡¡. /
,
¡¡/ 0
brushPosition
¡¡1 >
.
¡¡> ?
y
¡¡? @
,
¡¡@ A
brushPosition
¡¡B O
.
¡¡O P
z
¡¡P Q
)
¡¡Q R
;
¡¡R S
}
¬¬ 	
public
»» 
int
»» 
GetCellIndex
»» 
(
»»  
int
»»  #
x
»»$ %
,
»»% &
int
»»' *
y
»»+ ,
,
»», -
int
»». 1
z
»»2 3
)
»»3 4
{
…… 	
return
   
x
   
+
   
m_Size
   
.
   
x
   
*
    !
y
  " #
+
  $ %
m_Size
  & ,
.
  , -
x
  - .
*
  / 0
m_Size
  1 7
.
  7 8
y
  8 9
*
  : ;
z
  < =
;
  = >
}
ÀÀ 	
public
‘‘ 
int
‘‘ 
GetCellIndex
‘‘ 
(
‘‘  
int
‘‘  #
x
‘‘$ %
,
‘‘% &
int
‘‘' *
y
‘‘+ ,
,
‘‘, -
int
‘‘. 1
z
‘‘2 3
,
‘‘3 4
int
‘‘5 8
sizex
‘‘9 >
,
‘‘> ?
int
‘‘@ C
sizey
‘‘D I
,
‘‘I J
int
‘‘K N
sizez
‘‘O T
)
‘‘T U
{
’’ 	
return
÷÷ 
x
÷÷ 
+
÷÷ 
sizex
÷÷ 
*
÷÷ 
y
÷÷  
+
÷÷! "
sizex
÷÷# (
*
÷÷) *
sizey
÷÷+ 0
*
÷÷1 2
z
÷÷3 4
;
÷÷4 5
}
◊◊ 	
public
ﬁﬁ 
int
ﬁﬁ $
GetCellIndexWrapAround
ﬁﬁ )
(
ﬁﬁ) *
int
ﬁﬁ* -
x
ﬁﬁ. /
,
ﬁﬁ/ 0
int
ﬁﬁ1 4
y
ﬁﬁ5 6
,
ﬁﬁ6 7
int
ﬁﬁ8 ;
z
ﬁﬁ< =
)
ﬁﬁ= >
{
ﬂﬂ 	
return
‡‡ 
(
‡‡ 
x
‡‡ 
%
‡‡ 
m_Size
‡‡ 
.
‡‡ 
x
‡‡  
)
‡‡  !
+
‡‡" #
m_Size
‡‡$ *
.
‡‡* +
x
‡‡+ ,
*
‡‡- .
(
‡‡/ 0
y
‡‡0 1
%
‡‡2 3
m_Size
‡‡4 :
.
‡‡: ;
y
‡‡; <
)
‡‡< =
+
‡‡> ?
m_Size
‡‡@ F
.
‡‡F G
x
‡‡G H
*
‡‡I J
m_Size
‡‡K Q
.
‡‡Q R
y
‡‡R S
*
‡‡T U
(
‡‡V W
z
‡‡W X
%
‡‡Y Z
m_Size
‡‡[ a
.
‡‡a b
z
‡‡b c
)
‡‡c d
;
‡‡d e
}
·· 	
private
„„ 
static
„„ 

GameObject
„„ !
GetObjectInCell
„„" 1
(
„„1 2

GridLayout
„„2 <
grid
„„= A
,
„„A B
	Transform
„„C L
parent
„„M S
,
„„S T

Vector3Int
„„U _
position
„„` h
)
„„h i
{
‰‰ 	
int
ÂÂ 

childCount
ÂÂ 
=
ÂÂ 
parent
ÂÂ #
.
ÂÂ# $

childCount
ÂÂ$ .
;
ÂÂ. /
Vector3
ÊÊ 
min
ÊÊ 
=
ÊÊ 
grid
ÊÊ 
.
ÊÊ 
LocalToWorld
ÊÊ +
(
ÊÊ+ ,
grid
ÊÊ, 0
.
ÊÊ0 1%
CellToLocalInterpolated
ÊÊ1 H
(
ÊÊH I
position
ÊÊI Q
)
ÊÊQ R
)
ÊÊR S
;
ÊÊS T
Vector3
ÁÁ 
max
ÁÁ 
=
ÁÁ 
grid
ÁÁ 
.
ÁÁ 
LocalToWorld
ÁÁ +
(
ÁÁ+ ,
grid
ÁÁ, 0
.
ÁÁ0 1%
CellToLocalInterpolated
ÁÁ1 H
(
ÁÁH I
position
ÁÁI Q
+
ÁÁR S

Vector3Int
ÁÁT ^
.
ÁÁ^ _
one
ÁÁ_ b
)
ÁÁb c
)
ÁÁc d
;
ÁÁd e
min
ÍÍ 
=
ÍÍ 
new
ÍÍ 
Vector3
ÍÍ 
(
ÍÍ 
min
ÍÍ !
.
ÍÍ! "
x
ÍÍ" #
,
ÍÍ# $
min
ÍÍ% (
.
ÍÍ( )
y
ÍÍ) *
,
ÍÍ* +
float
ÍÍ, 1
.
ÍÍ1 2
MinValue
ÍÍ2 :
)
ÍÍ: ;
;
ÍÍ; <
max
ÎÎ 
=
ÎÎ 
new
ÎÎ 
Vector3
ÎÎ 
(
ÎÎ 
max
ÎÎ !
.
ÎÎ! "
x
ÎÎ" #
,
ÎÎ# $
max
ÎÎ% (
.
ÎÎ( )
y
ÎÎ) *
,
ÎÎ* +
float
ÎÎ, 1
.
ÎÎ1 2
MaxValue
ÎÎ2 :
)
ÎÎ: ;
;
ÎÎ; <
Bounds
ÌÌ 
bounds
ÌÌ 
=
ÌÌ 
new
ÌÌ 
Bounds
ÌÌ  &
(
ÌÌ& '
(
ÌÌ' (
max
ÌÌ( +
+
ÌÌ, -
min
ÌÌ. 1
)
ÌÌ1 2
*
ÌÌ3 4
$num
ÌÌ5 8
,
ÌÌ8 9
max
ÌÌ: =
-
ÌÌ> ?
min
ÌÌ@ C
)
ÌÌC D
;
ÌÌD E
for
ÔÔ 
(
ÔÔ 
int
ÔÔ 
i
ÔÔ 
=
ÔÔ 
$num
ÔÔ 
;
ÔÔ 
i
ÔÔ 
<
ÔÔ 

childCount
ÔÔ  *
;
ÔÔ* +
i
ÔÔ, -
++
ÔÔ- /
)
ÔÔ/ 0
{
 
	Transform
ÒÒ 
child
ÒÒ 
=
ÒÒ  !
parent
ÒÒ" (
.
ÒÒ( )
GetChild
ÒÒ) 1
(
ÒÒ1 2
i
ÒÒ2 3
)
ÒÒ3 4
;
ÒÒ4 5
if
ÚÚ 
(
ÚÚ 
bounds
ÚÚ 
.
ÚÚ 
Contains
ÚÚ #
(
ÚÚ# $
child
ÚÚ$ )
.
ÚÚ) *
position
ÚÚ* 2
)
ÚÚ2 3
)
ÚÚ3 4
return
ÛÛ 
child
ÛÛ  
.
ÛÛ  !

gameObject
ÛÛ! +
;
ÛÛ+ ,
}
ÙÙ 
return
ıı 
null
ıı 
;
ıı 
}
ˆˆ 	
private
¯¯ 
bool
¯¯ "
ValidateCellPosition
¯¯ )
(
¯¯) *

Vector3Int
¯¯* 4
position
¯¯5 =
)
¯¯= >
{
˘˘ 	
var
˙˙ 
valid
˙˙ 
=
˙˙ 
position
˚˚ 
.
˚˚ 
x
˚˚ 
>=
˚˚ 
$num
˚˚ 
&&
˚˚  "
position
˚˚# +
.
˚˚+ ,
x
˚˚, -
<
˚˚. /
size
˚˚0 4
.
˚˚4 5
x
˚˚5 6
&&
˚˚7 9
position
¸¸ 
.
¸¸ 
y
¸¸ 
>=
¸¸ 
$num
¸¸ 
&&
¸¸  "
position
¸¸# +
.
¸¸+ ,
y
¸¸, -
<
¸¸. /
size
¸¸0 4
.
¸¸4 5
y
¸¸5 6
&&
¸¸7 9
position
˝˝ 
.
˝˝ 
z
˝˝ 
>=
˝˝ 
$num
˝˝ 
&&
˝˝  "
position
˝˝# +
.
˝˝+ ,
z
˝˝, -
<
˝˝. /
size
˝˝0 4
.
˝˝4 5
z
˝˝5 6
;
˝˝6 7
if
˛˛ 
(
˛˛ 
!
˛˛ 
valid
˛˛ 
)
˛˛ 
throw
ˇˇ 
new
ˇˇ 
ArgumentException
ˇˇ +
(
ˇˇ+ ,
string
ˇˇ, 2
.
ˇˇ2 3
Format
ˇˇ3 9
(
ˇˇ9 :
$strˇˇ: à
,ˇˇà â
positionˇˇä í
,ˇˇí ì

Vector3Intˇˇî û
.ˇˇû ü
zeroˇˇü £
,ˇˇ£ §
sizeˇˇ• ©
)ˇˇ© ™
)ˇˇ™ ´
;ˇˇ´ ¨
return
ÄÄ 
valid
ÄÄ 
;
ÄÄ 
}
ÅÅ 	
private
ÉÉ 
void
ÉÉ 
SizeUpdated
ÉÉ  
(
ÉÉ  !
)
ÉÉ! "
{
ÑÑ 	
m_Cells
ÖÖ 
=
ÖÖ 
new
ÖÖ 
	BrushCell
ÖÖ #
[
ÖÖ# $
m_Size
ÖÖ$ *
.
ÖÖ* +
x
ÖÖ+ ,
*
ÖÖ- .
m_Size
ÖÖ/ 5
.
ÖÖ5 6
y
ÖÖ6 7
*
ÖÖ8 9
m_Size
ÖÖ: @
.
ÖÖ@ A
z
ÖÖA B
]
ÖÖB C
;
ÖÖC D
	BoundsInt
ÜÜ 
bounds
ÜÜ 
=
ÜÜ 
new
ÜÜ "
	BoundsInt
ÜÜ# ,
(
ÜÜ, -

Vector3Int
ÜÜ- 7
.
ÜÜ7 8
zero
ÜÜ8 <
,
ÜÜ< =
m_Size
ÜÜ> D
)
ÜÜD E
;
ÜÜE F
foreach
áá 
(
áá 

Vector3Int
áá 
pos
áá  #
in
áá$ &
bounds
áá' -
.
áá- . 
allPositionsWithin
áá. @
)
áá@ A
{
àà 
m_Cells
ââ 
[
ââ 
GetCellIndex
ââ $
(
ââ$ %
pos
ââ% (
)
ââ( )
]
ââ) *
=
ââ+ ,
new
ââ- 0
	BrushCell
ââ1 :
(
ââ: ;
)
ââ; <
;
ââ< =
}
ää 
}
ãã 	
private
çç 
static
çç 
void
çç 
SetSceneCell
çç (
(
çç( )

GridLayout
çç) 3
grid
çç4 8
,
çç8 9
	Transform
çç: C
parent
ççD J
,
ççJ K

Vector3Int
ççL V
position
ççW _
,
çç_ `

GameObject
çça k
go
ççl n
,
ççn o
Vector3
ççp w
offset
ççx ~
,
çç~ 
Vector3ççÄ á
scaleççà ç
,ççç é

Quaternionççè ô
orientationççö •
,çç• ¶
Vector3ççß Æ
anchorççØ µ
)ççµ ∂
{
éé 	
if
èè 
(
èè 
parent
èè 
==
èè 
null
èè 
||
èè !
go
èè" $
==
èè% '
null
èè( ,
)
èè, -
return
êê 
;
êê 

GameObject
íí 
instance
íí 
=
íí  !
null
íí" &
;
íí& '
if
ìì 
(
ìì 
PrefabUtility
ìì 
.
ìì !
IsPartOfPrefabAsset
ìì 1
(
ìì1 2
go
ìì2 4
)
ìì4 5
)
ìì5 6
{
îî 
instance
ïï 
=
ïï 
(
ïï 

GameObject
ïï &
)
ïï& '
PrefabUtility
ïï( 5
.
ïï5 6
InstantiatePrefab
ïï6 G
(
ïïG H
go
ïïH J
)
ïïJ K
;
ïïK L
}
ññ 
else
óó 
{
òò 
instance
ôô 
=
ôô 
Instantiate
ôô &
(
ôô& '
go
ôô' )
)
ôô) *
;
ôô* +
instance
öö 
.
öö 
	hideFlags
öö "
=
öö# $
	HideFlags
öö% .
.
öö. /
None
öö/ 3
;
öö3 4
instance
õõ 
.
õõ 
name
õõ 
=
õõ 
go
õõ  "
.
õõ" #
name
õõ# '
;
õõ' (
}
úú 
Undo
ûû 
.
ûû '
RegisterCreatedObjectUndo
ûû *
(
ûû* +
instance
ûû+ 3
,
ûû3 4
$str
ûû5 G
)
ûûG H
;
ûûH I
instance
üü 
.
üü 
	transform
üü 
.
üü 
	SetParent
üü (
(
üü( )
parent
üü) /
)
üü/ 0
;
üü0 1
instance
†† 
.
†† 
	transform
†† 
.
†† 
position
†† '
=
††( )
grid
††* .
.
††. /
LocalToWorld
††/ ;
(
††; <
grid
††< @
.
††@ A%
CellToLocalInterpolated
††A X
(
††X Y
new
††Y \

Vector3Int
††] g
(
††g h
position
††h p
.
††p q
x
††q r
,
††r s
position
††t |
.
††| }
y
††} ~
,
††~ 
position††Ä à
.††à â
z††â ä
)††ä ã
+††å ç
anchor††é î
)††î ï
)††ï ñ
;††ñ ó
instance
°° 
.
°° 
	transform
°° 
.
°° 
localRotation
°° ,
=
°°- .
orientation
°°/ :
;
°°: ;
instance
¢¢ 
.
¢¢ 
	transform
¢¢ 
.
¢¢ 

localScale
¢¢ )
=
¢¢* +
scale
¢¢, 1
;
¢¢1 2
instance
££ 
.
££ 
	transform
££ 
.
££ 
	Translate
££ (
(
££( )
offset
££) /
)
££/ 0
;
££0 1
}
§§ 	
private
¶¶ 
static
¶¶ 
void
¶¶ 
ClearSceneCell
¶¶ *
(
¶¶* +

GridLayout
¶¶+ 5
grid
¶¶6 :
,
¶¶: ;
	Transform
¶¶< E
parent
¶¶F L
,
¶¶L M

Vector3Int
¶¶N X
position
¶¶Y a
)
¶¶a b
{
ßß 	
if
®® 
(
®® 
parent
®® 
==
®® 
null
®® 
)
®® 
return
©© 
;
©© 

GameObject
´´ 
erased
´´ 
=
´´ 
GetObjectInCell
´´  /
(
´´/ 0
grid
´´0 4
,
´´4 5
parent
´´6 <
,
´´< =
new
´´> A

Vector3Int
´´B L
(
´´L M
position
´´M U
.
´´U V
x
´´V W
,
´´W X
position
´´Y a
.
´´a b
y
´´b c
,
´´c d
position
´´e m
.
´´m n
z
´´n o
)
´´o p
)
´´p q
;
´´q r
if
¨¨ 
(
¨¨ 
erased
¨¨ 
!=
¨¨ 
null
¨¨ 
)
¨¨ 
Undo
≠≠ 
.
≠≠ $
DestroyObjectImmediate
≠≠ +
(
≠≠+ ,
erased
≠≠, 2
)
≠≠2 3
;
≠≠3 4
}
ÆÆ 	
public
¥¥ 
override
¥¥ 
int
¥¥ 
GetHashCode
¥¥ '
(
¥¥' (
)
¥¥( )
{
µµ 	
int
∂∂ 
hash
∂∂ 
=
∂∂ 
$num
∂∂ 
;
∂∂ 
	unchecked
∑∑ 
{
∏∏ 
foreach
ππ 
(
ππ 
var
ππ 
cell
ππ !
in
ππ" $
cells
ππ% *
)
ππ* +
{
∫∫ 
hash
ªª 
=
ªª 
hash
ªª 
*
ªª  !
$num
ªª" $
+
ªª% &
cell
ªª' +
.
ªª+ ,
GetHashCode
ªª, 7
(
ªª7 8
)
ªª8 9
;
ªª9 :
}
ºº 
}
ΩΩ 
return
ææ 
hash
ææ 
;
ææ 
}
øø 	
[
ƒƒ 	
Serializable
ƒƒ	 
]
ƒƒ 
public
≈≈ 
class
≈≈ 
	BrushCell
≈≈ 
{
∆∆ 	
public
   

GameObject
   

gameObject
   (
{
  ) *
get
  + .
{
  / 0
return
  1 7
m_GameObject
  8 D
;
  D E
}
  F G
set
  H K
{
  L M
m_GameObject
  N Z
=
  [ \
value
  ] b
;
  b c
}
  d e
}
  f g
public
ŒŒ 
Vector3
ŒŒ 
offset
ŒŒ !
{
ŒŒ" #
get
ŒŒ$ '
{
ŒŒ( )
return
ŒŒ* 0
m_Offset
ŒŒ1 9
;
ŒŒ9 :
}
ŒŒ; <
set
ŒŒ= @
{
ŒŒA B
m_Offset
ŒŒC K
=
ŒŒL M
value
ŒŒN S
;
ŒŒS T
}
ŒŒU V
}
ŒŒW X
public
““ 
Vector3
““ 
scale
““  
{
““! "
get
““# &
{
““' (
return
““) /
m_Scale
““0 7
;
““7 8
}
““9 :
set
““; >
{
““? @
m_Scale
““A H
=
““I J
value
““K P
;
““P Q
}
““R S
}
““T U
public
÷÷ 

Quaternion
÷÷ 
orientation
÷÷ )
{
÷÷* +
get
÷÷, /
{
÷÷0 1
return
÷÷2 8
m_Orientation
÷÷9 F
;
÷÷F G
}
÷÷H I
set
÷÷J M
{
÷÷N O
m_Orientation
÷÷P ]
=
÷÷^ _
value
÷÷` e
;
÷÷e f
}
÷÷g h
}
÷÷i j
[
ÿÿ 
SerializeField
ÿÿ 
]
ÿÿ 
private
ŸŸ 

GameObject
ŸŸ 
m_GameObject
ŸŸ +
;
ŸŸ+ ,
[
⁄⁄ 
SerializeField
⁄⁄ 
]
⁄⁄ 
Vector3
€€ 
m_Offset
€€ 
=
€€ 
Vector3
€€ &
.
€€& '
zero
€€' +
;
€€+ ,
[
‹‹ 
SerializeField
‹‹ 
]
‹‹ 
Vector3
›› 
m_Scale
›› 
=
›› 
Vector3
›› %
.
››% &
one
››& )
;
››) *
[
ﬁﬁ 
SerializeField
ﬁﬁ 
]
ﬁﬁ 

Quaternion
ﬂﬂ 
m_Orientation
ﬂﬂ $
=
ﬂﬂ% &

Quaternion
ﬂﬂ' 1
.
ﬂﬂ1 2
identity
ﬂﬂ2 :
;
ﬂﬂ: ;
public
ÂÂ 
override
ÂÂ 
int
ÂÂ 
GetHashCode
ÂÂ  +
(
ÂÂ+ ,
)
ÂÂ, -
{
ÊÊ 
int
ÁÁ 
hash
ÁÁ 
=
ÁÁ 
$num
ÁÁ 
;
ÁÁ 
	unchecked
ËË 
{
ÈÈ 
hash
ÍÍ 
=
ÍÍ 

gameObject
ÍÍ %
!=
ÍÍ& (
null
ÍÍ) -
?
ÍÍ. /

gameObject
ÍÍ0 :
.
ÍÍ: ;
GetInstanceID
ÍÍ; H
(
ÍÍH I
)
ÍÍI J
:
ÍÍK L
$num
ÍÍM N
;
ÍÍN O
hash
ÎÎ 
=
ÎÎ 
hash
ÎÎ 
*
ÎÎ  !
$num
ÎÎ" $
+
ÎÎ% &
m_Offset
ÎÎ' /
.
ÎÎ/ 0
GetHashCode
ÎÎ0 ;
(
ÎÎ; <
)
ÎÎ< =
;
ÎÎ= >
hash
ÏÏ 
=
ÏÏ 
hash
ÏÏ 
*
ÏÏ  !
$num
ÏÏ" $
+
ÏÏ% &
m_Scale
ÏÏ' .
.
ÏÏ. /
GetHashCode
ÏÏ/ :
(
ÏÏ: ;
)
ÏÏ; <
;
ÏÏ< =
hash
ÌÌ 
=
ÌÌ 
hash
ÌÌ 
*
ÌÌ  !
$num
ÌÌ" $
+
ÌÌ% &
m_Orientation
ÌÌ' 4
.
ÌÌ4 5
GetHashCode
ÌÌ5 @
(
ÌÌ@ A
)
ÌÌA B
;
ÌÌB C
}
ÓÓ 
return
ÔÔ 
hash
ÔÔ 
;
ÔÔ 
}
 
}
ÒÒ 	
}
ÚÚ 
[
˜˜ 
CustomEditor
˜˜ 
(
˜˜ 
typeof
˜˜ 
(
˜˜ 
GameObjectBrush
˜˜ (
)
˜˜( )
)
˜˜) *
]
˜˜* +
public
¯¯ 

class
¯¯ #
GameObjectBrushEditor
¯¯ &
:
¯¯' (!
GridBrushEditorBase
¯¯) <
{
˘˘ 
public
˝˝ 
GameObjectBrush
˝˝ 
brush
˝˝ $
{
˝˝% &
get
˝˝' *
{
˝˝+ ,
return
˝˝- 3
target
˝˝4 :
as
˝˝; =
GameObjectBrush
˝˝> M
;
˝˝M N
}
˝˝O P
}
˝˝Q R
public
àà 
override
àà 
void
àà 
OnPaintSceneGUI
àà ,
(
àà, -

GridLayout
àà- 7

gridLayout
àà8 B
,
ààB C

GameObject
ààD N
brushTarget
ààO Z
,
ààZ [
	BoundsInt
àà\ e
position
ààf n
,
ààn o
GridBrushBase
ààp }
.
àà} ~
Toolàà~ Ç
toolààÉ á
,ààá à
boolààâ ç
	executingààé ó
)ààó ò
{
ââ 	
	BoundsInt
ää 
	gizmoRect
ää 
=
ää  !
position
ää" *
;
ää* +
if
åå 
(
åå 
tool
åå 
==
åå 
GridBrushBase
åå %
.
åå% &
Tool
åå& *
.
åå* +
Paint
åå+ 0
||
åå1 3
tool
åå4 8
==
åå9 ;
GridBrushBase
åå< I
.
ååI J
Tool
ååJ N
.
ååN O
Erase
ååO T
)
ååT U
	gizmoRect
çç 
=
çç 
new
çç 
	BoundsInt
çç  )
(
çç) *
position
çç* 2
.
çç2 3
min
çç3 6
-
çç7 8
brush
çç9 >
.
çç> ?
pivot
çç? D
,
ççD E
brush
ççF K
.
ççK L
size
ççL P
)
ççP Q
;
ççQ R
base
èè 
.
èè 
OnPaintSceneGUI
èè  
(
èè  !

gridLayout
èè! +
,
èè+ ,
brushTarget
èè- 8
,
èè8 9
	gizmoRect
èè: C
,
èèC D
tool
èèE I
,
èèI J
	executing
èèK T
)
èèT U
;
èèU V
}
êê 	
public
ññ 
override
ññ 
void
ññ !
OnPaintInspectorGUI
ññ 0
(
ññ0 1
)
ññ1 2
{
óó 	
	GUILayout
òò 
.
òò 
Label
òò 
(
òò 
$str
òò O
)
òòO P
;
òòP Q
	GUILayout
ôô 
.
ôô 
Label
ôô 
(
ôô 
$str
ôô W
)
ôôW X
;
ôôX Y
}
öö 	
}
õõ 
}úú †µ
ôC:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Editor\Brushes\GroupBrush\GroupBrush.cs
	namespace 	
UnityEditor
 
. 
Tilemaps 
{ 
[ 
CustomGridBrush 
( 
true 
, 
false  
,  !
false" '
,' (
$str) 6
)6 7
]7 8
public 

class 

GroupBrush 
: 
	GridBrush '
{ 
public 

Vector3Int 
gap 
{ 	
get 
{ 
return 
m_Gap 
; 
}  !
set 
{ 
m_Gap 
= 
value 
; 

OnValidate 
( 
) 
; 
} 
} 	
public 

Vector3Int 
limit 
{ 	
get   
{   
return   
m_Limit    
;    !
}  " #
set!! 
{"" 
m_Limit## 
=## 
value## 
;##  

OnValidate$$ 
($$ 
)$$ 
;$$ 
}%% 
}&& 	
private(( 
int((  
visitedLocationsSize(( (
{)) 	
get** 
{** 
return** 
(** 
m_Limit** !
.**! "
x**" #
***$ %
$num**& '
+**( )
$num*** +
)**+ ,
***- .
(**/ 0
m_Limit**0 7
.**7 8
y**8 9
***: ;
$num**< =
+**> ?
$num**@ A
)**A B
***C D
(**E F
m_Limit**F M
.**M N
z**N O
***P Q
$num**R S
+**T U
$num**V W
)**W X
;**X Y
}**Z [
}++ 	
[-- 	
SerializeField--	 
]-- 
private.. 

Vector3Int.. 
m_Gap..  
=..! "

Vector3Int..# -
...- .
one... 1
;..1 2
[// 	
SerializeField//	 
]// 
private00 

Vector3Int00 
m_Limit00 "
=00# $

Vector3Int00% /
.00/ 0
one000 3
*004 5
$num006 7
;007 8
[11 	
SerializeField11	 
]11 
private22 
BitArray22 
m_VisitedLocations22 +
=22, -
new22. 1
BitArray222 :
(22: ;
$num22; <
*22= >
$num22? @
*22A B
$num22C D
)22D E
;22E F
[33 	
SerializeField33	 
]33 
private44 
Stack44 
<44 

Vector3Int44  
>44  !
m_NextPosition44" 0
=441 2
new443 6
Stack447 <
<44< =

Vector3Int44= G
>44G H
(44H I
)44I J
;44J K
private66 
void66 

OnValidate66 
(66  
)66  !
{77 	
if88 
(88 
m_Gap88 
.88 
x88 
<88 
$num88 
)88 
m_Gap99 
.99 
x99 
=99 
$num99 
;99 
if:: 
(:: 
m_Gap:: 
.:: 
y:: 
<:: 
$num:: 
):: 
m_Gap;; 
.;; 
y;; 
=;; 
$num;; 
;;; 
if<< 
(<< 
m_Gap<< 
.<< 
z<< 
<<< 
$num<< 
)<< 
m_Gap== 
.== 
z== 
=== 
$num== 
;== 
if>> 
(>> 
m_Limit>> 
.>> 
x>> 
<>> 
$num>> 
)>> 
m_Limit?? 
.?? 
x?? 
=?? 
$num?? 
;?? 
if@@ 
(@@ 
m_Limit@@ 
.@@ 
y@@ 
<@@ 
$num@@ 
)@@ 
m_LimitAA 
.AA 
yAA 
=AA 
$numAA 
;AA 
ifBB 
(BB 
m_LimitBB 
.BB 
zBB 
<BB 
$numBB 
)BB 
m_LimitCC 
.CC 
zCC 
=CC 
$numCC 
;CC 
ifDD 
(DD 
m_VisitedLocationsDD "
.DD" #
LengthDD# )
!=DD* , 
visitedLocationsSizeDD- A
)DDA B
m_VisitedLocationsEE "
=EE# $
newEE% (
BitArrayEE) 1
(EE1 2 
visitedLocationsSizeEE2 F
)EEF G
;EEG H
}FF 	
publicPP 
overridePP 
voidPP 
PickPP !
(PP! "

GridLayoutPP" ,

gridLayoutPP- 7
,PP7 8

GameObjectPP9 C
brushTargetPPD O
,PPO P
	BoundsIntPPQ Z
positionPP[ c
,PPc d

Vector3IntPPe o
	pickStartPPp y
)PPy z
{QQ 	
ifSS 
(SS 
positionSS 
.SS 
sizeSS 
.SS 
xSS 
>SS  !
$numSS" #
||SS$ &
positionSS' /
.SS/ 0
sizeSS0 4
.SS4 5
ySS5 6
>SS7 8
$numSS9 :
||SS; =
positionSS> F
.SSF G
sizeSSG K
.SSK L
zSSL M
>SSN O
$numSSP Q
)SSQ R
{TT 
baseUU 
.UU 
PickUU 
(UU 

gridLayoutUU $
,UU$ %
brushTargetUU& 1
,UU1 2
positionUU3 ;
,UU; <
	pickStartUU= F
)UUF G
;UUG H
returnVV 
;VV 
}WW 
TilemapYY 
tilemapYY 
=YY 
brushTargetYY )
.YY) *
GetComponentYY* 6
<YY6 7
TilemapYY7 >
>YY> ?
(YY? @
)YY@ A
;YYA B
ifZZ 
(ZZ 
tilemapZZ 
==ZZ 
nullZZ 
)ZZ  
return[[ 
;[[ 
Reset]] 
(]] 
)]] 
;]] 

Vector3Int`` 
limitOrigin`` "
=``# $
position``% -
.``- .
position``. 6
-``7 8
limit``9 >
;``> ?

Vector3Intaa 
	limitSizeaa  
=aa! "

Vector3Intaa# -
.aa- .
oneaa. 1
+aa2 3
limitaa4 9
*aa: ;
$numaa< =
;aa= >
	BoundsIntbb 
limitBoundsbb !
=bb" #
newbb$ '
	BoundsIntbb( 1
(bb1 2
limitOriginbb2 =
,bb= >
	limitSizebb? H
)bbH I
;bbI J
	BoundsIntcc 

pickBoundscc  
=cc! "
newcc# &
	BoundsIntcc' 0
(cc0 1
positioncc1 9
.cc9 :
positioncc: B
,ccB C

Vector3IntccD N
.ccN O
oneccO R
)ccR S
;ccS T
m_VisitedLocationsee 
.ee 
SetAllee %
(ee% &
falseee& +
)ee+ ,
;ee, -
m_VisitedLocationsff 
.ff 
Setff "
(ff" #
GetIndexff# +
(ff+ ,
positionff, 4
.ff4 5
positionff5 =
,ff= >
limitOriginff? J
,ffJ K
	limitSizeffL U
)ffU V
,ffV W
trueffX \
)ff\ ]
;ff] ^
m_NextPositiongg 
.gg 
Cleargg  
(gg  !
)gg! "
;gg" #
m_NextPositionhh 
.hh 
Pushhh 
(hh  
positionhh  (
.hh( )
positionhh) 1
)hh1 2
;hh2 3
whilejj 
(jj 
m_NextPositionjj !
.jj! "
Countjj" '
>jj( )
$numjj* +
)jj+ ,
{kk 

Vector3Intll 
nextll 
=ll  !
m_NextPositionll" 0
.ll0 1
Popll1 4
(ll4 5
)ll5 6
;ll6 7
ifmm 
(mm 
tilemapmm 
.mm 
GetTilemm #
(mm# $
nextmm$ (
)mm( )
!=mm* ,
nullmm- 1
)mm1 2
{nn 
Encapsulateoo 
(oo  
refoo  #

pickBoundsoo$ .
,oo. /
nextoo0 4
)oo4 5
;oo5 6
	BoundsIntpp 
	gapBoundspp '
=pp( )
newpp* -
	BoundsIntpp. 7
(pp7 8
nextpp8 <
-pp= >
gappp? B
,ppB C

Vector3IntppD N
.ppN O
oneppO R
+ppS T
gapppU X
*ppY Z
$numpp[ \
)pp\ ]
;pp] ^
foreachqq 
(qq 
varqq  
gapPositionqq! ,
inqq- /
	gapBoundsqq0 9
.qq9 :
allPositionsWithinqq: L
)qqL M
{rr 
ifss 
(ss 
!ss 
limitBoundsss (
.ss( )
Containsss) 1
(ss1 2
gapPositionss2 =
)ss= >
)ss> ?
continuett $
;tt$ %
intuu 
indexuu !
=uu" #
GetIndexuu$ ,
(uu, -
gapPositionuu- 8
,uu8 9
limitOriginuu: E
,uuE F
	limitSizeuuG P
)uuP Q
;uuQ R
ifvv 
(vv 
!vv 
m_VisitedLocationsvv /
.vv/ 0
Getvv0 3
(vv3 4
indexvv4 9
)vv9 :
)vv: ;
{ww 
m_NextPositionxx *
.xx* +
Pushxx+ /
(xx/ 0
gapPositionxx0 ;
)xx; <
;xx< =
m_VisitedLocationsyy .
.yy. /
Setyy/ 2
(yy2 3
indexyy3 8
,yy8 9
trueyy: >
)yy> ?
;yy? @
}zz 
}{{ 
}|| 
}}} 
UpdateSizeAndPivot 
( 

pickBounds )
.) *
size* .
,. /
position0 8
.8 9
position9 A
-B C

pickBoundsD N
.N O
positionO W
)W X
;X Y
foreach
ÅÅ 
(
ÅÅ 

Vector3Int
ÅÅ 
pos
ÅÅ  #
in
ÅÅ$ &

pickBounds
ÅÅ' 1
.
ÅÅ1 2 
allPositionsWithin
ÅÅ2 D
)
ÅÅD E
{
ÇÇ 

Vector3Int
ÉÉ 
brushPosition
ÉÉ (
=
ÉÉ) *
new
ÉÉ+ .

Vector3Int
ÉÉ/ 9
(
ÉÉ9 :
pos
ÉÉ: =
.
ÉÉ= >
x
ÉÉ> ?
-
ÉÉ@ A

pickBounds
ÉÉB L
.
ÉÉL M
x
ÉÉM N
,
ÉÉN O
pos
ÉÉP S
.
ÉÉS T
y
ÉÉT U
-
ÉÉV W

pickBounds
ÉÉX b
.
ÉÉb c
y
ÉÉc d
,
ÉÉd e
pos
ÉÉf i
.
ÉÉi j
z
ÉÉj k
-
ÉÉl m

pickBounds
ÉÉn x
.
ÉÉx y
z
ÉÉy z
)
ÉÉz {
;
ÉÉ{ |
if
ÑÑ 
(
ÑÑ  
m_VisitedLocations
ÑÑ &
.
ÑÑ& '
Get
ÑÑ' *
(
ÑÑ* +
GetIndex
ÑÑ+ 3
(
ÑÑ3 4
pos
ÑÑ4 7
,
ÑÑ7 8
limitOrigin
ÑÑ9 D
,
ÑÑD E
	limitSize
ÑÑF O
)
ÑÑO P
)
ÑÑP Q
)
ÑÑQ R
{
ÖÖ 
PickCell
ÜÜ 
(
ÜÜ 
pos
ÜÜ  
,
ÜÜ  !
brushPosition
ÜÜ" /
,
ÜÜ/ 0
tilemap
ÜÜ1 8
)
ÜÜ8 9
;
ÜÜ9 :
}
áá 
}
àà 
}
ââ 	
private
ãã 
void
ãã 
Encapsulate
ãã  
(
ãã  !
ref
ãã! $
	BoundsInt
ãã% .
bounds
ãã/ 5
,
ãã5 6

Vector3Int
ãã7 A
position
ããB J
)
ããJ K
{
åå 	
if
çç 
(
çç 
bounds
çç 
.
çç 
Contains
çç 
(
çç  
position
çç  (
)
çç( )
)
çç) *
return
éé 
;
éé 
if
êê 
(
êê 
position
êê 
.
êê 
x
êê 
<
êê 
bounds
êê #
.
êê# $
position
êê$ ,
.
êê, -
x
êê- .
)
êê. /
{
ëë 
var
íí 
increase
íí 
=
íí 
bounds
íí %
.
íí% &
x
íí& '
-
íí( )
position
íí* 2
.
íí2 3
x
íí3 4
;
íí4 5
bounds
ìì 
.
ìì 
position
ìì 
=
ìì  !
new
ìì" %

Vector3Int
ìì& 0
(
ìì0 1
position
ìì1 9
.
ìì9 :
x
ìì: ;
,
ìì; <
bounds
ìì= C
.
ììC D
y
ììD E
,
ììE F
bounds
ììG M
.
ììM N
z
ììN O
)
ììO P
;
ììP Q
bounds
îî 
.
îî 
size
îî 
=
îî 
new
îî !

Vector3Int
îî" ,
(
îî, -
bounds
îî- 3
.
îî3 4
size
îî4 8
.
îî8 9
x
îî9 :
+
îî; <
increase
îî= E
,
îîE F
bounds
îîG M
.
îîM N
size
îîN R
.
îîR S
y
îîS T
,
îîT U
bounds
îîV \
.
îî\ ]
size
îî] a
.
îîa b
z
îîb c
)
îîc d
;
îîd e
}
ïï 
if
ññ 
(
ññ 
position
ññ 
.
ññ 
x
ññ 
>=
ññ 
bounds
ññ $
.
ññ$ %
xMax
ññ% )
)
ññ) *
{
óó 
var
òò 
increase
òò 
=
òò 
position
òò '
.
òò' (
x
òò( )
-
òò* +
bounds
òò, 2
.
òò2 3
xMax
òò3 7
+
òò8 9
$num
òò: ;
;
òò; <
bounds
ôô 
.
ôô 
size
ôô 
=
ôô 
new
ôô !

Vector3Int
ôô" ,
(
ôô, -
bounds
ôô- 3
.
ôô3 4
size
ôô4 8
.
ôô8 9
x
ôô9 :
+
ôô; <
increase
ôô= E
,
ôôE F
bounds
ôôG M
.
ôôM N
size
ôôN R
.
ôôR S
y
ôôS T
,
ôôT U
bounds
ôôV \
.
ôô\ ]
size
ôô] a
.
ôôa b
z
ôôb c
)
ôôc d
;
ôôd e
}
öö 
if
õõ 
(
õõ 
position
õõ 
.
õõ 
y
õõ 
<
õõ 
bounds
õõ #
.
õõ# $
position
õõ$ ,
.
õõ, -
y
õõ- .
)
õõ. /
{
úú 
var
ùù 
increase
ùù 
=
ùù 
bounds
ùù %
.
ùù% &
y
ùù& '
-
ùù( )
position
ùù* 2
.
ùù2 3
y
ùù3 4
;
ùù4 5
bounds
ûû 
.
ûû 
position
ûû 
=
ûû  !
new
ûû" %

Vector3Int
ûû& 0
(
ûû0 1
bounds
ûû1 7
.
ûû7 8
x
ûû8 9
,
ûû9 :
position
ûû; C
.
ûûC D
y
ûûD E
,
ûûE F
bounds
ûûG M
.
ûûM N
z
ûûN O
)
ûûO P
;
ûûP Q
bounds
üü 
.
üü 
size
üü 
=
üü 
new
üü !

Vector3Int
üü" ,
(
üü, -
bounds
üü- 3
.
üü3 4
size
üü4 8
.
üü8 9
x
üü9 :
,
üü: ;
bounds
üü< B
.
üüB C
size
üüC G
.
üüG H
y
üüH I
+
üüJ K
increase
üüL T
,
üüT U
bounds
üüV \
.
üü\ ]
size
üü] a
.
üüa b
z
üüb c
)
üüc d
;
üüd e
}
†† 
if
°° 
(
°° 
position
°° 
.
°° 
y
°° 
>=
°° 
bounds
°° $
.
°°$ %
yMax
°°% )
)
°°) *
{
¢¢ 
var
££ 
increase
££ 
=
££ 
position
££ '
.
££' (
y
££( )
-
££* +
bounds
££, 2
.
££2 3
yMax
££3 7
+
££8 9
$num
££: ;
;
££; <
bounds
§§ 
.
§§ 
size
§§ 
=
§§ 
new
§§ !

Vector3Int
§§" ,
(
§§, -
bounds
§§- 3
.
§§3 4
size
§§4 8
.
§§8 9
x
§§9 :
,
§§: ;
bounds
§§< B
.
§§B C
size
§§C G
.
§§G H
y
§§H I
+
§§J K
increase
§§L T
,
§§T U
bounds
§§V \
.
§§\ ]
size
§§] a
.
§§a b
z
§§b c
)
§§c d
;
§§d e
}
•• 
if
¶¶ 
(
¶¶ 
position
¶¶ 
.
¶¶ 
z
¶¶ 
<
¶¶ 
bounds
¶¶ #
.
¶¶# $
position
¶¶$ ,
.
¶¶, -
z
¶¶- .
)
¶¶. /
{
ßß 
var
®® 
increase
®® 
=
®® 
bounds
®® %
.
®®% &
z
®®& '
-
®®( )
position
®®* 2
.
®®2 3
z
®®3 4
;
®®4 5
bounds
©© 
.
©© 
position
©© 
=
©©  !
new
©©" %

Vector3Int
©©& 0
(
©©0 1
bounds
©©1 7
.
©©7 8
x
©©8 9
,
©©9 :
bounds
©©; A
.
©©A B
y
©©B C
,
©©C D
position
©©E M
.
©©M N
z
©©N O
)
©©O P
;
©©P Q
bounds
™™ 
.
™™ 
size
™™ 
=
™™ 
new
™™ !

Vector3Int
™™" ,
(
™™, -
bounds
™™- 3
.
™™3 4
size
™™4 8
.
™™8 9
x
™™9 :
,
™™: ;
bounds
™™< B
.
™™B C
size
™™C G
.
™™G H
y
™™H I
,
™™I J
bounds
™™K Q
.
™™Q R
size
™™R V
.
™™V W
z
™™W X
+
™™Y Z
increase
™™[ c
)
™™c d
;
™™d e
}
´´ 
if
¨¨ 
(
¨¨ 
position
¨¨ 
.
¨¨ 
z
¨¨ 
>=
¨¨ 
bounds
¨¨ $
.
¨¨$ %
zMax
¨¨% )
)
¨¨) *
{
≠≠ 
var
ÆÆ 
increase
ÆÆ 
=
ÆÆ 
position
ÆÆ '
.
ÆÆ' (
z
ÆÆ( )
-
ÆÆ* +
bounds
ÆÆ, 2
.
ÆÆ2 3
zMax
ÆÆ3 7
+
ÆÆ8 9
$num
ÆÆ: ;
;
ÆÆ; <
bounds
ØØ 
.
ØØ 
size
ØØ 
=
ØØ 
new
ØØ !

Vector3Int
ØØ" ,
(
ØØ, -
bounds
ØØ- 3
.
ØØ3 4
size
ØØ4 8
.
ØØ8 9
x
ØØ9 :
,
ØØ: ;
bounds
ØØ< B
.
ØØB C
size
ØØC G
.
ØØG H
y
ØØH I
,
ØØI J
bounds
ØØK Q
.
ØØQ R
size
ØØR V
.
ØØV W
z
ØØW X
+
ØØY Z
increase
ØØ[ c
)
ØØc d
;
ØØd e
}
∞∞ 
}
±± 	
private
≥≥ 
int
≥≥ 
GetIndex
≥≥ 
(
≥≥ 

Vector3Int
≥≥ '
position
≥≥( 0
,
≥≥0 1

Vector3Int
≥≥2 <
origin
≥≥= C
,
≥≥C D

Vector3Int
≥≥E O
size
≥≥P T
)
≥≥T U
{
¥¥ 	
return
µµ 
(
µµ 
position
µµ 
.
µµ 
z
µµ 
-
µµ  
origin
µµ! '
.
µµ' (
z
µµ( )
)
µµ) *
*
µµ+ ,
size
µµ- 1
.
µµ1 2
y
µµ2 3
*
µµ4 5
size
µµ6 :
.
µµ: ;
x
µµ; <
+
∂∂ 
(
∂∂ 
position
∂∂ 
.
∂∂ 
y
∂∂  
-
∂∂! "
origin
∂∂# )
.
∂∂) *
y
∂∂* +
)
∂∂+ ,
*
∂∂- .
size
∂∂/ 3
.
∂∂3 4
x
∂∂4 5
+
∑∑ 
(
∑∑ 
position
∑∑ 
.
∑∑ 
x
∑∑  
-
∑∑! "
origin
∑∑# )
.
∑∑) *
x
∑∑* +
)
∑∑+ ,
;
∑∑, -
}
∏∏ 	
private
∫∫ 
void
∫∫ 
PickCell
∫∫ 
(
∫∫ 

Vector3Int
∫∫ (
position
∫∫) 1
,
∫∫1 2

Vector3Int
∫∫3 =
brushPosition
∫∫> K
,
∫∫K L
Tilemap
∫∫M T
tilemap
∫∫U \
)
∫∫\ ]
{
ªª 	
if
ºº 
(
ºº 
tilemap
ºº 
!=
ºº 
null
ºº 
)
ºº  
{
ΩΩ 
SetTile
ææ 
(
ææ 
brushPosition
ææ %
,
ææ% &
tilemap
ææ' .
.
ææ. /
GetTile
ææ/ 6
(
ææ6 7
position
ææ7 ?
)
ææ? @
)
ææ@ A
;
ææA B
	SetMatrix
øø 
(
øø 
brushPosition
øø '
,
øø' (
tilemap
øø) 0
.
øø0 1 
GetTransformMatrix
øø1 C
(
øøC D
position
øøD L
)
øøL M
)
øøM N
;
øøN O
SetColor
¿¿ 
(
¿¿ 
brushPosition
¿¿ &
,
¿¿& '
tilemap
¿¿( /
.
¿¿/ 0
GetColor
¿¿0 8
(
¿¿8 9
position
¿¿9 A
)
¿¿A B
)
¿¿B C
;
¿¿C D
}
¡¡ 
}
¬¬ 	
[
«« 	
MenuItem
««	 
(
«« 
$str
«« 5
)
««5 6
]
««6 7
public
»» 
static
»» 
void
»» 
CreateBrush
»» &
(
»»& '
)
»»' (
{
…… 	
string
   
path
   
=
   
EditorUtility
   '
.
  ' ($
SaveFilePanelInProject
  ( >
(
  > ?
$str
  ? Q
,
  Q R
$str
  S d
,
  d e
$str
  f m
,
  m n
$str  o Å
,  Å Ç
$str  É ã
)  ã å
;  å ç
if
ÃÃ 
(
ÃÃ 
path
ÃÃ 
==
ÃÃ 
$str
ÃÃ 
)
ÃÃ 
return
ÕÕ 
;
ÕÕ 
AssetDatabase
œœ 
.
œœ 
CreateAsset
œœ %
(
œœ% &
ScriptableObject
œœ& 6
.
œœ6 7
CreateInstance
œœ7 E
<
œœE F

GroupBrush
œœF P
>
œœP Q
(
œœQ R
)
œœR S
,
œœS T
path
œœU Y
)
œœY Z
;
œœZ [
}
–– 	
}
—— 
[
÷÷ 
CustomEditor
÷÷ 
(
÷÷ 
typeof
÷÷ 
(
÷÷ 

GroupBrush
÷÷ #
)
÷÷# $
)
÷÷$ %
]
÷÷% &
public
◊◊ 

class
◊◊ 
GroupBrushEditor
◊◊ !
:
◊◊" #
GridBrushEditor
◊◊$ 3
{
ÿÿ 
}
ŸŸ 
}⁄⁄ ì¨
óC:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Editor\Brushes\LineBrush\LineBrush.cs
	namespace 	
UnityEditor
 
. 
Tilemaps 
{ 
[ 
CustomGridBrush 
( 
true 
, 
false  
,  !
false" '
,' (
$str) 5
)5 6
]6 7
[ 
CreateAssetMenu 
( 
fileName 
= 
$str  0
,0 1
menuName2 :
=; <
$str= Q
)Q R
]R S
public 

class 
	LineBrush 
: 
	GridBrush &
{ 
public 
bool 
lineStartActive #
;# $
public 
bool 
fillGaps 
; 
public 

Vector3Int 
	lineStart #
=$ %

Vector3Int& 0
.0 1
zero1 5
;5 6
public"" 
bool"" 
IsMoving"" 
{"" 
get"" "
;""" #
private""$ +
set"", /
;""/ 0
}""1 2
public-- 
override-- 
void-- 
Paint-- "
(--" #

GridLayout--# -
grid--. 2
,--2 3

GameObject--4 >
brushTarget--? J
,--J K

Vector3Int--L V
position--W _
)--_ `
{.. 	
if// 
(// 
lineStartActive// 
)//  
{00 

Vector2Int11 
startPos11 #
=11$ %
new11& )

Vector2Int11* 4
(114 5
	lineStart115 >
.11> ?
x11? @
,11@ A
	lineStart11B K
.11K L
y11L M
)11M N
;11N O

Vector2Int22 
endPos22 !
=22" #
new22$ '

Vector2Int22( 2
(222 3
position223 ;
.22; <
x22< =
,22= >
position22? G
.22G H
y22H I
)22I J
;22J K
if33 
(33 
startPos33 
==33 
endPos33  &
)33& '
base44 
.44 
Paint44 
(44 
grid44 #
,44# $
brushTarget44% 0
,440 1
position442 :
)44: ;
;44; <
else55 
{66 
foreach77 
(77 
var77  
point77! &
in77' )
GetPointsOnLine77* 9
(779 :
startPos77: B
,77B C
endPos77D J
,77J K
fillGaps77L T
)77T U
)77U V
{88 

Vector3Int99 "
paintPos99# +
=99, -
new99. 1

Vector3Int992 <
(99< =
point99= B
.99B C
x99C D
,99D E
point99F K
.99K L
y99L M
,99M N
position99O W
.99W X
z99X Y
)99Y Z
;99Z [
base:: 
.:: 
Paint:: "
(::" #
grid::# '
,::' (
brushTarget::) 4
,::4 5
paintPos::6 >
)::> ?
;::? @
};; 
}<< 
lineStartActive== 
===  !
false==" '
;==' (
}>> 
else?? 
if?? 
(?? 
IsMoving?? 
)?? 
{@@ 
baseAA 
.AA 
PaintAA 
(AA 
gridAA 
,AA  
brushTargetAA! ,
,AA, -
positionAA. 6
)AA6 7
;AA7 8
}BB 
elseCC 
{DD 
	lineStartEE 
=EE 
positionEE $
;EE$ %
lineStartActiveFF 
=FF  !
trueFF" &
;FF& '
}GG 
}HH 	
publicJJ 
overrideJJ 
voidJJ 
	MoveStartJJ &
(JJ& '

GridLayoutJJ' 1

gridLayoutJJ2 <
,JJ< =

GameObjectJJ> H
brushTargetJJI T
,JJT U
	BoundsIntJJV _
positionJJ` h
)JJh i
{KK 	
baseLL 
.LL 
	MoveStartLL 
(LL 

gridLayoutLL %
,LL% &
brushTargetLL' 2
,LL2 3
positionLL4 <
)LL< =
;LL= >
IsMovingMM 
=MM 
trueMM 
;MM 
}NN 	
publicPP 
overridePP 
voidPP 
MoveEndPP $
(PP$ %

GridLayoutPP% /

gridLayoutPP0 :
,PP: ;

GameObjectPP< F
brushTargetPPG R
,PPR S
	BoundsIntPPT ]
positionPP^ f
)PPf g
{QQ 	
baseRR 
.RR 
MoveEndRR 
(RR 

gridLayoutRR #
,RR# $
brushTargetRR% 0
,RR0 1
positionRR2 :
)RR: ;
;RR; <
IsMovingSS 
=SS 
falseSS 
;SS 
}TT 	
publicYY 
staticYY 
IEnumerableYY !
<YY! "

Vector2IntYY" ,
>YY, -
GetPointsOnLineYY. =
(YY= >

Vector2IntYY> H
startPosYYI Q
,YYQ R

Vector2IntYYS ]
endPosYY^ d
,YYd e
boolYYf j
fillGapsYYk s
)YYs t
{ZZ 	
var[[ 
points[[ 
=[[ 
GetPointsOnLine[[ (
([[( )
startPos[[) 1
,[[1 2
endPos[[3 9
)[[9 :
;[[: ;
if\\ 
(\\ 
fillGaps\\ 
)\\ 
{]] 
var^^ 
rise^^ 
=^^ 
endPos^^ !
.^^! "
y^^" #
-^^$ %
startPos^^& .
.^^. /
y^^/ 0
;^^0 1
var__ 
run__ 
=__ 
endPos__  
.__  !
x__! "
-__# $
startPos__% -
.__- .
x__. /
;__/ 0
ifaa 
(aa 
riseaa 
!=aa 
$numaa 
||aa  
runaa! $
!=aa% '
$numaa( )
)aa) *
{bb 
varcc 

extraStartcc "
=cc# $
startPoscc% -
;cc- .
vardd 
extraEnddd  
=dd! "
endPosdd# )
;dd) *
ifgg 
(gg 
Mathfgg 
.gg 
Absgg !
(gg! "
risegg" &
)gg& '
>=gg( *
Mathfgg+ 0
.gg0 1
Absgg1 4
(gg4 5
rungg5 8
)gg8 9
)gg9 :
{hh 
ifjj 
(jj 
risejj  
>jj! "
$numjj# $
)jj$ %
{kk 

extraStartll &
.ll& '
yll' (
+=ll) +
$numll, -
;ll- .
extraEndmm $
.mm$ %
ymm% &
+=mm' )
$nummm* +
;mm+ ,
}nn 
elsepp 
{qq 

extraStartss &
.ss& '
yss' (
-=ss) +
$numss, -
;ss- .
extraEndtt $
.tt$ %
ytt% &
-=tt' )
$numtt* +
;tt+ ,
}uu 
}vv 
elseww 
{xx 
if{{ 
({{ 
run{{ 
>{{  !
$num{{" #
){{# $
{|| 

extraStart}} &
.}}& '
x}}' (
+=}}) +
$num}}, -
;}}- .
extraEnd~~ $
.~~$ %
x~~% &
+=~~' )
$num~~* +
;~~+ ,
} 
else
ÅÅ 
{
ÇÇ 

extraStart
ÉÉ &
.
ÉÉ& '
x
ÉÉ' (
-=
ÉÉ) +
$num
ÉÉ, -
;
ÉÉ- .
extraEnd
ÑÑ $
.
ÑÑ$ %
x
ÑÑ% &
-=
ÑÑ' )
$num
ÑÑ* +
;
ÑÑ+ ,
}
ÖÖ 
}
ÜÜ 
var
àà 
extraPoints
àà #
=
àà$ %
GetPointsOnLine
àà& 5
(
àà5 6

extraStart
àà6 @
,
àà@ A
extraEnd
ààB J
)
ààJ K
;
ààK L
extraPoints
ââ 
=
ââ  !
extraPoints
ââ" -
.
ââ- .
Except
ââ. 4
(
ââ4 5
new
ââ5 8
[
ââ8 9
]
ââ9 :
{
ââ; <
extraEnd
ââ= E
}
ââF G
)
ââG H
;
ââH I
points
ää 
=
ää 
points
ää #
.
ää# $
Union
ää$ )
(
ää) *
extraPoints
ää* 5
)
ää5 6
;
ää6 7
}
ãã 
}
çç 
return
èè 
points
èè 
;
èè 
}
êê 	
public
ôô 
static
ôô 
IEnumerable
ôô !
<
ôô! "

Vector2Int
ôô" ,
>
ôô, -
GetPointsOnLine
ôô. =
(
ôô= >

Vector2Int
ôô> H
p1
ôôI K
,
ôôK L

Vector2Int
ôôM W
p2
ôôX Z
)
ôôZ [
{
öö 	
int
õõ 
x0
õõ 
=
õõ 
p1
õõ 
.
õõ 
x
õõ 
;
õõ 
int
úú 
y0
úú 
=
úú 
p1
úú 
.
úú 
y
úú 
;
úú 
int
ùù 
x1
ùù 
=
ùù 
p2
ùù 
.
ùù 
x
ùù 
;
ùù 
int
ûû 
y1
ûû 
=
ûû 
p2
ûû 
.
ûû 
y
ûû 
;
ûû 
bool
†† 
steep
†† 
=
†† 
Math
†† 
.
†† 
Abs
†† !
(
††! "
y1
††" $
-
††% &
y0
††' )
)
††) *
>
††+ ,
Math
††- 1
.
††1 2
Abs
††2 5
(
††5 6
x1
††6 8
-
††9 :
x0
††; =
)
††= >
;
††> ?
if
°° 
(
°° 
steep
°° 
)
°° 
{
¢¢ 
int
££ 
t
££ 
;
££ 
t
§§ 
=
§§ 
x0
§§ 
;
§§ 
x0
•• 
=
•• 
y0
•• 
;
•• 
y0
¶¶ 
=
¶¶ 
t
¶¶ 
;
¶¶ 
t
ßß 
=
ßß 
x1
ßß 
;
ßß 
x1
®® 
=
®® 
y1
®® 
;
®® 
y1
©© 
=
©© 
t
©© 
;
©© 
}
™™ 
if
´´ 
(
´´ 
x0
´´ 
>
´´ 
x1
´´ 
)
´´ 
{
¨¨ 
int
≠≠ 
t
≠≠ 
;
≠≠ 
t
ÆÆ 
=
ÆÆ 
x0
ÆÆ 
;
ÆÆ 
x0
ØØ 
=
ØØ 
x1
ØØ 
;
ØØ 
x1
∞∞ 
=
∞∞ 
t
∞∞ 
;
∞∞ 
t
±± 
=
±± 
y0
±± 
;
±± 
y0
≤≤ 
=
≤≤ 
y1
≤≤ 
;
≤≤ 
y1
≥≥ 
=
≥≥ 
t
≥≥ 
;
≥≥ 
}
¥¥ 
int
µµ 
dx
µµ 
=
µµ 
x1
µµ 
-
µµ 
x0
µµ 
;
µµ 
int
∂∂ 
dy
∂∂ 
=
∂∂ 
Math
∂∂ 
.
∂∂ 
Abs
∂∂ 
(
∂∂ 
y1
∂∂  
-
∂∂! "
y0
∂∂# %
)
∂∂% &
;
∂∂& '
int
∑∑ 
error
∑∑ 
=
∑∑ 
dx
∑∑ 
/
∑∑ 
$num
∑∑ 
;
∑∑ 
int
∏∏ 
ystep
∏∏ 
=
∏∏ 
(
∏∏ 
y0
∏∏ 
<
∏∏ 
y1
∏∏  
)
∏∏  !
?
∏∏" #
$num
∏∏$ %
:
∏∏& '
-
∏∏( )
$num
∏∏) *
;
∏∏* +
int
ππ 
y
ππ 
=
ππ 
y0
ππ 
;
ππ 
for
∫∫ 
(
∫∫ 
int
∫∫ 
x
∫∫ 
=
∫∫ 
x0
∫∫ 
;
∫∫ 
x
∫∫ 
<=
∫∫ !
x1
∫∫" $
;
∫∫$ %
x
∫∫& '
++
∫∫' )
)
∫∫) *
{
ªª 
yield
ºº 
return
ºº 
new
ºº  

Vector2Int
ºº! +
(
ºº+ ,
(
ºº, -
steep
ºº- 2
?
ºº3 4
y
ºº5 6
:
ºº7 8
x
ºº9 :
)
ºº: ;
,
ºº; <
(
ºº= >
steep
ºº> C
?
ººD E
x
ººF G
:
ººH I
y
ººJ K
)
ººK L
)
ººL M
;
ººM N
error
ΩΩ 
=
ΩΩ 
error
ΩΩ 
-
ΩΩ 
dy
ΩΩ  "
;
ΩΩ" #
if
ææ 
(
ææ 
error
ææ 
<
ææ 
$num
ææ 
)
ææ 
{
øø 
y
¿¿ 
+=
¿¿ 
ystep
¿¿ 
;
¿¿ 
error
¡¡ 
+=
¡¡ 
dx
¡¡ 
;
¡¡  
}
¬¬ 
}
√√ 
yield
ƒƒ 
break
ƒƒ 
;
ƒƒ 
}
≈≈ 	
}
∆∆ 
[
ÀÀ 
CustomEditor
ÀÀ 
(
ÀÀ 
typeof
ÀÀ 
(
ÀÀ 
	LineBrush
ÀÀ "
)
ÀÀ" #
)
ÀÀ# $
]
ÀÀ$ %
public
ÃÃ 

class
ÃÃ 
LineBrushEditor
ÃÃ  
:
ÃÃ! "
GridBrushEditor
ÃÃ# 2
{
ÕÕ 
private
ŒŒ 
	LineBrush
ŒŒ 
	lineBrush
ŒŒ #
{
ŒŒ$ %
get
ŒŒ& )
{
ŒŒ* +
return
ŒŒ, 2
target
ŒŒ3 9
as
ŒŒ: <
	LineBrush
ŒŒ= F
;
ŒŒF G
}
ŒŒH I
}
ŒŒJ K
private
œœ 
Tilemap
œœ 
lastTilemap
œœ #
;
œœ# $
public
⁄⁄ 
override
⁄⁄ 
void
⁄⁄ 
OnPaintSceneGUI
⁄⁄ ,
(
⁄⁄, -

GridLayout
⁄⁄- 7
grid
⁄⁄8 <
,
⁄⁄< =

GameObject
⁄⁄> H
brushTarget
⁄⁄I T
,
⁄⁄T U
	BoundsInt
⁄⁄V _
position
⁄⁄` h
,
⁄⁄h i
GridBrushBase
⁄⁄j w
.
⁄⁄w x
Tool
⁄⁄x |
tool⁄⁄} Å
,⁄⁄Å Ç
bool⁄⁄É á
	executing⁄⁄à ë
)⁄⁄ë í
{
€€ 	
base
‹‹ 
.
‹‹ 
OnPaintSceneGUI
‹‹  
(
‹‹  !
grid
‹‹! %
,
‹‹% &
brushTarget
‹‹' 2
,
‹‹2 3
position
‹‹4 <
,
‹‹< =
tool
‹‹> B
,
‹‹B C
	executing
‹‹D M
)
‹‹M N
;
‹‹N O
if
›› 
(
›› 
	lineBrush
›› 
.
›› 
lineStartActive
›› )
)
››) *
{
ﬁﬁ 
Tilemap
ﬂﬂ 
tilemap
ﬂﬂ 
=
ﬂﬂ  !
brushTarget
ﬂﬂ" -
.
ﬂﬂ- .
GetComponent
ﬂﬂ. :
<
ﬂﬂ: ;
Tilemap
ﬂﬂ; B
>
ﬂﬂB C
(
ﬂﬂC D
)
ﬂﬂD E
;
ﬂﬂE F
if
‡‡ 
(
‡‡ 
tilemap
‡‡ 
!=
‡‡ 
null
‡‡ #
)
‡‡# $
lastTilemap
·· 
=
··  !
tilemap
··" )
;
··) *

Vector2Int
‰‰ 
startPos
‰‰ #
=
‰‰$ %
new
‰‰& )

Vector2Int
‰‰* 4
(
‰‰4 5
	lineBrush
‰‰5 >
.
‰‰> ?
	lineStart
‰‰? H
.
‰‰H I
x
‰‰I J
,
‰‰J K
	lineBrush
‰‰L U
.
‰‰U V
	lineStart
‰‰V _
.
‰‰_ `
y
‰‰` a
)
‰‰a b
;
‰‰b c

Vector2Int
ÂÂ 
endPos
ÂÂ !
=
ÂÂ" #
new
ÂÂ$ '

Vector2Int
ÂÂ( 2
(
ÂÂ2 3
position
ÂÂ3 ;
.
ÂÂ; <
x
ÂÂ< =
,
ÂÂ= >
position
ÂÂ? G
.
ÂÂG H
y
ÂÂH I
)
ÂÂI J
;
ÂÂJ K
if
ÊÊ 
(
ÊÊ 
startPos
ÊÊ 
==
ÊÊ 
endPos
ÊÊ  &
)
ÊÊ& '
PaintPreview
ÁÁ  
(
ÁÁ  !
grid
ÁÁ! %
,
ÁÁ% &
brushTarget
ÁÁ' 2
,
ÁÁ2 3
position
ÁÁ4 <
.
ÁÁ< =
min
ÁÁ= @
)
ÁÁ@ A
;
ÁÁA B
else
ËË 
{
ÈÈ 
foreach
ÍÍ 
(
ÍÍ 
var
ÍÍ  
point
ÍÍ! &
in
ÍÍ' )
	LineBrush
ÍÍ* 3
.
ÍÍ3 4
GetPointsOnLine
ÍÍ4 C
(
ÍÍC D
startPos
ÍÍD L
,
ÍÍL M
endPos
ÍÍN T
,
ÍÍT U
	lineBrush
ÍÍV _
.
ÍÍ_ `
fillGaps
ÍÍ` h
)
ÍÍh i
)
ÍÍi j
{
ÎÎ 

Vector3Int
ÏÏ "
paintPos
ÏÏ# +
=
ÏÏ, -
new
ÏÏ. 1

Vector3Int
ÏÏ2 <
(
ÏÏ< =
point
ÏÏ= B
.
ÏÏB C
x
ÏÏC D
,
ÏÏD E
point
ÏÏF K
.
ÏÏK L
y
ÏÏL M
,
ÏÏM N
position
ÏÏO W
.
ÏÏW X
z
ÏÏX Y
)
ÏÏY Z
;
ÏÏZ [
PaintPreview
ÌÌ $
(
ÌÌ$ %
grid
ÌÌ% )
,
ÌÌ) *
brushTarget
ÌÌ+ 6
,
ÌÌ6 7
paintPos
ÌÌ8 @
)
ÌÌ@ A
;
ÌÌA B
}
ÓÓ 
}
ÔÔ 
if
ÒÒ 
(
ÒÒ 
Event
ÒÒ 
.
ÒÒ 
current
ÒÒ !
.
ÒÒ! "
type
ÒÒ" &
==
ÒÒ' )
	EventType
ÒÒ* 3
.
ÒÒ3 4
Repaint
ÒÒ4 ;
)
ÒÒ; <
{
ÚÚ 
var
ÛÛ 
min
ÛÛ 
=
ÛÛ 
	lineBrush
ÛÛ '
.
ÛÛ' (
	lineStart
ÛÛ( 1
;
ÛÛ1 2
var
ÙÙ 
max
ÙÙ 
=
ÙÙ 
	lineBrush
ÙÙ '
.
ÙÙ' (
	lineStart
ÙÙ( 1
+
ÙÙ2 3
position
ÙÙ4 <
.
ÙÙ< =
size
ÙÙ= A
;
ÙÙA B
GL
˜˜ 
.
˜˜ 

PushMatrix
˜˜ !
(
˜˜! "
)
˜˜" #
;
˜˜# $
GL
¯¯ 
.
¯¯ 

MultMatrix
¯¯ !
(
¯¯! "
GUI
¯¯" %
.
¯¯% &
matrix
¯¯& ,
)
¯¯, -
;
¯¯- .
GL
˘˘ 
.
˘˘ 
Begin
˘˘ 
(
˘˘ 
GL
˘˘ 
.
˘˘  
LINES
˘˘  %
)
˘˘% &
;
˘˘& '
Handles
˙˙ 
.
˙˙ 
color
˙˙ !
=
˙˙" #
Color
˙˙$ )
.
˙˙) *
blue
˙˙* .
;
˙˙. /
Handles
˚˚ 
.
˚˚ 
DrawLine
˚˚ $
(
˚˚$ %
new
˚˚% (
Vector3
˚˚) 0
(
˚˚0 1
min
˚˚1 4
.
˚˚4 5
x
˚˚5 6
,
˚˚6 7
min
˚˚8 ;
.
˚˚; <
y
˚˚< =
,
˚˚= >
min
˚˚? B
.
˚˚B C
z
˚˚C D
)
˚˚D E
,
˚˚E F
new
˚˚G J
Vector3
˚˚K R
(
˚˚R S
max
˚˚S V
.
˚˚V W
x
˚˚W X
,
˚˚X Y
min
˚˚Z ]
.
˚˚] ^
y
˚˚^ _
,
˚˚_ `
min
˚˚a d
.
˚˚d e
z
˚˚e f
)
˚˚f g
)
˚˚g h
;
˚˚h i
Handles
¸¸ 
.
¸¸ 
DrawLine
¸¸ $
(
¸¸$ %
new
¸¸% (
Vector3
¸¸) 0
(
¸¸0 1
max
¸¸1 4
.
¸¸4 5
x
¸¸5 6
,
¸¸6 7
min
¸¸8 ;
.
¸¸; <
y
¸¸< =
,
¸¸= >
min
¸¸? B
.
¸¸B C
z
¸¸C D
)
¸¸D E
,
¸¸E F
new
¸¸G J
Vector3
¸¸K R
(
¸¸R S
max
¸¸S V
.
¸¸V W
x
¸¸W X
,
¸¸X Y
max
¸¸Z ]
.
¸¸] ^
y
¸¸^ _
,
¸¸_ `
min
¸¸a d
.
¸¸d e
z
¸¸e f
)
¸¸f g
)
¸¸g h
;
¸¸h i
Handles
˝˝ 
.
˝˝ 
DrawLine
˝˝ $
(
˝˝$ %
new
˝˝% (
Vector3
˝˝) 0
(
˝˝0 1
max
˝˝1 4
.
˝˝4 5
x
˝˝5 6
,
˝˝6 7
max
˝˝8 ;
.
˝˝; <
y
˝˝< =
,
˝˝= >
min
˝˝? B
.
˝˝B C
z
˝˝C D
)
˝˝D E
,
˝˝E F
new
˝˝G J
Vector3
˝˝K R
(
˝˝R S
min
˝˝S V
.
˝˝V W
x
˝˝W X
,
˝˝X Y
max
˝˝Z ]
.
˝˝] ^
y
˝˝^ _
,
˝˝_ `
min
˝˝a d
.
˝˝d e
z
˝˝e f
)
˝˝f g
)
˝˝g h
;
˝˝h i
Handles
˛˛ 
.
˛˛ 
DrawLine
˛˛ $
(
˛˛$ %
new
˛˛% (
Vector3
˛˛) 0
(
˛˛0 1
min
˛˛1 4
.
˛˛4 5
x
˛˛5 6
,
˛˛6 7
max
˛˛8 ;
.
˛˛; <
y
˛˛< =
,
˛˛= >
min
˛˛? B
.
˛˛B C
z
˛˛C D
)
˛˛D E
,
˛˛E F
new
˛˛G J
Vector3
˛˛K R
(
˛˛R S
min
˛˛S V
.
˛˛V W
x
˛˛W X
,
˛˛X Y
min
˛˛Z ]
.
˛˛] ^
y
˛˛^ _
,
˛˛_ `
min
˛˛a d
.
˛˛d e
z
˛˛e f
)
˛˛f g
)
˛˛g h
;
˛˛h i
GL
ˇˇ 
.
ˇˇ 
End
ˇˇ 
(
ˇˇ 
)
ˇˇ 
;
ˇˇ 
GL
ÄÄ 
.
ÄÄ 
	PopMatrix
ÄÄ  
(
ÄÄ  !
)
ÄÄ! "
;
ÄÄ" #
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 	
public
àà 
override
àà 
void
àà 
ClearPreview
àà )
(
àà) *
)
àà* +
{
ââ 	
base
ää 
.
ää 
ClearPreview
ää 
(
ää 
)
ää 
;
ää  
if
ãã 
(
ãã 
lastTilemap
ãã 
!=
ãã 
null
ãã #
)
ãã# $
{
åå 
lastTilemap
çç 
.
çç (
ClearAllEditorPreviewTiles
çç 6
(
çç6 7
)
çç7 8
;
çç8 9
lastTilemap
éé 
=
éé 
null
éé "
;
éé" #
}
èè 
}
êê 	
}
ëë 
}íí «^
õC:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Editor\Brushes\PrefabBrush\PrefabBrush.cs
	namespace 	
UnityEditor
 
. 
Tilemaps 
{ 
[

 
CreateAssetMenu

 
(

 
fileName

 
=

 
$str

  .
,

. /
menuName

0 8
=

9 :
$str

; Q
)

Q R
]

R S
[ 
CustomGridBrush 
( 
false 
, 
true  
,  !
false" '
,' (
$str) 7
)7 8
]8 9
public 

class 
PrefabBrush 
: 
	GridBrush (
{ 
private 
const 
float 
k_PerlinOffset *
=+ ,
$num- 4
;4 5
public 

GameObject 
[ 
] 
	m_Prefabs %
;% &
public 
float 
m_PerlinScale "
=# $
$num% )
;) *
public 
Vector3 
m_Anchor 
=  !
new" %
Vector3& -
(- .
$num. 2
,2 3
$num4 8
,8 9
$num: >
)> ?
;? @
private 

GameObject 
prev_brushTarget +
;+ ,
private 

Vector3Int 
prev_position (
=) *

Vector3Int+ 5
.5 6
one6 9
*: ;
Int32< A
.A B
MaxValueB J
;J K
public&& 
override&& 
void&& 
Paint&& "
(&&" #

GridLayout&&# -
grid&&. 2
,&&2 3

GameObject&&4 >
brushTarget&&? J
,&&J K

Vector3Int&&L V
position&&W _
)&&_ `
{'' 	
if(( 
((( 
position(( 
==(( 
prev_position(( )
)(() *
{)) 
return** 
;** 
}++ 
prev_position,, 
=,, 
position,, $
;,,$ %
if-- 
(-- 
brushTarget-- 
)-- 
{-- 
prev_brushTarget..  
=..! "
brushTarget..# .
;... /
}// 
brushTarget00 
=00 
prev_brushTarget00 *
;00* +
if33 
(33 
brushTarget33 
.33 
layer33 !
==33" $
$num33% '
)33' (
return44 
;44 
int66 
index66 
=66 
Mathf66 
.66 
Clamp66 #
(66# $
Mathf66$ )
.66) *

FloorToInt66* 4
(664 5
GetPerlinValue665 C
(66C D
position66D L
,66L M
m_PerlinScale66N [
,66[ \
k_PerlinOffset66] k
)66k l
*66m n
	m_Prefabs66o x
.66x y
Length66y 
)	66 Ä
,
66Ä Å
$num
66Ç É
,
66É Ñ
	m_Prefabs
66Ö é
.
66é è
Length
66è ï
-
66ñ ó
$num
66ò ô
)
66ô ö
;
66ö õ

GameObject77 
prefab77 
=77 
	m_Prefabs77  )
[77) *
index77* /
]77/ 0
;770 1

GameObject88 
instance88 
=88  !
(88" #

GameObject88# -
)88- .
PrefabUtility88/ <
.88< =
InstantiatePrefab88= N
(88N O
prefab88O U
)88U V
;88V W
if99 
(99 
instance99 
!=99 
null99  
)99  !
{:: 
Erase;; 
(;; 
grid;; 
,;; 
brushTarget;; '
,;;' (
position;;) 1
);;1 2
;;;2 3
Undo== 
.== !
MoveGameObjectToScene== *
(==* +
instance==+ 3
,==3 4
brushTarget==5 @
.==@ A
scene==A F
,==F G
$str==H W
)==W X
;==X Y
Undo>> 
.>> %
RegisterCreatedObjectUndo>> .
(>>. /
(>>/ 0
Object>>0 6
)>>6 7
instance>>7 ?
,>>? @
$str>>A P
)>>P Q
;>>Q R
instance?? 
.?? 
	transform?? "
.??" #
	SetParent??# ,
(??, -
brushTarget??- 8
.??8 9
	transform??9 B
)??B C
;??C D
instance@@ 
.@@ 
	transform@@ "
.@@" #
position@@# +
=@@, -
grid@@. 2
.@@2 3
LocalToWorld@@3 ?
(@@? @
grid@@@ D
.@@D E#
CellToLocalInterpolated@@E \
(@@\ ]
position@@] e
+@@f g
m_Anchor@@h p
)@@p q
)@@q r
;@@r s
}AA 
}BB 	
publicKK 
overrideKK 
voidKK 
EraseKK "
(KK" #

GridLayoutKK# -
gridKK. 2
,KK2 3

GameObjectKK4 >
brushTargetKK? J
,KKJ K

Vector3IntKKL V
positionKKW _
)KK_ `
{LL 	
ifMM 
(MM 
brushTargetMM 
)MM 
{NN 
prev_brushTargetOO  
=OO! "
brushTargetOO# .
;OO. /
}PP 
brushTargetQQ 
=QQ 
prev_brushTargetQQ *
;QQ* +
ifSS 
(SS 
brushTargetSS 
.SS 
layerSS !
==SS" $
$numSS% '
)SS' (
returnTT 
;TT 
	TransformVV 
erasedVV 
=VV 
GetObjectInCellVV .
(VV. /
gridVV/ 3
,VV3 4
brushTargetVV5 @
.VV@ A
	transformVVA J
,VVJ K
positionVVL T
)VVT U
;VVU V
ifWW 
(WW 
erasedWW 
!=WW 
nullWW 
)WW 
UndoXX 
.XX "
DestroyObjectImmediateXX +
(XX+ ,
erasedXX, 2
.XX2 3

gameObjectXX3 =
)XX= >
;XX> ?
}YY 	
private[[ 
static[[ 
	Transform[[  
GetObjectInCell[[! 0
([[0 1

GridLayout[[1 ;
grid[[< @
,[[@ A
	Transform[[B K
parent[[L R
,[[R S

Vector3Int[[T ^
position[[_ g
)[[g h
{\\ 	
int]] 

childCount]] 
=]] 
parent]] #
.]]# $

childCount]]$ .
;]]. /
Vector3^^ 
min^^ 
=^^ 
grid^^ 
.^^ 
LocalToWorld^^ +
(^^+ ,
grid^^, 0
.^^0 1#
CellToLocalInterpolated^^1 H
(^^H I
position^^I Q
)^^Q R
)^^R S
;^^S T
Vector3__ 
max__ 
=__ 
grid__ 
.__ 
LocalToWorld__ +
(__+ ,
grid__, 0
.__0 1#
CellToLocalInterpolated__1 H
(__H I
position__I Q
+__R S

Vector3Int__T ^
.__^ _
one___ b
)__b c
)__c d
;__d e
Bounds`` 
bounds`` 
=`` 
new`` 
Bounds``  &
(``& '
(``' (
max``( +
+``, -
min``. 1
)``1 2
*``2 3
$num``3 6
,``6 7
max``8 ;
-``< =
min``> A
)``A B
;``B C
forbb 
(bb 
intbb 
ibb 
=bb 
$numbb 
;bb 
ibb 
<bb 

childCountbb  *
;bb* +
ibb, -
++bb- /
)bb/ 0
{cc 
	Transformdd 
childdd 
=dd  !
parentdd" (
.dd( )
GetChilddd) 1
(dd1 2
idd2 3
)dd3 4
;dd4 5
ifee 
(ee 
boundsee 
.ee 
Containsee #
(ee# $
childee$ )
.ee) *
positionee* 2
)ee2 3
)ee3 4
returnff 
childff  
;ff  !
}gg 
returnhh 
nullhh 
;hh 
}ii 	
privatekk 
statickk 
floatkk 
GetPerlinValuekk +
(kk+ ,

Vector3Intkk, 6
positionkk7 ?
,kk? @
floatkkA F
scalekkG L
,kkL M
floatkkN S
offsetkkT Z
)kkZ [
{ll 	
returnmm 
Mathfmm 
.mm 
PerlinNoisemm $
(mm$ %
(mm% &
positionmm& .
.mm. /
xmm/ 0
+mm1 2
offsetmm3 9
)mm9 :
*mm: ;
scalemm; @
,mm@ A
(mmB C
positionmmC K
.mmK L
ymmL M
+mmN O
offsetmmP V
)mmV W
*mmW X
scalemmX ]
)mm] ^
;mm^ _
}nn 	
}oo 
[tt 
CustomEditortt 
(tt 
typeoftt 
(tt 
PrefabBrushtt $
)tt$ %
)tt% &
]tt& '
publicuu 

classuu 
PrefabBrushEditoruu "
:uu# $
GridBrushEditoruu% 4
{vv 
privateww 
PrefabBrushww 
prefabBrushww '
{ww( )
getww* -
{ww. /
returnww0 6
targetww7 =
asww> @
PrefabBrushwwA L
;wwL M
}wwN O
}wwP Q
privateyy 
SerializedPropertyyy "
	m_Prefabsyy# ,
;yy, -
privatezz 
SerializedPropertyzz "
m_Anchorzz# +
;zz+ ,
private{{ 
SerializedObject{{  
m_SerializedObject{{! 3
;{{3 4
	protected}} 
override}} 
void}} 
OnEnable}}  (
(}}( )
)}}) *
{~~ 	
base 
. 
OnEnable 
( 
) 
;  
m_SerializedObject
ÄÄ 
=
ÄÄ  
new
ÄÄ! $
SerializedObject
ÄÄ% 5
(
ÄÄ5 6
target
ÄÄ6 <
)
ÄÄ< =
;
ÄÄ= >
	m_Prefabs
ÅÅ 
=
ÅÅ  
m_SerializedObject
ÅÅ *
.
ÅÅ* +
FindProperty
ÅÅ+ 7
(
ÅÅ7 8
$str
ÅÅ8 C
)
ÅÅC D
;
ÅÅD E
m_Anchor
ÇÇ 
=
ÇÇ  
m_SerializedObject
ÇÇ )
.
ÇÇ) *
FindProperty
ÇÇ* 6
(
ÇÇ6 7
$str
ÇÇ7 A
)
ÇÇA B
;
ÇÇB C
}
ÉÉ 	
public
ââ 
override
ââ 
void
ââ !
OnPaintInspectorGUI
ââ 0
(
ââ0 1
)
ââ1 2
{
ää 	 
m_SerializedObject
ãã 
.
ãã &
UpdateIfRequiredOrScript
ãã 7
(
ãã7 8
)
ãã8 9
;
ãã9 :
prefabBrush
åå 
.
åå 
m_PerlinScale
åå %
=
åå& '
EditorGUILayout
åå( 7
.
åå7 8
Slider
åå8 >
(
åå> ?
$str
åå? M
,
ååM N
prefabBrush
ååO Z
.
ååZ [
m_PerlinScale
åå[ h
,
ååh i
$num
ååj p
,
ååp q
$num
åår x
)
ååx y
;
ååy z
EditorGUILayout
çç 
.
çç 
PropertyField
çç )
(
çç) *
	m_Prefabs
çç* 3
,
çç3 4
true
çç5 9
)
çç9 :
;
çç: ;
EditorGUILayout
éé 
.
éé 
PropertyField
éé )
(
éé) *
m_Anchor
éé* 2
)
éé2 3
;
éé3 4 
m_SerializedObject
èè 
.
èè 0
"ApplyModifiedPropertiesWithoutUndo
èè A
(
èèA B
)
èèB C
;
èèC D
}
êê 	
}
ëë 
}íí ¬€
õC:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Editor\Brushes\RandomBrush\RandomBrush.cs
	namespace 	
UnityEditor
 
. 
Tilemaps 
{ 
[ 
CustomGridBrush 
( 
false 
, 
false !
,! "
false# (
,( )
$str* 8
)8 9
]9 :
[ 
CreateAssetMenu 
( 
fileName 
= 
$str  2
,2 3
menuName4 <
== >
$str? U
)U V
]V W
public 

class 
RandomBrush 
: 
	GridBrush (
{ 
internal 
struct 
SizeEnumerator &
:' (
IEnumerator) 4
<4 5

Vector3Int5 ?
>? @
{ 	
private 
readonly 

Vector3Int '
_min( ,
,, -
_max. 2
,2 3
_delta4 :
;: ;
private 

Vector3Int 
_current '
;' (
public 
SizeEnumerator !
(! "

Vector3Int" ,
min- 0
,0 1

Vector3Int2 <
max= @
,@ A

Vector3IntB L
deltaM R
)R S
{ 
_min 
= 
_current 
=  !
min" %
;% &
_max 
= 
max 
; 
_delta 
= 
delta 
; 
Reset 
( 
) 
; 
} 
public 
SizeEnumerator !
GetEnumerator" /
(/ 0
)0 1
{ 
return   
this   
;   
}!! 
public## 
bool## 
MoveNext##  
(##  !
)##! "
{$$ 
if%% 
(%% 
_current%% 
.%% 
z%% 
>=%% !
_max%%" &
.%%& '
z%%' (
)%%( )
return&& 
false&&  
;&&  !
_current(( 
.(( 
x(( 
+=(( 
_delta(( $
.(($ %
x((% &
;((& '
if)) 
()) 
_current)) 
.)) 
x)) 
>=)) !
_max))" &
.))& '
x))' (
)))( )
{** 
_current++ 
.++ 
x++ 
=++  
_min++! %
.++% &
x++& '
;++' (
_current,, 
.,, 
y,, 
+=,, !
_delta,," (
.,,( )
y,,) *
;,,* +
if-- 
(-- 
_current--  
.--  !
y--! "
>=--# %
_max--& *
.--* +
y--+ ,
)--, -
{.. 
_current//  
.//  !
y//! "
=//# $
_min//% )
.//) *
y//* +
;//+ ,
_current00  
.00  !
z00! "
+=00# %
_delta00& ,
.00, -
z00- .
;00. /
if11 
(11 
_current11 $
.11$ %
z11% &
>=11' )
_max11* .
.11. /
z11/ 0
)110 1
return22 "
false22# (
;22( )
}33 
}44 
return55 
true55 
;55 
}66 
public88 
void88 
Reset88 
(88 
)88 
{99 
_current:: 
=:: 
_min:: 
;::  
_current;; 
.;; 
x;; 
-=;; 
_delta;; $
.;;$ %
x;;% &
;;;& '
}<< 
public>> 

Vector3Int>> 
Current>> %
{>>& '
get>>( +
{>>, -
return>>. 4
_current>>5 =
;>>= >
}>>? @
}>>A B
object@@ 
IEnumerator@@ 
.@@ 
Current@@ &
{@@' (
get@@) ,
{@@- .
return@@/ 5
Current@@6 =
;@@= >
}@@? @
}@@A B
voidBB 
IDisposableBB 
.BB 
DisposeBB $
(BB$ %
)BB% &
{BB' (
}BB( )
}CC 	
[HH 	
SerializableHH	 
]HH 
publicII 
structII 
RandomTileSetII #
{JJ 	
publicLL 
TileBaseLL 
[LL 
]LL 
randomTilesLL )
;LL) *
}MM 	
publicRR 

Vector3IntRR 
randomTileSetSizeRR +
=RR, -

Vector3IntRR. 8
.RR8 9
oneRR9 <
;RR< =
publicWW 
RandomTileSetWW 
[WW 
]WW 
randomTileSetsWW -
;WW- .
public\\ 
bool\\ 
pickRandomTiles\\ #
;\\# $
publicaa 
boolaa 
addToRandomTilesaa $
;aa$ %
publicjj 
overridejj 
voidjj 
Paintjj "
(jj" #

GridLayoutjj# -
gridjj. 2
,jj2 3

GameObjectjj4 >
brushTargetjj? J
,jjJ K

Vector3IntjjL V
positionjjW _
)jj_ `
{kk 	
ifll 
(ll 
randomTileSetsll 
!=ll !
nullll" &
&&ll' )
randomTileSetsll* 8
.ll8 9
Lengthll9 ?
>ll@ A
$numllB C
)llC D
{mm 
ifnn 
(nn 
brushTargetnn 
==nn  "
nullnn# '
)nn' (
returnoo 
;oo 
varqq 
tilemapqq 
=qq 
brushTargetqq )
.qq) *
GetComponentqq* 6
<qq6 7
Tilemapqq7 >
>qq> ?
(qq? @
)qq@ A
;qqA B
ifrr 
(rr 
tilemaprr 
==rr 
nullrr #
)rr# $
returnss 
;ss 

Vector3Intuu 
minuu 
=uu  
positionuu! )
-uu* +
pivotuu, 1
;uu1 2
foreachvv 
(vv 
varvv 
startLocationvv *
invv+ -
newvv. 1
SizeEnumeratorvv2 @
(vv@ A
minvvA D
,vvD E
minvvF I
+vvJ K
sizevvL P
,vvP Q
randomTileSetSizevvR c
)vvc d
)vvd e
{ww 
varxx 
randomTileSetxx %
=xx& '
randomTileSetsxx( 6
[xx6 7
(xx7 8
intxx8 ;
)xx; <
(xx= >
randomTileSetsxx> L
.xxL M
LengthxxM S
*xxT U
UnityEnginexxV a
.xxa b
Randomxxb h
.xxh i
valuexxi n
)xxn o
]xxo p
;xxp q
varyy 
randomBoundsyy $
=yy% &
newyy' *
	BoundsIntyy+ 4
(yy4 5
startLocationyy5 B
,yyB C
randomTileSetSizeyyD U
)yyU V
;yyV W
tilemapzz 
.zz 
SetTilesBlockzz )
(zz) *
randomBoundszz* 6
,zz6 7
randomTileSetzz8 E
.zzE F
randomTileszzF Q
)zzQ R
;zzR S
}{{ 
}|| 
else}} 
{~~ 
base 
. 
Paint 
( 
grid 
,  
brushTarget! ,
,, -
position. 6
)6 7
;7 8
}
ÄÄ 
}
ÅÅ 	
public
ãã 
override
ãã 
void
ãã 
Pick
ãã !
(
ãã! "

GridLayout
ãã" ,

gridLayout
ãã- 7
,
ãã7 8

GameObject
ãã9 C
brushTarget
ããD O
,
ããO P
	BoundsInt
ããQ Z
bounds
ãã[ a
,
ããa b

Vector3Int
ããc m
	pickStart
ããn w
)
ããw x
{
åå 	
base
çç 
.
çç 
Pick
çç 
(
çç 

gridLayout
çç  
,
çç  !
brushTarget
çç" -
,
çç- .
bounds
çç/ 5
,
çç5 6
	pickStart
çç7 @
)
çç@ A
;
ççA B
if
éé 
(
éé 
!
éé 
pickRandomTiles
éé  
)
éé  !
return
èè 
;
èè 
Tilemap
ëë 
tilemap
ëë 
=
ëë 
brushTarget
ëë )
.
ëë) *
GetComponent
ëë* 6
<
ëë6 7
Tilemap
ëë7 >
>
ëë> ?
(
ëë? @
)
ëë@ A
;
ëëA B
if
íí 
(
íí 
tilemap
íí 
==
íí 
null
íí 
)
íí  
return
ìì 
;
ìì 
int
ïï 
i
ïï 
=
ïï 
$num
ïï 
;
ïï 
int
ññ 
count
ññ 
=
ññ 
(
ññ 
(
ññ 
bounds
ññ  
.
ññ  !
size
ññ! %
.
ññ% &
x
ññ& '
+
ññ( )
randomTileSetSize
ññ* ;
.
ññ; <
x
ññ< =
-
ññ> ?
$num
ññ@ A
)
ññA B
/
ññC D
randomTileSetSize
ññE V
.
ññV W
x
ññW X
)
ññX Y
*
óó 
(
óó 
(
óó 
bounds
óó "
.
óó" #
size
óó# '
.
óó' (
y
óó( )
+
óó* +
randomTileSetSize
óó, =
.
óó= >
y
óó> ?
-
óó@ A
$num
óóB C
)
óóC D
/
óóE F
randomTileSetSize
óóG X
.
óóX Y
y
óóY Z
)
óóZ [
*
òò 
(
òò 
(
òò 
bounds
òò "
.
òò" #
size
òò# '
.
òò' (
z
òò( )
+
òò* +
randomTileSetSize
òò, =
.
òò= >
z
òò> ?
-
òò@ A
$num
òòB C
)
òòC D
/
òòE F
randomTileSetSize
òòG X
.
òòX Y
z
òòY Z
)
òòZ [
;
òò[ \
if
ôô 
(
ôô 
addToRandomTiles
ôô  
)
ôô  !
{
öö 
i
õõ 
=
õõ 
randomTileSets
õõ "
!=
õõ# %
null
õõ& *
?
õõ+ ,
randomTileSets
õõ- ;
.
õõ; <
Length
õõ< B
:
õõC D
$num
õõE F
;
õõF G
count
úú 
+=
úú 
i
úú 
;
úú 
}
ùù 
Array
ûû 
.
ûû 
Resize
ûû 
(
ûû 
ref
ûû 
randomTileSets
ûû +
,
ûû+ ,
count
ûû- 2
)
ûû2 3
;
ûû3 4
foreach
†† 
(
†† 
var
†† 
startLocation
†† &
in
††' )
new
††* -
SizeEnumerator
††. <
(
††< =
bounds
††= C
.
††C D
min
††D G
,
††G H
bounds
††I O
.
††O P
max
††P S
,
††S T
randomTileSetSize
††U f
)
††f g
)
††g h
{
°° 
randomTileSets
¢¢ 
[
¢¢ 
i
¢¢  
]
¢¢  !
.
¢¢! "
randomTiles
¢¢" -
=
¢¢. /
new
¢¢0 3
TileBase
¢¢4 <
[
¢¢< =
randomTileSetSize
¢¢= N
.
¢¢N O
x
¢¢O P
*
¢¢Q R
randomTileSetSize
¢¢S d
.
¢¢d e
y
¢¢e f
*
¢¢g h
randomTileSetSize
¢¢i z
.
¢¢z {
z
¢¢{ |
]
¢¢| }
;
¢¢} ~
var
££ 
randomBounds
££  
=
££! "
new
££# &
	BoundsInt
££' 0
(
££0 1
startLocation
££1 >
,
££> ?
randomTileSetSize
££@ Q
)
££Q R
;
££R S
int
§§ 
j
§§ 
=
§§ 
$num
§§ 
;
§§ 
foreach
•• 
(
•• 

Vector3Int
•• #
pos
••$ '
in
••( *
randomBounds
••+ 7
.
••7 8 
allPositionsWithin
••8 J
)
••J K
{
¶¶ 
var
ßß 
tile
ßß 
=
ßß 
(
ßß  
pos
ßß  #
.
ßß# $
x
ßß$ %
<
ßß& '
bounds
ßß( .
.
ßß. /
max
ßß/ 2
.
ßß2 3
x
ßß3 4
&&
ßß5 7
pos
ßß8 ;
.
ßß; <
y
ßß< =
<
ßß> ?
bounds
ßß@ F
.
ßßF G
max
ßßG J
.
ßßJ K
y
ßßK L
&&
ßßM O
pos
ßßP S
.
ßßS T
z
ßßT U
<
ßßV W
bounds
ßßX ^
.
ßß^ _
max
ßß_ b
.
ßßb c
z
ßßc d
)
ßßd e
?
®® 
tilemap
®® !
.
®®! "
GetTile
®®" )
(
®®) *
pos
®®* -
)
®®- .
:
©© 
null
©© 
;
©© 
randomTileSets
™™ "
[
™™" #
i
™™# $
]
™™$ %
.
™™% &
randomTiles
™™& 1
[
™™1 2
j
™™2 3
++
™™3 5
]
™™5 6
=
™™7 8
tile
™™9 =
;
™™= >
}
´´ 
i
¨¨ 
++
¨¨ 
;
¨¨ 
}
≠≠ 
}
ÆÆ 	
}
ØØ 
[
¥¥ 
CustomEditor
¥¥ 
(
¥¥ 
typeof
¥¥ 
(
¥¥ 
RandomBrush
¥¥ $
)
¥¥$ %
)
¥¥% &
]
¥¥& '
public
µµ 

class
µµ 
RandomBrushEditor
µµ "
:
µµ# $
GridBrushEditor
µµ% 4
{
∂∂ 
private
∑∑ 
RandomBrush
∑∑ 
randomBrush
∑∑ '
{
∑∑( )
get
∑∑* -
{
∑∑. /
return
∑∑0 6
target
∑∑7 =
as
∑∑> @
RandomBrush
∑∑A L
;
∑∑L M
}
∑∑N O
}
∑∑P Q
private
∏∏ 

GameObject
∏∏ 
lastBrushTarget
∏∏ *
;
∏∏* +
public
¡¡ 
override
¡¡ 
void
¡¡ 
PaintPreview
¡¡ )
(
¡¡) *

GridLayout
¡¡* 4
grid
¡¡5 9
,
¡¡9 :

GameObject
¡¡; E
brushTarget
¡¡F Q
,
¡¡Q R

Vector3Int
¡¡S ]
position
¡¡^ f
)
¡¡f g
{
¬¬ 	
if
√√ 
(
√√ 
randomBrush
√√ 
.
√√ 
randomTileSets
√√ *
!=
√√+ -
null
√√. 2
&&
√√3 5
randomBrush
√√6 A
.
√√A B
randomTileSets
√√B P
.
√√P Q
Length
√√Q W
>
√√X Y
$num
√√Z [
)
√√[ \
{
ƒƒ 
base
≈≈ 
.
≈≈ 
PaintPreview
≈≈ !
(
≈≈! "
grid
≈≈" &
,
≈≈& '
null
≈≈( ,
,
≈≈, -
position
≈≈. 6
)
≈≈6 7
;
≈≈7 8
if
∆∆ 
(
∆∆ 
brushTarget
∆∆ 
==
∆∆  "
null
∆∆# '
)
∆∆' (
return
«« 
;
«« 
var
…… 
tilemap
…… 
=
…… 
brushTarget
…… )
.
……) *
GetComponent
……* 6
<
……6 7
Tilemap
……7 >
>
……> ?
(
……? @
)
……@ A
;
……A B
if
   
(
   
tilemap
   
==
   
null
   #
)
  # $
return
ÀÀ 
;
ÀÀ 

Vector3Int
ÕÕ 
min
ÕÕ 
=
ÕÕ  
position
ÕÕ! )
-
ÕÕ* +
randomBrush
ÕÕ, 7
.
ÕÕ7 8
pivot
ÕÕ8 =
;
ÕÕ= >
foreach
ŒŒ 
(
ŒŒ 
var
ŒŒ 
startLocation
ŒŒ *
in
ŒŒ+ -
new
ŒŒ. 1
RandomBrush
ŒŒ2 =
.
ŒŒ= >
SizeEnumerator
ŒŒ> L
(
ŒŒL M
min
ŒŒM P
,
ŒŒP Q
min
ŒŒR U
+
ŒŒV W
randomBrush
ŒŒX c
.
ŒŒc d
size
ŒŒd h
,
ŒŒh i
randomBrush
ŒŒj u
.
ŒŒu v 
randomTileSetSizeŒŒv á
)ŒŒá à
)ŒŒà â
{
œœ 
var
–– 
randomTileSet
–– %
=
––& '
randomBrush
––( 3
.
––3 4
randomTileSets
––4 B
[
––B C
(
––C D
int
––D G
)
––G H
(
––I J
randomBrush
––J U
.
––U V
randomTileSets
––V d
.
––d e
Length
––e k
*
––l m
UnityEngine
––n y
.
––y z
Random––z Ä
.––Ä Å
value––Å Ü
)––Ü á
]––á à
;––à â
var
—— 
randomBounds
—— $
=
——% &
new
——' *
	BoundsInt
——+ 4
(
——4 5
startLocation
——5 B
,
——B C
randomBrush
——D O
.
——O P
randomTileSetSize
——P a
)
——a b
;
——b c
int
““ 
j
““ 
=
““ 
$num
““ 
;
““ 
foreach
”” 
(
”” 

Vector3Int
”” '
pos
””( +
in
””, .
randomBounds
””/ ;
.
””; < 
allPositionsWithin
””< N
)
””N O
{
‘‘ 
tilemap
’’ 
.
’’  "
SetEditorPreviewTile
’’  4
(
’’4 5
pos
’’5 8
,
’’8 9
randomTileSet
’’: G
.
’’G H
randomTiles
’’H S
[
’’S T
j
’’T U
++
’’U W
]
’’W X
)
’’X Y
;
’’Y Z
}
÷÷ 
}
◊◊ 
lastBrushTarget
ÿÿ 
=
ÿÿ  !
brushTarget
ÿÿ" -
;
ÿÿ- .
}
ŸŸ 
else
⁄⁄ 
{
€€ 
base
‹‹ 
.
‹‹ 
PaintPreview
‹‹ !
(
‹‹! "
grid
‹‹" &
,
‹‹& '
brushTarget
‹‹( 3
,
‹‹3 4
position
‹‹5 =
)
‹‹= >
;
‹‹> ?
}
›› 
}
ﬁﬁ 	
public
„„ 
override
„„ 
void
„„ 
ClearPreview
„„ )
(
„„) *
)
„„* +
{
‰‰ 	
if
ÂÂ 
(
ÂÂ 
lastBrushTarget
ÂÂ 
!=
ÂÂ  "
null
ÂÂ# '
)
ÂÂ' (
{
ÊÊ 
var
ÁÁ 
tilemap
ÁÁ 
=
ÁÁ 
lastBrushTarget
ÁÁ -
.
ÁÁ- .
GetComponent
ÁÁ. :
<
ÁÁ: ;
Tilemap
ÁÁ; B
>
ÁÁB C
(
ÁÁC D
)
ÁÁD E
;
ÁÁE F
if
ËË 
(
ËË 
tilemap
ËË 
==
ËË 
null
ËË #
)
ËË# $
return
ÈÈ 
;
ÈÈ 
tilemap
ÎÎ 
.
ÎÎ (
ClearAllEditorPreviewTiles
ÎÎ 2
(
ÎÎ2 3
)
ÎÎ3 4
;
ÎÎ4 5
lastBrushTarget
ÌÌ 
=
ÌÌ  !
null
ÌÌ" &
;
ÌÌ& '
}
ÓÓ 
else
ÔÔ 
{
 
base
ÒÒ 
.
ÒÒ 
ClearPreview
ÒÒ !
(
ÒÒ! "
)
ÒÒ" #
;
ÒÒ# $
}
ÚÚ 
}
ÛÛ 	
public
˘˘ 
override
˘˘ 
void
˘˘ !
OnPaintInspectorGUI
˘˘ 0
(
˘˘0 1
)
˘˘1 2
{
˙˙ 	
	EditorGUI
˚˚ 
.
˚˚ 
BeginChangeCheck
˚˚ &
(
˚˚& '
)
˚˚' (
;
˚˚( )
randomBrush
¸¸ 
.
¸¸ 
pickRandomTiles
¸¸ '
=
¸¸( )
EditorGUILayout
¸¸* 9
.
¸¸9 :
Toggle
¸¸: @
(
¸¸@ A
$str
¸¸A T
,
¸¸T U
randomBrush
¸¸V a
.
¸¸a b
pickRandomTiles
¸¸b q
)
¸¸q r
;
¸¸r s
using
˝˝ 
(
˝˝ 
new
˝˝ 
	EditorGUI
˝˝  
.
˝˝  !
DisabledScope
˝˝! .
(
˝˝. /
!
˝˝/ 0
randomBrush
˝˝0 ;
.
˝˝; <
pickRandomTiles
˝˝< K
)
˝˝K L
)
˝˝L M
{
˛˛ 
randomBrush
ˇˇ 
.
ˇˇ 
addToRandomTiles
ˇˇ ,
=
ˇˇ- .
EditorGUILayout
ˇˇ/ >
.
ˇˇ> ?
Toggle
ˇˇ? E
(
ˇˇE F
$str
ˇˇF [
,
ˇˇ[ \
randomBrush
ˇˇ] h
.
ˇˇh i
addToRandomTiles
ˇˇi y
)
ˇˇy z
;
ˇˇz {
}
ÄÄ 
	EditorGUI
ÇÇ 
.
ÇÇ 
BeginChangeCheck
ÇÇ &
(
ÇÇ& '
)
ÇÇ' (
;
ÇÇ( )
randomBrush
ÉÉ 
.
ÉÉ 
randomTileSetSize
ÉÉ )
=
ÉÉ* +
EditorGUILayout
ÉÉ, ;
.
ÉÉ; <
Vector3IntField
ÉÉ< K
(
ÉÉK L
$str
ÉÉL [
,
ÉÉ[ \
randomBrush
ÉÉ] h
.
ÉÉh i
randomTileSetSize
ÉÉi z
)
ÉÉz {
;
ÉÉ{ |
if
ÑÑ 
(
ÑÑ 
	EditorGUI
ÑÑ 
.
ÑÑ 
EndChangeCheck
ÑÑ (
(
ÑÑ( )
)
ÑÑ) *
)
ÑÑ* +
{
ÖÖ 
for
ÜÜ 
(
ÜÜ 
int
ÜÜ 
i
ÜÜ 
=
ÜÜ 
$num
ÜÜ 
;
ÜÜ 
i
ÜÜ  !
<
ÜÜ" #
randomBrush
ÜÜ$ /
.
ÜÜ/ 0
randomTileSets
ÜÜ0 >
.
ÜÜ> ?
Length
ÜÜ? E
;
ÜÜE F
++
ÜÜG I
i
ÜÜI J
)
ÜÜJ K
{
áá 
int
àà 
	sizeCount
àà !
=
àà" #
randomBrush
àà$ /
.
àà/ 0
randomTileSetSize
àà0 A
.
ààA B
x
ààB C
*
ààD E
randomBrush
ààF Q
.
ààQ R
randomTileSetSize
ààR c
.
ààc d
y
ààd e
*
ààf g
randomBrush
ââ$ /
.
ââ/ 0
randomTileSetSize
ââ0 A
.
ââA B
z
ââB C
;
ââC D
randomBrush
ää 
.
ää  
randomTileSets
ää  .
[
ää. /
i
ää/ 0
]
ää0 1
.
ää1 2
randomTiles
ää2 =
=
ää> ?
new
ää@ C
TileBase
ääD L
[
ääL M
	sizeCount
ääM V
]
ääV W
;
ääW X
}
ãã 
}
åå 
int
çç  
randomTileSetCount
çç "
=
çç# $
EditorGUILayout
çç% 4
.
çç4 5
DelayedIntField
çç5 D
(
ççD E
$str
ççE V
,
ççV W
randomBrush
ççX c
.
ççc d
randomTileSets
ççd r
!=
ççs u
null
ççv z
?
çç{ |
randomBrushçç} à
.ççà â
randomTileSetsççâ ó
.ççó ò
Lengthççò û
:ççü †
$numçç° ¢
)çç¢ £
;çç£ §
if
éé 
(
éé  
randomTileSetCount
éé "
<
éé# $
$num
éé% &
)
éé& ' 
randomTileSetCount
èè "
=
èè# $
$num
èè% &
;
èè& '
if
êê 
(
êê 
randomBrush
êê 
.
êê 
randomTileSets
êê *
==
êê+ -
null
êê. 2
||
êê3 5
randomBrush
êê6 A
.
êêA B
randomTileSets
êêB P
.
êêP Q
Length
êêQ W
!=
êêX Z 
randomTileSetCount
êê[ m
)
êêm n
{
ëë 
Array
íí 
.
íí 
Resize
íí 
(
íí 
ref
íí  
randomBrush
íí! ,
.
íí, -
randomTileSets
íí- ;
,
íí; < 
randomTileSetCount
íí= O
)
ííO P
;
ííP Q
for
ìì 
(
ìì 
int
ìì 
i
ìì 
=
ìì 
$num
ìì 
;
ìì 
i
ìì  !
<
ìì" #
randomBrush
ìì$ /
.
ìì/ 0
randomTileSets
ìì0 >
.
ìì> ?
Length
ìì? E
;
ììE F
++
ììG I
i
ììI J
)
ììJ K
{
îî 
int
ïï 
	sizeCount
ïï !
=
ïï" #
randomBrush
ïï$ /
.
ïï/ 0
randomTileSetSize
ïï0 A
.
ïïA B
x
ïïB C
*
ïïD E
randomBrush
ïïF Q
.
ïïQ R
randomTileSetSize
ïïR c
.
ïïc d
y
ïïd e
*
ïïf g
randomBrush
ññ$ /
.
ññ/ 0
randomTileSetSize
ññ0 A
.
ññA B
z
ññB C
;
ññC D
if
óó 
(
óó 
randomBrush
óó #
.
óó# $
randomTileSets
óó$ 2
[
óó2 3
i
óó3 4
]
óó4 5
.
óó5 6
randomTiles
óó6 A
==
óóB D
null
óóE I
||
òò 
randomBrush
òò &
.
òò& '
randomTileSets
òò' 5
[
òò5 6
i
òò6 7
]
òò7 8
.
òò8 9
randomTiles
òò9 D
.
òòD E
Length
òòE K
!=
òòL N
	sizeCount
òòO X
)
òòX Y
randomBrush
ôô #
.
ôô# $
randomTileSets
ôô$ 2
[
ôô2 3
i
ôô3 4
]
ôô4 5
.
ôô5 6
randomTiles
ôô6 A
=
ôôB C
new
ôôD G
TileBase
ôôH P
[
ôôP Q
	sizeCount
ôôQ Z
]
ôôZ [
;
ôô[ \
}
öö 
}
õõ 
if
ùù 
(
ùù  
randomTileSetCount
ùù "
>
ùù# $
$num
ùù% &
)
ùù& '
{
ûû 
EditorGUILayout
üü 
.
üü  
Space
üü  %
(
üü% &
)
üü& '
;
üü' (
EditorGUILayout
†† 
.
††  

LabelField
††  *
(
††* +
$str
††+ @
)
††@ A
;
††A B
for
¢¢ 
(
¢¢ 
int
¢¢ 
i
¢¢ 
=
¢¢ 
$num
¢¢ 
;
¢¢ 
i
¢¢  !
<
¢¢" # 
randomTileSetCount
¢¢$ 6
;
¢¢6 7
i
¢¢8 9
++
¢¢9 ;
)
¢¢; <
{
££ 
EditorGUILayout
§§ #
.
§§# $

LabelField
§§$ .
(
§§. /
$str
§§/ :
+
§§; <
(
§§= >
i
§§> ?
+
§§? @
$num
§§@ A
)
§§A B
)
§§B C
;
§§C D
for
•• 
(
•• 
int
•• 
j
•• 
=
••  
$num
••! "
;
••" #
j
••$ %
<
••& '
randomBrush
••( 3
.
••3 4
randomTileSets
••4 B
[
••B C
i
••C D
]
••D E
.
••E F
randomTiles
••F Q
.
••Q R
Length
••R X
;
••X Y
++
••Z \
j
••\ ]
)
••] ^
{
¶¶ 
randomBrush
ßß #
.
ßß# $
randomTileSets
ßß$ 2
[
ßß2 3
i
ßß3 4
]
ßß4 5
.
ßß5 6
randomTiles
ßß6 A
[
ßßA B
j
ßßB C
]
ßßC D
=
ßßE F
(
ßßG H
TileBase
ßßH P
)
ßßP Q
EditorGUILayout
ßßR a
.
ßßa b
ObjectField
ßßb m
(
ßßm n
$str
ßßn u
+
ßßv w
(
ßßx y
j
ßßy z
+
ßßz {
$num
ßß{ |
)
ßß| }
,
ßß} ~
randomBrushßß ä
.ßßä ã
randomTileSetsßßã ô
[ßßô ö
ißßö õ
]ßßõ ú
.ßßú ù
randomTilesßßù ®
[ßß® ©
jßß© ™
]ßß™ ´
,ßß´ ¨
typeofßß≠ ≥
(ßß≥ ¥
TileBaseßß¥ º
)ßßº Ω
,ßßΩ æ
falseßßø ƒ
,ßßƒ ≈
nullßß∆  
)ßß  À
;ßßÀ Ã
}
®® 
}
©© 
}
™™ 
if
¨¨ 
(
¨¨ 
	EditorGUI
¨¨ 
.
¨¨ 
EndChangeCheck
¨¨ (
(
¨¨( )
)
¨¨) *
)
¨¨* +
EditorUtility
≠≠ 
.
≠≠ 
SetDirty
≠≠ &
(
≠≠& '
randomBrush
≠≠' 2
)
≠≠2 3
;
≠≠3 4
}
ÆÆ 	
}
ØØ 
}∞∞ å*
óC:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Editor\Brushes\TintBrush\TintBrush.cs
	namespace 	
UnityEditor
 
. 
Tilemaps 
{ 
[

 
CustomGridBrush

 
(

 
false

 
,

 
false

 !
,

! "
false

# (
,

( )
$str

* 6
)

6 7
]

7 8
public 

class 
	TintBrush 
: 
GridBrushBase *
{ 
public 
Color 
m_Color 
= 
Color $
.$ %
white% *
;* +
public 
override 
void 
Paint "
(" #

GridLayout# -
grid. 2
,2 3

GameObject4 >
brushTarget? J
,J K

Vector3IntL V
positionW _
)_ `
{ 	
if 
( 
brushTarget 
. 
layer !
==" $
$num% '
)' (
return 
; 
Tilemap 
tilemap 
= 
brushTarget )
.) *
GetComponent* 6
<6 7
Tilemap7 >
>> ?
(? @
)@ A
;A B
if   
(   
tilemap   
!=   
null   
)    
{!! 
SetColor"" 
("" 
tilemap""  
,""  !
position""" *
,""* +
m_Color"", 3
)""3 4
;""4 5
}## 
}$$ 	
public-- 
override-- 
void-- 
Erase-- "
(--" #

GridLayout--# -
grid--. 2
,--2 3

GameObject--4 >
brushTarget--? J
,--J K

Vector3Int--L V
position--W _
)--_ `
{.. 	
if00 
(00 
brushTarget00 
.00 
layer00 !
==00" $
$num00% '
)00' (
return11 
;11 
Tilemap33 
tilemap33 
=33 
brushTarget33 )
.33) *
GetComponent33* 6
<336 7
Tilemap337 >
>33> ?
(33? @
)33@ A
;33A B
if44 
(44 
tilemap44 
!=44 
null44 
)44  
{55 
SetColor66 
(66 
tilemap66  
,66  !
position66" *
,66* +
Color66, 1
.661 2
white662 7
)667 8
;668 9
}77 
}88 	
private:: 
static:: 
void:: 
SetColor:: $
(::$ %
Tilemap::% ,
tilemap::- 4
,::4 5

Vector3Int::6 @
position::A I
,::I J
Color::K P
color::Q V
)::V W
{;; 	
TileBase<< 
tile<< 
=<< 
tilemap<< #
.<<# $
GetTile<<$ +
(<<+ ,
position<<, 4
)<<4 5
;<<5 6
if== 
(== 
tile== 
!=== 
null== 
)== 
{>> 
if?? 
(?? 
(?? 
tilemap?? 
.?? 
GetTileFlags?? )
(??) *
position??* 2
)??2 3
&??4 5
	TileFlags??6 ?
.??? @
	LockColor??@ I
)??I J
!=??K M
$num??N O
)??O P
{@@ 
ifAA 
(AA 
tileAA 
isAA 
TileAA  $
)AA$ %
{BB 
DebugCC 
.CC 

LogWarningCC (
(CC( )
$strCC) O
+CCP Q
tileCCR V
.CCV W
nameCCW [
+CC\ ]
$str	CC^ ≠
)
CC≠ Æ
;
CCÆ Ø
}DD 
elseEE 
{FF 
DebugGG 
.GG 

LogWarningGG (
(GG( )
$strGG) O
+GGP Q
tileGGR V
.GGV W
nameGGW [
+GG\ ]
$str	GG^ ô
)
GGô ö
;
GGö õ
}HH 
}II 
tilemapKK 
.KK 
SetColorKK  
(KK  !
positionKK! )
,KK) *
colorKK+ 0
)KK0 1
;KK1 2
}LL 
}MM 	
}NN 
[SS 
CustomEditorSS 
(SS 
typeofSS 
(SS 
	TintBrushSS "
)SS" #
)SS# $
]SS$ %
publicTT 

classTT 
TintBrushEditorTT  
:TT! "
GridBrushEditorBaseTT# 6
{UU 
publicXX 
overrideXX 

GameObjectXX "
[XX" #
]XX# $
validTargetsXX% 1
{YY 	
getZZ 
{[[ 
return\\ 

GameObject\\ !
.\\! "
FindObjectsOfType\\" 3
<\\3 4
Tilemap\\4 ;
>\\; <
(\\< =
)\\= >
.\\> ?
Select\\? E
(\\E F
x\\F G
=>\\H J
x\\K L
.\\L M

gameObject\\M W
)\\W X
.\\X Y
ToArray\\Y `
(\\` a
)\\a b
;\\b c
}]] 
}^^ 	
}__ 
}`` ⁄D
£C:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Editor\Brushes\TintBrushSmooth\TintBrushSmooth.cs
	namespace 	
UnityEditor
 
. 
Tilemaps 
{ 
[

 
CustomGridBrush

 
(

 
false

 
,

 
false

 !
,

! "
false

# (
,

( )
$str

* ?
)

? @
]

@ A
public 

class 
TintBrushSmooth  
:! "
GridBrushBase# 0
{ 
private  
TintTextureGenerator $
	generator% .
{ 	
get 
{  
TintTextureGenerator $
	generator% .
=/ 0
FindObjectOfType1 A
<A B 
TintTextureGeneratorB V
>V W
(W X
)X Y
;Y Z
if 
( 
	generator 
==  
null! %
)% &
{ 
Grid 
grid 
= 
FindObjectOfType  0
<0 1
Grid1 5
>5 6
(6 7
)7 8
;8 9
if 
( 
grid 
!= 
null  $
)$ %
{ 
	generator !
=" #
grid$ (
.( )

gameObject) 3
.3 4
AddComponent4 @
<@ A 
TintTextureGeneratorA U
>U V
(V W
)W X
;X Y
} 
} 
return 
	generator  
;  !
} 
} 	
public"" 
float"" 
m_Blend"" 
="" 
$num"" !
;""! "
public&& 
Color&& 
m_Color&& 
=&& 
Color&& $
.&&$ %
white&&% *
;&&* +
public// 
override// 
void// 
Paint// "
(//" #

GridLayout//# -
grid//. 2
,//2 3

GameObject//4 >
brushTarget//? J
,//J K

Vector3Int//L V
position//W _
)//_ `
{00 	
if22 
(22 
brushTarget22 
.22 
layer22 !
==22" $
$num22% '
)22' (
return33 
;33  
TintTextureGenerator55  
	generator55! *
=55+ ,
GetGenerator55- 9
(559 :
grid55: >
)55> ?
;55? @
if66 
(66 
	generator66 
!=66 
null66 !
)66! "
{77 
var88 
oldColor88 
=88 
	generator88 (
.88( )
GetColor88) 1
(881 2
grid882 6
as887 9
Grid88: >
,88> ?
position88@ H
)88H I
;88I J
var99 

blendColor99 
=99  
oldColor99! )
*99* +
(99, -
$num99- .
-99/ 0
m_Blend991 8
)998 9
+99: ;
m_Color99< C
*99D E
m_Blend99F M
;99M N
	generator:: 
.:: 
SetColor:: "
(::" #
grid::# '
as::( *
Grid::+ /
,::/ 0
position::1 9
,::9 :

blendColor::; E
)::E F
;::F G
};; 
}<< 	
publicEE 
overrideEE 
voidEE 
EraseEE "
(EE" #

GridLayoutEE# -
gridEE. 2
,EE2 3

GameObjectEE4 >
brushTargetEE? J
,EEJ K

Vector3IntEEL V
positionEEW _
)EE_ `
{FF 	
ifHH 
(HH 
brushTargetHH 
.HH 
layerHH !
==HH" $
$numHH% '
)HH' (
returnII 
;II  
TintTextureGeneratorKK  
	generatorKK! *
=KK+ ,
GetGeneratorKK- 9
(KK9 :
gridKK: >
)KK> ?
;KK? @
ifLL 
(LL 
	generatorLL 
!=LL 
nullLL !
)LL! "
{MM 
	generatorNN 
.NN 
SetColorNN "
(NN" #
gridNN# '
asNN( *
GridNN+ /
,NN/ 0
positionNN1 9
,NN9 :
ColorNN; @
.NN@ A
whiteNNA F
)NNF G
;NNG H
}OO 
}PP 	
publicZZ 
overrideZZ 
voidZZ 
PickZZ !
(ZZ! "

GridLayoutZZ" ,
gridZZ- 1
,ZZ1 2

GameObjectZZ3 =
brushTargetZZ> I
,ZZI J
	BoundsIntZZK T
positionZZU ]
,ZZ] ^

Vector3IntZZ_ i
pivotZZj o
)ZZo p
{[[ 	
if]] 
(]] 
brushTarget]] 
.]] 
layer]] !
==]]" $
$num]]% '
)]]' (
return^^ 
;^^  
TintTextureGenerator``  
	generator``! *
=``+ ,
GetGenerator``- 9
(``9 :
grid``: >
)``> ?
;``? @
ifaa 
(aa 
	generatoraa 
!=aa 
nullaa !
)aa! "
{bb 
m_Colorcc 
=cc 
	generatorcc #
.cc# $
GetColorcc$ ,
(cc, -
gridcc- 1
ascc2 4
Gridcc5 9
,cc9 :
positioncc; C
.ccC D
minccD G
)ccG H
;ccH I
}dd 
}ee 	
privategg  
TintTextureGeneratorgg $
GetGeneratorgg% 1
(gg1 2

GridLayoutgg2 <
gridgg= A
)ggA B
{hh 	 
TintTextureGeneratorii  
	generatorii! *
=ii+ ,
FindObjectOfTypeii- =
<ii= > 
TintTextureGeneratorii> R
>iiR S
(iiS T
)iiT U
;iiU V
ifjj 
(jj 
	generatorjj 
==jj 
nulljj !
)jj! "
{kk 
ifll 
(ll 
gridll 
!=ll 
nullll  
)ll  !
{mm 
	generatornn 
=nn 
gridnn  $
.nn$ %

gameObjectnn% /
.nn/ 0
AddComponentnn0 <
<nn< = 
TintTextureGeneratornn= Q
>nnQ R
(nnR S
)nnS T
;nnT U
}oo 
}pp 
returnqq 
	generatorqq 
;qq 
}rr 	
}ss 
[xx 
CustomEditorxx 
(xx 
typeofxx 
(xx 
TintBrushSmoothxx (
)xx( )
)xx) *
]xx* +
publicyy 

classyy !
TintBrushSmoothEditoryy &
:yy' (
GridBrushEditorBaseyy) <
{zz 
public~~ 
TintBrushSmooth~~ 
brush~~ $
{~~% &
get~~' *
{~~+ ,
return~~- 3
target~~4 :
as~~; =
TintBrushSmooth~~> M
;~~M N
}~~O P
}~~Q R
public
ÇÇ 
override
ÇÇ 

GameObject
ÇÇ "
[
ÇÇ" #
]
ÇÇ# $
validTargets
ÇÇ% 1
{
ÉÉ 	
get
ÑÑ 
{
ÖÖ 
return
ÜÜ 

GameObject
ÜÜ !
.
ÜÜ! "
FindObjectsOfType
ÜÜ" 3
<
ÜÜ3 4
Tilemap
ÜÜ4 ;
>
ÜÜ; <
(
ÜÜ< =
)
ÜÜ= >
.
ÜÜ> ?
Select
ÜÜ? E
(
ÜÜE F
x
ÜÜF G
=>
ÜÜH J
x
ÜÜK L
.
ÜÜL M

gameObject
ÜÜM W
)
ÜÜW X
.
ÜÜX Y
ToArray
ÜÜY `
(
ÜÜ` a
)
ÜÜa b
;
ÜÜb c
}
áá 
}
àà 	
public
éé 
override
éé 
void
éé !
OnPaintInspectorGUI
éé 0
(
éé0 1
)
éé1 2
{
èè 	
brush
êê 
.
êê 
m_Color
êê 
=
êê 
EditorGUILayout
êê +
.
êê+ ,

ColorField
êê, 6
(
êê6 7
$str
êê7 >
,
êê> ?
brush
êê@ E
.
êêE F
m_Color
êêF M
)
êêM N
;
êêN O
brush
ëë 
.
ëë 
m_Blend
ëë 
=
ëë 
EditorGUILayout
ëë +
.
ëë+ ,
Slider
ëë, 2
(
ëë2 3
$str
ëë3 :
,
ëë: ;
brush
ëë< A
.
ëëA B
m_Blend
ëëB I
,
ëëI J
$num
ëëK M
,
ëëM N
$num
ëëO Q
)
ëëQ R
;
ëëR S
	GUILayout
íí 
.
íí 
Label
íí 
(
íí 
$str
íí N
)
ííN O
;
ííO P
}
ìì 	
}
îî 
}ïï ”¶
´C:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Editor\Tiles\HexagonalRuleTile\HexagonalRuleTileEditor.cs
	namespace 	
UnityEditor
 
{ 
[ 
CustomEditor 
( 
typeof 
( 
HexagonalRuleTile *
)* +
,+ ,
true- 1
)1 2
]2 3
[ "
CanEditMultipleObjects 
] 
public 

class #
HexagonalRuleTileEditor (
:) *
RuleTileEditor+ 9
{ 
public

 
override

 
int

 
GetArrowIndex

 )
(

) *

Vector3Int

* 4
position

5 =
)

= >
{ 	
var 
hexTile 
= 
tile 
as !
HexagonalRuleTile" 3
;3 4
if 
( 
position 
. 
y 
% 
$num 
!= !
$num" #
)# $
{ 
position 
*= 
$num 
; 
position 
. 
x 
+= 
$num 
;  
} 
if 
( 
position 
. 
x 
== 
$num 
)  
{ 
if 
( 
position 
. 
y 
>  
$num! "
)" #
return 
hexTile "
." #
	m_FlatTop# ,
?- .
$num/ 0
:1 2
$num3 4
;4 5
else 
return 
hexTile "
." #
	m_FlatTop# ,
?- .
$num/ 0
:1 2
$num3 4
;4 5
} 
else 
if 
( 
position 
. 
y 
==  "
$num# $
)$ %
{ 
if 
( 
position 
. 
x 
>  
$num! "
)" #
return 
hexTile "
." #
	m_FlatTop# ,
?- .
$num/ 0
:1 2
$num3 4
;4 5
else 
return   
hexTile   "
.  " #
	m_FlatTop  # ,
?  - .
$num  / 0
:  1 2
$num  3 4
;  4 5
}!! 
else"" 
{## 
if$$ 
($$ 
position$$ 
.$$ 
x$$ 
<$$  
$num$$! "
&&$$# %
position$$& .
.$$. /
y$$/ 0
>$$1 2
$num$$3 4
)$$4 5
return%% 
hexTile%% "
.%%" #
	m_FlatTop%%# ,
?%%- .
$num%%/ 0
:%%1 2
$num%%3 4
;%%4 5
else&& 
if&& 
(&& 
position&& !
.&&! "
x&&" #
>&&$ %
$num&&& '
&&&&( *
position&&+ 3
.&&3 4
y&&4 5
>&&6 7
$num&&8 9
)&&9 :
return'' 
hexTile'' "
.''" #
	m_FlatTop''# ,
?''- .
$num''/ 0
:''1 2
$num''3 4
;''4 5
else(( 
if(( 
((( 
position(( !
.((! "
x((" #
<(($ %
$num((& '
&&((( *
position((+ 3
.((3 4
y((4 5
<((6 7
$num((8 9
)((9 :
return)) 
hexTile)) "
.))" #
	m_FlatTop))# ,
?))- .
$num))/ 0
:))1 2
$num))3 4
;))4 5
else** 
if** 
(** 
position** !
.**! "
x**" #
>**$ %
$num**& '
&&**( *
position**+ 3
.**3 4
y**4 5
<**6 7
$num**8 9
)**9 :
return++ 
hexTile++ "
.++" #
	m_FlatTop++# ,
?++- .
$num++/ 0
:++1 2
$num++3 4
;++4 5
},, 
return.. 
-.. 
$num.. 
;.. 
}// 	
public11 
override11 
	BoundsInt11 !
GetRuleGUIBounds11" 2
(112 3
	BoundsInt113 <
bounds11= C
,11C D
RuleTile11E M
.11M N

TilingRule11N X
rule11Y ]
)11] ^
{22 	
foreach33 
(33 
var33 
n33 
in33 
rule33 "
.33" #
GetNeighbors33# /
(33/ 0
)330 1
)331 2
{44 
if55 
(55 
n55 
.55 
Key55 
.55 
x55 
==55 
bounds55 %
.55% &
xMax55& *
-55+ ,
$num55- .
&&55/ 1
n552 3
.553 4
Key554 7
.557 8
y558 9
%55: ;
$num55< =
!=55> @
$num55A B
)55B C
{66 
bounds77 
.77 
xMax77 
++77 !
;77! "
break88 
;88 
}99 
}:: 
return;; 
base;; 
.;; 
GetRuleGUIBounds;; (
(;;( )
bounds;;) /
,;;/ 0
rule;;1 5
);;5 6
;;;6 7
}<< 	
public>> 
override>> 
Vector2>> 
GetMatrixSize>>  -
(>>- .
	BoundsInt>>. 7
bounds>>8 >
)>>> ?
{?? 	
var@@ 
hexTile@@ 
=@@ 
tile@@ 
as@@ !
HexagonalRuleTile@@" 3
;@@3 4
Vector2AA 
sizeAA 
=AA 
baseAA 
.AA  
GetMatrixSizeAA  -
(AA- .
boundsAA. 4
)AA4 5
;AA5 6
returnBB 
hexTileBB 
.BB 
	m_FlatTopBB $
?BB% &
newBB' *
Vector2BB+ 2
(BB2 3
sizeBB3 7
.BB7 8
yBB8 9
,BB9 :
sizeBB; ?
.BB? @
xBB@ A
)BBA B
:BBC D
sizeBBE I
;BBI J
}CC 	
publicEE 
overrideEE 
voidEE 
RuleMatrixOnGUIEE ,
(EE, -
RuleTileEE- 5
tileEE6 :
,EE: ;
RectEE< @
rectEEA E
,EEE F
	BoundsIntEEG P
boundsEEQ W
,EEW X
RuleTileEEY a
.EEa b

TilingRuleEEb l

tilingRuleEEm w
)EEw x
{FF 	
varGG 
hexTileGG 
=GG 
tileGG 
asGG !
HexagonalRuleTileGG" 3
;GG3 4
boolHH 
flatTopHH 
=HH 
hexTileHH "
.HH" #
	m_FlatTopHH# ,
;HH, -
HandlesJJ 
.JJ 
colorJJ 
=JJ 
EditorGUIUtilityJJ ,
.JJ, -
	isProSkinJJ- 6
?JJ7 8
newJJ9 <
ColorJJ= B
(JJB C
$numJJC E
,JJE F
$numJJG I
,JJI J
$numJJK M
,JJM N
$numJJO S
)JJS T
:JJU V
newJJW Z
ColorJJ[ `
(JJ` a
$numJJa c
,JJc d
$numJJe g
,JJg h
$numJJi k
,JJk l
$numJJm q
)JJq r
;JJr s
floatKK 
wKK 
=KK 
rectKK 
.KK 
widthKK  
/KK! "
(KK# $
flatTopKK$ +
?KK, -
boundsKK. 4
.KK4 5
sizeKK5 9
.KK9 :
yKK: ;
:KK< =
boundsKK> D
.KKD E
sizeKKE I
.KKI J
xKKJ K
)KKK L
;KKL M
floatLL 
hLL 
=LL 
rectLL 
.LL 
heightLL !
/LL" #
(LL$ %
flatTopLL% ,
?LL- .
boundsLL/ 5
.LL5 6
sizeLL6 :
.LL: ;
xLL; <
:LL= >
boundsLL? E
.LLE F
sizeLLF J
.LLJ K
yLLK L
)LLL M
;LLM N
ifOO 
(OO 
flatTopOO 
)OO 
{PP 
forQQ 
(QQ 
intQQ 
yQQ 
=QQ 
$numQQ 
;QQ 
yQQ  !
<=QQ" $
boundsQQ% +
.QQ+ ,
sizeQQ, 0
.QQ0 1
yQQ1 2
;QQ2 3
yQQ4 5
++QQ5 7
)QQ7 8
{RR 
floatSS 
leftSS 
=SS  
rectSS! %
.SS% &
xMinSS& *
+SS+ ,
ySS- .
*SS/ 0
wSS1 2
;SS2 3
floatTT 
offsetTT  
=TT! "
$numTT# $
;TT$ %
ifVV 
(VV 
yVV 
==VV 
$numVV 
&&VV !
boundsVV" (
.VV( )
yMaxVV) -
%VV. /
$numVV0 1
==VV2 4
$numVV5 6
)VV6 7
offsetWW 
=WW  
hWW! "
/WW# $
$numWW% &
;WW& '
elseXX 
ifXX 
(XX 
yXX 
==XX !
boundsXX" (
.XX( )
sizeXX) -
.XX- .
yXX. /
&&XX0 2
boundsXX3 9
.XX9 :
yMinXX: >
%XX? @
$numXXA B
!=XXC E
$numXXF G
)XXG H
offsetYY 
=YY  
hYY! "
/YY# $
$numYY% &
;YY& '
Handles[[ 
.[[ 
DrawLine[[ $
([[$ %
new[[% (
Vector3[[) 0
([[0 1
left[[1 5
,[[5 6
rect[[7 ;
.[[; <
yMin[[< @
+[[A B
offset[[C I
)[[I J
,[[J K
new[[L O
Vector3[[P W
([[W X
left[[X \
,[[\ ]
rect[[^ b
.[[b c
yMax[[c g
-[[h i
offset[[j p
)[[p q
)[[q r
;[[r s
if]] 
(]] 
y]] 
<]] 
bounds]] "
.]]" #
size]]# '
.]]' (
y]]( )
)]]) *
{^^ 
bool__ 
noOffset__ %
=__& '
(__( )
y__) *
+__+ ,
bounds__- 3
.__3 4
yMax__4 8
)__8 9
%__: ;
$num__< =
!=__> @
$num__A B
;__B C
for`` 
(`` 
int``  
x``! "
=``# $
$num``% &
;``& '
x``( )
<``* +
(``, -
noOffset``- 5
?``6 7
(``8 9
bounds``9 ?
.``? @
size``@ D
.``D E
x``E F
+``G H
$num``I J
)``J K
:``L M
bounds``N T
.``T U
size``U Y
.``Y Z
x``Z [
)``[ \
;``\ ]
x``^ _
++``_ a
)``a b
{aa 
floatbb !
topbb" %
=bb& '
rectbb( ,
.bb, -
yMinbb- 1
+bb2 3
xbb4 5
*bb6 7
hbb8 9
+bb: ;
(bb< =
noOffsetbb= E
?bbF G
$numbbH I
:bbJ K
hbbL M
/bbN O
$numbbP Q
)bbQ R
;bbR S
Handlescc #
.cc# $
DrawLinecc$ ,
(cc, -
newcc- 0
Vector3cc1 8
(cc8 9
leftcc9 =
,cc= >
topcc? B
)ccB C
,ccC D
newccE H
Vector3ccI P
(ccP Q
leftccQ U
+ccV W
wccX Y
,ccY Z
topcc[ ^
)cc^ _
)cc_ `
;cc` a
}dd 
}ee 
}ff 
}gg 
elsehh 
{ii 
forjj 
(jj 
intjj 
yjj 
=jj 
$numjj 
;jj 
yjj  !
<=jj" $
boundsjj% +
.jj+ ,
sizejj, 0
.jj0 1
yjj1 2
;jj2 3
yjj4 5
++jj5 7
)jj7 8
{kk 
floatll 
topll 
=ll 
rectll  $
.ll$ %
yMinll% )
+ll* +
yll, -
*ll. /
hll0 1
;ll1 2
floatmm 
offsetmm  
=mm! "
$nummm# $
;mm$ %
ifoo 
(oo 
yoo 
==oo 
$numoo 
&&oo !
boundsoo" (
.oo( )
yMaxoo) -
%oo. /
$numoo0 1
==oo2 4
$numoo5 6
)oo6 7
offsetpp 
=pp  
wpp! "
/pp# $
$numpp% &
;pp& '
elseqq 
ifqq 
(qq 
yqq 
==qq !
boundsqq" (
.qq( )
sizeqq) -
.qq- .
yqq. /
&&qq0 2
boundsqq3 9
.qq9 :
yMinqq: >
%qq? @
$numqqA B
!=qqC E
$numqqF G
)qqG H
offsetrr 
=rr  
wrr! "
/rr# $
$numrr% &
;rr& '
Handlestt 
.tt 
DrawLinett $
(tt$ %
newtt% (
Vector3tt) 0
(tt0 1
recttt1 5
.tt5 6
xMintt6 :
+tt; <
offsettt= C
,ttC D
topttE H
)ttH I
,ttI J
newttK N
Vector3ttO V
(ttV W
rectttW [
.tt[ \
xMaxtt\ `
-tta b
offsetttc i
,tti j
topttk n
)ttn o
)tto p
;ttp q
ifvv 
(vv 
yvv 
<vv 
boundsvv "
.vv" #
sizevv# '
.vv' (
yvv( )
)vv) *
{ww 
boolxx 
noOffsetxx %
=xx& '
(xx( )
yxx) *
+xx+ ,
boundsxx- 3
.xx3 4
yMaxxx4 8
)xx8 9
%xx: ;
$numxx< =
!=xx> @
$numxxA B
;xxB C
foryy 
(yy 
intyy  
xyy! "
=yy# $
$numyy% &
;yy& '
xyy( )
<yy* +
(yy, -
noOffsetyy- 5
?yy6 7
(yy8 9
boundsyy9 ?
.yy? @
sizeyy@ D
.yyD E
xyyE F
+yyG H
$numyyI J
)yyJ K
:yyL M
boundsyyN T
.yyT U
sizeyyU Y
.yyY Z
xyyZ [
)yy[ \
;yy\ ]
xyy^ _
++yy_ a
)yya b
{zz 
float{{ !
left{{" &
={{' (
rect{{) -
.{{- .
xMin{{. 2
+{{3 4
x{{5 6
*{{7 8
w{{9 :
+{{; <
({{= >
noOffset{{> F
?{{G H
$num{{I J
:{{K L
w{{M N
/{{O P
$num{{Q R
){{R S
;{{S T
Handles|| #
.||# $
DrawLine||$ ,
(||, -
new||- 0
Vector3||1 8
(||8 9
left||9 =
,||= >
top||? B
)||B C
,||C D
new||E H
Vector3||I P
(||P Q
left||Q U
,||U V
top||W Z
+||[ \
h||] ^
)||^ _
)||_ `
;||` a
}}} 
}~~ 
} 
}
ÄÄ 
var
ÇÇ 
	neighbors
ÇÇ 
=
ÇÇ 

tilingRule
ÇÇ &
.
ÇÇ& '
GetNeighbors
ÇÇ' 3
(
ÇÇ3 4
)
ÇÇ4 5
;
ÇÇ5 6
Handles
ÖÖ 
.
ÖÖ 
color
ÖÖ 
=
ÖÖ 
Color
ÖÖ !
.
ÖÖ! "
white
ÖÖ" '
;
ÖÖ' (
for
ÜÜ 
(
ÜÜ 
int
ÜÜ 
y
ÜÜ 
=
ÜÜ 
bounds
ÜÜ 
.
ÜÜ  
yMin
ÜÜ  $
;
ÜÜ$ %
y
ÜÜ& '
<
ÜÜ( )
bounds
ÜÜ* 0
.
ÜÜ0 1
yMax
ÜÜ1 5
;
ÜÜ5 6
y
ÜÜ7 8
++
ÜÜ8 :
)
ÜÜ: ;
{
áá 
int
àà 
xMax
àà 
=
àà 
y
àà 
%
àà 
$num
àà  
==
àà! #
$num
àà$ %
?
àà& '
bounds
àà( .
.
àà. /
xMax
àà/ 3
:
àà4 5
(
àà6 7
bounds
àà7 =
.
àà= >
xMax
àà> B
-
ààC D
$num
ààE F
)
ààF G
;
ààG H
for
ââ 
(
ââ 
int
ââ 
x
ââ 
=
ââ 
bounds
ââ #
.
ââ# $
xMin
ââ$ (
;
ââ( )
x
ââ* +
<
ââ, -
xMax
ââ. 2
;
ââ2 3
x
ââ4 5
++
ââ5 7
)
ââ7 8
{
ää 

Vector3Int
ãã 
pos
ãã "
=
ãã# $
new
ãã% (

Vector3Int
ãã) 3
(
ãã3 4
x
ãã4 5
,
ãã5 6
y
ãã7 8
,
ãã8 9
$num
ãã: ;
)
ãã; <
;
ãã< =
Vector2
åå 
offset
åå "
=
åå# $
new
åå% (
Vector2
åå) 0
(
åå0 1
x
åå1 2
-
åå3 4
bounds
åå5 ;
.
åå; <
xMin
åå< @
,
åå@ A
-
ååB C
y
ååC D
+
ååE F
bounds
ååG M
.
ååM N
yMax
ååN R
-
ååS T
$num
ååU V
)
ååV W
;
ååW X
Rect
çç 
r
çç 
=
çç 
flatTop
çç $
?
çç% &
new
çç' *
Rect
çç+ /
(
çç/ 0
rect
çç0 4
.
çç4 5
xMin
çç5 9
+
çç: ;
offset
çç< B
.
ççB C
y
ççC D
*
ççE F
w
ççG H
,
ççH I
rect
ççJ N
.
ççN O
yMax
ççO S
-
ççT U
offset
ççV \
.
çç\ ]
x
çç] ^
*
çç_ `
h
çça b
-
ççc d
h
ççe f
,
ççf g
w
ççh i
-
ççj k
$num
ççl m
,
ççm n
h
çço p
-
ççq r
$num
ççs t
)
ççt u
:
éé 
new
éé 
Rect
éé "
(
éé" #
rect
éé# '
.
éé' (
xMin
éé( ,
+
éé- .
offset
éé/ 5
.
éé5 6
x
éé6 7
*
éé8 9
w
éé: ;
,
éé; <
rect
éé= A
.
ééA B
yMin
ééB F
+
ééG H
offset
ééI O
.
ééO P
y
ééP Q
*
ééR S
h
ééT U
,
ééU V
w
ééW X
-
ééY Z
$num
éé[ \
,
éé\ ]
h
éé^ _
-
éé` a
$num
ééb c
)
ééc d
;
ééd e
if
êê 
(
êê 
y
êê 
%
êê 
$num
êê 
!=
êê  
$num
êê! "
)
êê" #
{
ëë 
if
íí 
(
íí 
flatTop
íí #
)
íí# $
r
ìì 
.
ìì 
y
ìì 
-=
ìì  "
h
ìì# $
/
ìì% &
$num
ìì' (
;
ìì( )
else
îî 
r
ïï 
.
ïï 
x
ïï 
+=
ïï  "
w
ïï# $
/
ïï% &
$num
ïï' (
;
ïï( )
}
ññ 
if
òò 
(
òò 
x
òò 
!=
òò 
$num
òò 
||
òò !
y
òò" #
!=
òò$ &
$num
òò' (
)
òò( )
{
ôô 
if
öö 
(
öö 
	neighbors
öö %
.
öö% &
ContainsKey
öö& 1
(
öö1 2
pos
öö2 5
)
öö5 6
)
öö6 7
{
õõ 
	RuleOnGUI
úú %
(
úú% &
r
úú& '
,
úú' (
pos
úú) ,
,
úú, -
	neighbors
úú. 7
[
úú7 8
pos
úú8 ;
]
úú; <
)
úú< =
;
úú= >
RuleTooltipOnGUI
ùù ,
(
ùù, -
r
ùù- .
,
ùù. /
	neighbors
ùù0 9
[
ùù9 :
pos
ùù: =
]
ùù= >
)
ùù> ?
;
ùù? @
}
ûû 
if
üü 
(
üü  
RuleNeighborUpdate
üü .
(
üü. /
r
üü/ 0
,
üü0 1

tilingRule
üü2 <
,
üü< =
	neighbors
üü> G
,
üüG H
pos
üüI L
)
üüL M
)
üüM N
{
†† 
tile
°°  
.
°°  !%
UpdateNeighborPositions
°°! 8
(
°°8 9
)
°°9 :
;
°°: ;
}
¢¢ 
}
££ 
else
§§ 
{
••  
RuleTransformOnGUI
¶¶ *
(
¶¶* +
r
¶¶+ ,
,
¶¶, -

tilingRule
¶¶. 8
.
¶¶8 9
m_RuleTransform
¶¶9 H
)
¶¶H I
;
¶¶I J
if
ßß 
(
ßß !
RuleTransformUpdate
ßß /
(
ßß/ 0
r
ßß0 1
,
ßß1 2

tilingRule
ßß3 =
)
ßß= >
)
ßß> ?
{
®® 
tile
©©  
.
©©  !%
UpdateNeighborPositions
©©! 8
(
©©8 9
)
©©9 :
;
©©: ;
}
™™ 
}
´´ 
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
}
ØØ 
}∞∞ Ñq
´C:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Editor\Tiles\IsometricRuleTile\IsometricRuleTileEditor.cs
	namespace 	
UnityEditor
 
{ 
[ 
CustomEditor 
( 
typeof 
( 
IsometricRuleTile *
)* +
,+ ,
true- 1
)1 2
]2 3
[ "
CanEditMultipleObjects 
] 
public 

class #
IsometricRuleTileEditor (
:) *
RuleTileEditor+ 9
{ 
private

 
static

 
readonly

 
int

  #
[

# $
]

$ %
s_Arrows

& .
=

/ 0
{

1 2
$num

3 4
,

4 5
$num

6 7
,

7 8
$num

9 :
,

: ;
$num

< =
,

= >
-

? @
$num

@ A
,

A B
$num

C D
,

D E
$num

F G
,

G H
$num

I J
,

J K
$num

L M
}

N O
;

O P
public 
override 
int 
GetArrowIndex )
() *

Vector3Int* 4
position5 =
)= >
{ 	
return 
s_Arrows 
[ 
base  
.  !
GetArrowIndex! .
(. /
position/ 7
)7 8
]8 9
;9 :
} 	
public 
override 
Vector2 
GetMatrixSize  -
(- .
	BoundsInt. 7
bounds8 >
)> ?
{ 	
float 
p 
= 
Mathf 
. 
Pow 
(  
$num  !
,! "
$num# '
)' (
;( )
float 
w 
= 
( 
bounds 
. 
size "
." #
x# $
/% &
p' (
+) *
bounds+ 1
.1 2
size2 6
.6 7
y7 8
/9 :
p; <
)< =
*> ?
k_SingleLineHeight@ R
;R S
return 
new 
Vector2 
( 
w  
,  !
w" #
)# $
;$ %
} 	
public 
override 
void 
RuleMatrixOnGUI ,
(, -
RuleTile- 5
ruleTile6 >
,> ?
Rect@ D
rectE I
,I J
	BoundsIntK T
boundsU [
,[ \
RuleTile] e
.e f

TilingRulef p

tilingRuleq {
){ |
{ 	
Handles 
. 
color 
= 
EditorGUIUtility ,
., -
	isProSkin- 6
?7 8
new9 <
Color= B
(B C
$numC E
,E F
$numG I
,I J
$numK M
,M N
$numO S
)S T
:U V
newW Z
Color[ `
(` a
$numa c
,c d
$nume g
,g h
$numi k
,k l
$numm q
)q r
;r s
float 
w 
= 
rect 
. 
width  
/! "
bounds# )
.) *
size* .
.. /
x/ 0
;0 1
float 
h 
= 
rect 
. 
height !
/" #
bounds$ *
.* +
size+ /
./ 0
y0 1
;1 2
float 
d 
= 
rect 
. 
width  
/! "
(# $
bounds$ *
.* +
size+ /
./ 0
x0 1
+2 3
bounds4 :
.: ;
size; ?
.? @
y@ A
)A B
;B C
for   
(   
int   
y   
=   
$num   
;   
y   
<=    
bounds  ! '
.  ' (
size  ( ,
.  , -
y  - .
;  . /
y  0 1
++  1 3
)  3 4
{!! 
float"" 
left"" 
="" 
rect"" !
.""! "
xMin""" &
+""' (
d"") *
*""+ ,
y""- .
;"". /
float## 
top## 
=## 
rect##  
.##  !
yMin##! %
+##& '
d##( )
*##* +
y##, -
;##- .
float$$ 
right$$ 
=$$ 
rect$$ "
.$$" #
xMax$$# '
-$$( )
d$$* +
*$$, -
($$. /
bounds$$/ 5
.$$5 6
size$$6 :
.$$: ;
y$$; <
-$$= >
y$$? @
)$$@ A
;$$A B
float%% 
bottom%% 
=%% 
rect%% #
.%%# $
yMax%%$ (
-%%) *
d%%+ ,
*%%- .
(%%/ 0
bounds%%0 6
.%%6 7
size%%7 ;
.%%; <
y%%< =
-%%> ?
y%%@ A
)%%A B
;%%B C
Handles&& 
.&& 
DrawLine&&  
(&&  !
new&&! $
Vector3&&% ,
(&&, -
left&&- 1
,&&1 2
bottom&&3 9
)&&9 :
,&&: ;
new&&< ?
Vector3&&@ G
(&&G H
right&&H M
,&&M N
top&&O R
)&&R S
)&&S T
;&&T U
}'' 
for(( 
((( 
int(( 
x(( 
=(( 
$num(( 
;(( 
x(( 
<=((  
bounds((! '
.((' (
size((( ,
.((, -
x((- .
;((. /
x((0 1
++((1 3
)((3 4
{)) 
float** 
left** 
=** 
rect** !
.**! "
xMin**" &
+**' (
d**) *
***+ ,
x**- .
;**. /
float++ 
top++ 
=++ 
rect++  
.++  !
yMax++! %
-++& '
d++( )
*++* +
x++, -
;++- .
float,, 
right,, 
=,, 
rect,, "
.,," #
xMax,,# '
-,,( )
d,,* +
*,,, -
(,,. /
bounds,,/ 5
.,,5 6
size,,6 :
.,,: ;
x,,; <
-,,= >
x,,? @
),,@ A
;,,A B
float-- 
bottom-- 
=-- 
rect-- #
.--# $
yMin--$ (
+--) *
d--+ ,
*--- .
(--/ 0
bounds--0 6
.--6 7
size--7 ;
.--; <
x--< =
---> ?
x--@ A
)--A B
;--B C
Handles.. 
... 
DrawLine..  
(..  !
new..! $
Vector3..% ,
(.., -
left..- 1
,..1 2
bottom..3 9
)..9 :
,..: ;
new..< ?
Vector3..@ G
(..G H
right..H M
,..M N
top..O R
)..R S
)..S T
;..T U
}// 
Handles00 
.00 
color00 
=00 
Color00 !
.00! "
white00" '
;00' (
var22 
	neighbors22 
=22 

tilingRule22 &
.22& '
GetNeighbors22' 3
(223 4
)224 5
;225 6
float55 
iconSize55 
=55 
(55 
rect55 "
.55" #
width55# (
-55) *
d55+ ,
)55, -
/55. /
(550 1
bounds551 7
.557 8
size558 <
.55< =
x55= >
+55? @
bounds55A G
.55G H
size55H L
.55L M
y55M N
-55O P
$num55Q R
)55R S
;55S T
float66 
	iconScale66 
=66 
Mathf66 #
.66# $
Pow66$ '
(66' (
$num66( )
,66) *
$num66+ /
)66/ 0
;660 1
for88 
(88 
int88 
y88 
=88 
bounds88 
.88  
yMin88  $
;88$ %
y88& '
<88( )
bounds88* 0
.880 1
yMax881 5
;885 6
y887 8
++888 :
)88: ;
{99 
for:: 
(:: 
int:: 
x:: 
=:: 
bounds:: #
.::# $
xMin::$ (
;::( )
x::* +
<::, -
bounds::. 4
.::4 5
xMax::5 9
;::9 :
x::; <
++::< >
)::> ?
{;; 

Vector3Int<< 
pos<< "
=<<# $
new<<% (

Vector3Int<<) 3
(<<3 4
x<<4 5
,<<5 6
y<<7 8
,<<8 9
$num<<: ;
)<<; <
;<<< =

Vector3Int== 
offset== %
===& '
new==( +

Vector3Int==, 6
(==6 7
pos==7 :
.==: ;
x==; <
-=== >
bounds==? E
.==E F
xMin==F J
,==J K
pos==L O
.==O P
y==P Q
-==R S
bounds==T Z
.==Z [
yMin==[ _
,==_ `
$num==a b
)==b c
;==c d
Rect>> 
r>> 
=>> 
new>>  
Rect>>! %
(>>% &
rect?? 
.?? 
xMin?? !
+??" #
rect??$ (
.??( )
size??) -
.??- .
x??. /
-??0 1
iconSize??2 :
*??; <
(??= >
offset??> D
.??D E
y??E F
-??G H
offset??I O
.??O P
x??P Q
+??R S
$num??T X
+??Y Z
bounds??[ a
.??a b
size??b f
.??f g
x??g h
)??h i
,??i j
rect@@ 
.@@ 
yMin@@ !
+@@" #
rect@@$ (
.@@( )
size@@) -
.@@- .
y@@. /
-@@0 1
iconSize@@2 :
*@@; <
(@@= >
offset@@> D
.@@D E
y@@E F
+@@G H
offset@@I O
.@@O P
x@@P Q
+@@R S
$num@@T X
)@@X Y
,@@Y Z
iconSizeAA  
,AA  !
iconSizeAA" *
)BB 
;BB 
Vector2CC 
centerCC "
=CC# $
rCC% &
.CC& '
centerCC' -
;CC- .
rDD 
.DD 
sizeDD 
*=DD 
	iconScaleDD '
;DD' (
rEE 
.EE 
centerEE 
=EE 
centerEE %
;EE% &
ifFF 
(FF 
xFF 
!=FF 
$numFF 
||FF !
yFF" #
!=FF$ &
$numFF' (
)FF( )
{GG 
ifHH 
(HH 
	neighborsHH %
.HH% &
ContainsKeyHH& 1
(HH1 2
posHH2 5
)HH5 6
)HH6 7
{II 
	RuleOnGUIJJ %
(JJ% &
rJJ& '
,JJ' (
posJJ) ,
,JJ, -
	neighborsJJ. 7
[JJ7 8
posJJ8 ;
]JJ; <
)JJ< =
;JJ= >
RuleTooltipOnGUIKK ,
(KK, -
rKK- .
,KK. /
	neighborsKK0 9
[KK9 :
posKK: =
]KK= >
)KK> ?
;KK? @
}LL 
ifMM 
(MM 
RuleNeighborUpdateMM .
(MM. /
rMM/ 0
,MM0 1

tilingRuleMM2 <
,MM< =
	neighborsMM> G
,MMG H
posMMI L
)MML M
)MMM N
{NN 
tileOO  
.OO  !#
UpdateNeighborPositionsOO! 8
(OO8 9
)OO9 :
;OO: ;
}PP 
}QQ 
elseRR 
{SS 
RuleTransformOnGUITT *
(TT* +
rTT+ ,
,TT, -

tilingRuleTT. 8
.TT8 9
m_RuleTransformTT9 H
)TTH I
;TTI J
ifUU 
(UU 
RuleTransformUpdateUU /
(UU/ 0
rUU0 1
,UU1 2

tilingRuleUU3 =
)UU= >
)UU> ?
{VV 
tileWW  
.WW  !#
UpdateNeighborPositionsWW! 8
(WW8 9
)WW9 :
;WW: ;
}XX 
}YY 
}ZZ 
}[[ 
}\\ 	
public^^ 
override^^ 
bool^^ !
ContainsMousePosition^^ 2
(^^2 3
Rect^^3 7
rect^^8 <
)^^< =
{__ 	
var`` 
center`` 
=`` 
rect`` 
.`` 
center`` $
;``$ %
varaa 
	halfWidthaa 
=aa 
rectaa  
.aa  !
widthaa! &
/aa' (
$numaa) *
;aa* +
varbb 

halfHeightbb 
=bb 
rectbb !
.bb! "
heightbb" (
/bb) *
$numbb+ ,
;bb, -
varcc 
mouseFromCentercc 
=cc  !
Eventcc" '
.cc' (
currentcc( /
.cc/ 0
mousePositioncc0 =
-cc> ?
centercc@ F
;ccF G
vardd 
xAbsdd 
=dd 
Mathfdd 
.dd 
Absdd  
(dd  !
Vector2dd! (
.dd( )
Dotdd) ,
(dd, -
mouseFromCenterdd- <
,dd< =
Vector2dd> E
.ddE F
rightddF K
)ddK L
)ddL M
;ddM N
varee 
yAbsee 
=ee 
Mathfee 
.ee 
Absee  
(ee  !
Vector2ee! (
.ee( )
Dotee) ,
(ee, -
mouseFromCenteree- <
,ee< =
Vector2ee> E
.eeE F
upeeF H
)eeH I
)eeI J
;eeJ K
returnff 
(ff 
xAbsff 
/ff 
	halfWidthff $
+ff% &
yAbsff' +
/ff, -

halfHeightff. 8
)ff8 9
<=ff: <
$numff= >
;ff> ?
}gg 	
}hh 
}ii ˘:
±C:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Editor\Tiles\RuleOverrideTile\PopulateRuleOverrideTileWizard.cs
	namespace 	
UnityEditor
 
. 
Tilemaps 
{ 
[		 
	MovedFrom		 
(		 
true		 
,		 
$str		 "
)		" #
]		# $
public

 

class

 )
PopulateRuleOverideTileWizard

 .
:

/ 0
ScriptableWizard

1 A
{ 
[ 	
MenuItem	 
( 
$str G
)G H
]H I
static 
void 

MenuOption 
( 
MenuCommand *
menuCommand+ 6
)6 7
{ 	)
PopulateRuleOverideTileWizard )
.) *
CreateWizard* 6
(6 7
menuCommand7 B
.B C
contextC J
asK M
RuleOverrideTileN ^
)^ _
;_ `
} 	
[ 	
MenuItem	 
( 
$str G
,G H
trueI M
)M N
]N O
static 
bool  
MenuOptionValidation (
(( )
MenuCommand) 4
menuCommand5 @
)@ A
{ 	
RuleOverrideTile 
tile !
=" #
menuCommand$ /
./ 0
context0 7
as8 :
RuleOverrideTile; K
;K L
return 
tile 
. 
m_Tile 
&& !
!" #
tile# '
.' (

m_Advanced( 2
;2 3
} 	
public 
	Texture2D 
m_spriteSet $
;$ %
private 
RuleOverrideTile  
	m_tileset! *
;* +
public## 
static## 
void## 
CreateWizard## '
(##' (
RuleOverrideTile##( 8
target##9 ?
)##? @
{##A B)
PopulateRuleOverideTileWizard$$ )
wizard$$* 0
=$$1 2
DisplayWizard$$3 @
<$$@ A)
PopulateRuleOverideTileWizard$$A ^
>$$^ _
($$_ `
$str$$` s
,$$s t
$str$$u 
)	$$ Ä
;
$$Ä Å
wizard%% 
.%% 
	m_tileset%% 
=%% 
target%% %
;%%% &
}&& 	
public,, 
static,, 
void,, 
CloneWizard,, &
(,,& ')
PopulateRuleOverideTileWizard,,' D
	oldWizard,,E N
),,N O
{,,P Q)
PopulateRuleOverideTileWizard-- )
wizard--* 0
=--1 2
DisplayWizard--3 @
<--@ A)
PopulateRuleOverideTileWizard--A ^
>--^ _
(--_ `
$str--` s
,--s t
$str--u 
)	-- Ä
;
--Ä Å
wizard.. 
... 
	m_tileset.. 
=.. 
	oldWizard.. (
...( )
	m_tileset..) 2
;..2 3
wizard// 
.// 
m_spriteSet// 
=//  
	oldWizard//! *
.//* +
m_spriteSet//+ 6
;//6 7
}00 	
private22 
void22 
OnWizardUpdate22 #
(22# $
)22$ %
{22& '
isValid33 
=33 
	m_tileset33 
!=33  "
null33# '
&&33( *
m_spriteSet33+ 6
!=337 9
null33: >
;33> ?
}44 	
private66 
void66 
OnWizardCreate66 #
(66# $
)66$ %
{66& '
try77 
{77 
Populate88 
(88 
)88 
;88 
}99 
catch:: 
(:: 
System:: 
.:: 
	Exception:: "
ex::# %
)::% &
{::' (
EditorUtility;; 
.;; 
DisplayDialog;; +
(;;+ ,
$str;;, C
,;;C D
ex;;E G
.;;G H
Message;;H O
,;;O P
$str;;Q U
);;U V
;;;V W
CloneWizard<< 
(<< 
this<<  
)<<  !
;<<! "
}== 
}>> 	
privateGG 
voidGG 
PopulateGG 
(GG 
)GG 
{GG  !
stringHH 
spriteSheetHH 
=HH  
AssetDatabaseHH! .
.HH. /
GetAssetPathHH/ ;
(HH; <
m_spriteSetHH< G
)HHG H
;HHH I
SpriteII 
[II 
]II 
overrideSpritesII $
=II% &
AssetDatabaseII' 4
.II4 5
LoadAllAssetsAtPathII5 H
(IIH I
spriteSheetIII T
)IIT U
.IIU V
OfTypeIIV \
<II\ ]
SpriteII] c
>IIc d
(IId e
)IIe f
.IIf g
ToArrayIIg n
(IIn o
)IIo p
;IIp q
boolKK 
finishedKK 
=KK 
falseKK !
;KK! "
tryMM 
{MM 
UndoNN 
.NN 
RecordObjectNN !
(NN! "
	m_tilesetNN" +
,NN+ ,
$strNN- =
+NN> ?
	m_tilesetNN@ I
.NNI J
nameNNJ N
)NNN O
;NNO P
foreachPP 
(PP 
RuleTilePP  
.PP  !

TilingRulePP! +
rulePP, 0
inPP1 3
	m_tilesetPP4 =
.PP= >
m_TilePP> D
.PPD E
m_TilingRulesPPE R
)PPR S
{PPT U
foreachQQ 
(QQ 
SpriteQQ "
originalSpriteQQ# 1
inQQ2 4
ruleQQ5 9
.QQ9 :
	m_SpritesQQ: C
)QQC D
{QQE F
stringRR 

spriteNameRR )
=RR* +
originalSpriteRR, :
.RR: ;
nameRR; ?
;RR? @
stringSS 
spriteNumberSS +
=SS, -
RegexSS. 3
.SS3 4
MatchSS4 9
(SS9 :

spriteNameSS: D
,SSD E
$strSSF N
)SSN O
.SSO P
ValueSSP U
;SSU V
SpriteUU "
matchingOverrideSpriteUU 5
=UU6 7
overrideSpritesUU8 G
.UUG H
FirstUUH M
(UUM N
spriteUUN T
=>UUU W
spriteUUX ^
.UU^ _
nameUU_ c
.UUc d
EndsWithUUd l
(UUl m
spriteNumberUUm y
)UUy z
)UUz {
;UU{ |
	m_tilesetWW !
[WW! "
originalSpriteWW" 0
]WW0 1
=WW2 3"
matchingOverrideSpriteWW4 J
;WWJ K
}XX 
}YY 
finished[[ 
=[[ 
true[[ 
;[[  
}\\ 
catch]] 
(]] 
System]] 
.]] %
InvalidOperationException]] 2
ex]]3 5
)]]5 6
{]]7 8
throw^^ 
(^^ 
new^^ 
System^^ !
.^^! "'
ArgumentOutOfRangeException^^" =
(^^= >
$str^^> U
,^^U V
ex^^W Y
)^^Y Z
)^^Z [
;^^[ \
}__ 
finally`` 
{`` 
ifcc 
(cc 
!cc 
finishedcc 
)cc 
{cc 
Undodd 
.dd 
PerformUndodd $
(dd$ %
)dd% &
;dd& '
}ee 
}ff 
}gg 	
}ii 
}jj îÁ
©C:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Editor\Tiles\RuleOverrideTile\RuleOverrideTileEditor.cs
	namespace 	
UnityEditor
 
{ 
[		 
CustomEditor		 
(		 
typeof		 
(		 
RuleOverrideTile		 )
)		) *
)		* +
]		+ ,
public

 

class

 "
RuleOverrideTileEditor

 '
:

( )
Editor

* 0
{ 
public 
RuleOverrideTile 
overrideTile  ,
{- .
get/ 2
{3 4
return5 ;
(< =
target= C
asD F
RuleOverrideTileG W
)W X
;X Y
}Z [
}\ ]
public 
RuleTileEditor 
ruleTileEditor ,
{ 	
get 
{ 
if 
(  
m_RuleTileEditorTile (
!=) +
overrideTile, 8
.8 9
m_Tile9 ?
)? @
{ 
DestroyImmediate $
($ %
m_RuleTileEditor% 5
)5 6
;6 7
m_RuleTileEditor $
=% &
Editor' -
.- .
CreateEditor. :
(: ;
overrideTile; G
.G H
m_TileH N
)N O
asP R
RuleTileEditorS a
;a b 
m_RuleTileEditorTile (
=) *
overrideTile+ 7
.7 8
m_Tile8 >
;> ?
} 
return 
m_RuleTileEditor '
;' (
} 
} 	
private 
List 
< 
KeyValuePair !
<! "
Sprite" (
,( )
Sprite* 0
>0 1
>1 2
	m_Sprites3 <
;< =
private 
List 
< 
KeyValuePair !
<! "
RuleTile" *
.* +

TilingRule+ 5
,5 6
RuleTile7 ?
.? @

TilingRule@ J
>J K
>K L
m_RulesM T
;T U
ReorderableList 
m_SpriteList $
;$ %
ReorderableList   

m_RuleList   "
;  " #
RuleTileEditor!! 
m_RuleTileEditor!! '
;!!' (
RuleTile""  
m_RuleTileEditorTile"" %
;""% &
private$$ 
float$$ "
k_DefaultElementHeight$$ ,
{$$- .
get$$/ 2
{$$3 4
return$$5 ;
RuleTileEditor$$< J
.$$J K"
k_DefaultElementHeight$$K a
;$$a b
}$$c d
}$$e f
private%% 
float%% !
k_PaddingBetweenRules%% +
{%%, -
get%%. 1
{%%2 3
return%%4 :
RuleTileEditor%%; I
.%%I J!
k_PaddingBetweenRules%%J _
;%%_ `
}%%a b
}%%c d
private&& 
float&& 
k_SingleLineHeight&& (
{&&) *
get&&+ .
{&&/ 0
return&&1 7
RuleTileEditor&&8 F
.&&F G
k_SingleLineHeight&&G Y
;&&Y Z
}&&[ \
}&&] ^
private'' 
float'' 
k_LabelWidth'' "
{''# $
get''% (
{'') *
return''+ 1
RuleTileEditor''2 @
.''@ A
k_LabelWidth''A M
;''M N
}''O P
}''Q R
void)) 
OnEnable)) 
()) 
))) 
{** 	
if++ 
(++ 
	m_Sprites++ 
==++ 
null++ !
)++! "
	m_Sprites,, 
=,, 
new,, 
List,,  $
<,,$ %
KeyValuePair,,% 1
<,,1 2
Sprite,,2 8
,,,8 9
Sprite,,: @
>,,@ A
>,,A B
(,,B C
),,C D
;,,D E
if.. 
(.. 
m_Rules.. 
==.. 
null.. 
)..  
m_Rules// 
=// 
new// 
List// "
<//" #
KeyValuePair//# /
</// 0
RuleTile//0 8
.//8 9

TilingRule//9 C
,//C D
RuleTile//E M
.//M N

TilingRule//N X
>//X Y
>//Y Z
(//Z [
)//[ \
;//\ ]
if11 
(11 
m_SpriteList11 
==11 
null11  $
)11$ %
{22 
overrideTile33 
.33 
GetOverrides33 )
(33) *
	m_Sprites33* 3
)333 4
;334 5
m_SpriteList55 
=55 
new55 "
ReorderableList55# 2
(552 3
	m_Sprites553 <
,55< =
typeof55> D
(55D E
KeyValuePair55E Q
<55Q R
Sprite55R X
,55X Y
Sprite55Z `
>55` a
)55a b
,55b c
false55d i
,55i j
true55k o
,55o p
false55q v
,55v w
false55x }
)55} ~
;55~ 
m_SpriteList66 
.66 
drawHeaderCallback66 /
=660 1
DrawSpriteHeader662 B
;66B C
m_SpriteList77 
.77 
drawElementCallback77 0
=771 2
DrawSpriteElement773 D
;77D E
m_SpriteList88 
.88 
elementHeight88 *
=88+ ,"
k_DefaultElementHeight88- C
+88D E!
k_PaddingBetweenRules88F [
;88[ \
}99 
if:: 
(:: 

m_RuleList:: 
==:: 
null:: "
)::" #
{;; 
overrideTile<< 
.<< 
GetOverrides<< )
(<<) *
m_Rules<<* 1
)<<1 2
;<<2 3

m_RuleList>> 
=>> 
new>>  
ReorderableList>>! 0
(>>0 1
m_Rules>>1 8
,>>8 9
typeof>>: @
(>>@ A
KeyValuePair>>A M
<>>M N
RuleTile>>N V
.>>V W

TilingRule>>W a
,>>a b
RuleTile>>c k
.>>k l

TilingRule>>l v
>>>v w
)>>w x
,>>x y
false>>z 
,	>> Ä
true
>>Å Ö
,
>>Ö Ü
false
>>á å
,
>>å ç
false
>>é ì
)
>>ì î
;
>>î ï

m_RuleList?? 
.?? 
drawHeaderCallback?? -
=??. /
DrawRuleHeader??0 >
;??> ?

m_RuleList@@ 
.@@ 
drawElementCallback@@ .
=@@/ 0
DrawRuleElement@@1 @
;@@@ A

m_RuleListAA 
.AA !
elementHeightCallbackAA 0
=AA1 2 
GetRuleElementHeightAA3 G
;AAG H
}BB 
}CC 	
voidEE 
	OnDisableEE 
(EE 
)EE 
{FF 	
DestroyImmediateGG 
(GG 
ruleTileEditorGG +
)GG+ ,
;GG, - 
m_RuleTileEditorTileHH  
=HH! "
nullHH# '
;HH' (
}II 	
publicKK 
overrideKK 
voidKK 
OnInspectorGUIKK +
(KK+ ,
)KK, -
{LL 	
serializedObjectMM 
.MM $
UpdateIfRequiredOrScriptMM 5
(MM5 6
)MM6 7
;MM7 8
	EditorGUIOO 
.OO 
BeginChangeCheckOO &
(OO& '
)OO' (
;OO( )
EditorGUILayoutQQ 
.QQ 
PropertyFieldQQ )
(QQ) *
serializedObjectQQ* :
.QQ: ;
FindPropertyQQ; G
(QQG H
$strQQH P
)QQP Q
)QQQ R
;QQR S
ifRR 
(RR 
overrideTileRR 
.RR 
m_InstanceTileRR +
)RR+ ,
{SS 
SerializedObjectTT  (
instanceTileSerializedObjectTT! =
=TT> ?
newTT@ C
SerializedObjectTTD T
(TTT U
overrideTileTTU a
.TTa b
m_InstanceTileTTb p
)TTp q
;TTq r
overrideTileUU 
.UU 
m_InstanceTileUU +
.UU+ ,
	hideFlagsUU, 5
=UU6 7
	HideFlagsUU8 A
.UUA B
NoneUUB F
;UUF G
RuleTileEditorVV 
.VV 
DrawCustomFieldsVV /
(VV/ 0
overrideTileVV0 <
.VV< =
m_InstanceTileVV= K
,VVK L(
instanceTileSerializedObjectVVM i
)VVi j
;VVj k
overrideTileWW 
.WW 
m_InstanceTileWW +
.WW+ ,
	hideFlagsWW, 5
=WW6 7
	HideFlagsWW8 A
.WWA B
NotEditableWWB M
;WWM N(
instanceTileSerializedObjectXX ,
.XX, -#
ApplyModifiedPropertiesXX- D
(XXD E
)XXE F
;XXF G
}YY 
EditorGUILayoutZZ 
.ZZ 
PropertyFieldZZ )
(ZZ) *
serializedObjectZZ* :
.ZZ: ;
FindPropertyZZ; G
(ZZG H
$strZZH T
)ZZT U
)ZZU V
;ZZV W
serializedObject[[ 
.[[ #
ApplyModifiedProperties[[ 4
([[4 5
)[[5 6
;[[6 7
if]] 
(]] 
	EditorGUI]] 
.]] 
EndChangeCheck]] (
(]]( )
)]]) *
)]]* +
{^^ 
UpdateInstanceTile__ "
(__" #
)__# $
;__$ %
SaveTile`` 
(`` 
)`` 
;`` 
}aa 
ifcc 
(cc 
!cc 
overrideTilecc 
.cc 

m_Advancedcc (
)cc( )
{dd 
usingee 
(ee 
newee 
	EditorGUIee $
.ee$ %
DisabledScopeee% 2
(ee2 3
overrideTileee3 ?
.ee? @
m_Tileee@ F
==eeG I
nulleeJ N
)eeN O
)eeO P
{ff 
	EditorGUIgg 
.gg 
BeginChangeCheckgg .
(gg. /
)gg/ 0
;gg0 1
overrideTilehh  
.hh  !
GetOverrideshh! -
(hh- .
	m_Spriteshh. 7
)hh7 8
;hh8 9
m_SpriteListjj  
.jj  !
listjj! %
=jj& '
	m_Spritesjj( 1
;jj1 2
m_SpriteListkk  
.kk  !
DoLayoutListkk! -
(kk- .
)kk. /
;kk/ 0
ifll 
(ll 
	EditorGUIll !
.ll! "
EndChangeCheckll" 0
(ll0 1
)ll1 2
)ll2 3
{mm 
fornn 
(nn 
intnn  
inn! "
=nn# $
$numnn% &
;nn& '
inn( )
<nn* +
targetsnn, 3
.nn3 4
Lengthnn4 :
;nn: ;
inn< =
++nn= ?
)nn? @
{oo 
RuleOverrideTilepp ,
tilepp- 1
=pp2 3
targetspp4 ;
[pp; <
ipp< =
]pp= >
aspp? A
RuleOverrideTileppB R
;ppR S
tileqq  
.qq  !
ApplyOverridesqq! /
(qq/ 0
	m_Spritesqq0 9
)qq9 :
;qq: ;
SaveTilerr $
(rr$ %
)rr% &
;rr& '
}ss 
}tt 
}uu 
}vv 
elseww 
{xx 
usingyy 
(yy 
newyy 
	EditorGUIyy $
.yy$ %
DisabledScopeyy% 2
(yy2 3
overrideTileyy3 ?
.yy? @
m_Tileyy@ F
==yyG I
nullyyJ N
)yyN O
)yyO P
{zz 
overrideTile{{  
.{{  !
GetOverrides{{! -
({{- .
m_Rules{{. 5
){{5 6
;{{6 7

m_RuleList}} 
.}} 
list}} #
=}}$ %
m_Rules}}& -
;}}- .

m_RuleList~~ 
.~~ 
DoLayoutList~~ +
(~~+ ,
)~~, -
;~~- .
} 
}
ÄÄ 
}
ÅÅ 	
private
ÉÉ 
void
ÉÉ  
UpdateInstanceTile
ÉÉ '
(
ÉÉ' (
)
ÉÉ( )
{
ÑÑ 	
bool
ÖÖ 
assetChanged
ÖÖ 
=
ÖÖ 
false
ÖÖ  %
;
ÖÖ% &
if
áá 
(
áá 
overrideTile
áá 
.
áá 
m_InstanceTile
áá +
)
áá+ ,
{
àà 
if
ââ 
(
ââ 
!
ââ 
overrideTile
ââ !
.
ââ! "
m_Tile
ââ" (
||
ââ) +
overrideTile
ââ, 8
.
ââ8 9
m_InstanceTile
ââ9 G
.
ââG H
GetType
ââH O
(
ââO P
)
ââP Q
!=
ââR T
overrideTile
ââU a
.
ââa b
m_Tile
ââb h
.
ââh i
GetType
ââi p
(
ââp q
)
ââq r
)
ââr s
{
ää 
DestroyImmediate
ãã $
(
ãã$ %
overrideTile
ãã% 1
.
ãã1 2
m_InstanceTile
ãã2 @
,
ãã@ A
true
ããB F
)
ããF G
;
ããG H
overrideTile
åå  
.
åå  !
m_InstanceTile
åå! /
=
åå0 1
null
åå2 6
;
åå6 7
assetChanged
çç  
=
çç! "
true
çç# '
;
çç' (
}
éé 
}
èè 
if
êê 
(
êê 
!
êê 
overrideTile
êê 
.
êê 
m_InstanceTile
êê ,
)
êê, -
{
ëë 
if
íí 
(
íí 
overrideTile
íí  
.
íí  !
m_Tile
íí! '
)
íí' (
{
ìì 
var
îî 
t
îî 
=
îî 
overrideTile
îî (
.
îî( )
m_Tile
îî) /
.
îî/ 0
GetType
îî0 7
(
îî7 8
)
îî8 9
;
îî9 :
RuleTile
ïï 
instanceTile
ïï )
=
ïï* +
ScriptableObject
ïï, <
.
ïï< =
CreateInstance
ïï= K
(
ïïK L
t
ïïL M
)
ïïM N
as
ïïO Q
RuleTile
ïïR Z
;
ïïZ [
instanceTile
ññ  
.
ññ  !
	hideFlags
ññ! *
=
ññ+ ,
	HideFlags
ññ- 6
.
ññ6 7
NotEditable
ññ7 B
;
ññB C
AssetDatabase
óó !
.
óó! "
AddObjectToAsset
óó" 2
(
óó2 3
instanceTile
óó3 ?
,
óó? @
overrideTile
óóA M
)
óóM N
;
óóN O
overrideTile
òò  
.
òò  !
m_InstanceTile
òò! /
=
òò0 1
instanceTile
òò2 >
;
òò> ?
assetChanged
ôô  
=
ôô! "
true
ôô# '
;
ôô' (
}
öö 
}
õõ 
if
ùù 
(
ùù 
overrideTile
ùù 
.
ùù 
m_InstanceTile
ùù +
)
ùù+ ,
{
ûû 
string
üü 
instanceTileName
üü '
=
üü( )
overrideTile
üü* 6
.
üü6 7
m_Tile
üü7 =
.
üü= >
name
üü> B
+
üüC D
$str
üüE R
;
üüR S
if
†† 
(
†† 
overrideTile
††  
.
††  !
m_InstanceTile
††! /
.
††/ 0
name
††0 4
!=
††5 7
instanceTileName
††8 H
)
††H I
{
°° 
overrideTile
¢¢  
.
¢¢  !
m_InstanceTile
¢¢! /
.
¢¢/ 0
name
¢¢0 4
=
¢¢5 6
instanceTileName
¢¢7 G
;
¢¢G H
assetChanged
££  
=
££! "
true
££# '
;
££' (
}
§§ 
}
•• 
if
ßß 
(
ßß 
assetChanged
ßß 
)
ßß 
AssetDatabase
®® 
.
®® 

SaveAssets
®® (
(
®®( )
)
®®) *
;
®®* +
}
©© 	
private
´´ 
void
´´ 
SaveTile
´´ 
(
´´ 
)
´´ 
{
¨¨ 	
EditorUtility
≠≠ 
.
≠≠ 
SetDirty
≠≠ "
(
≠≠" #
target
≠≠# )
)
≠≠) *
;
≠≠* +
	SceneView
ÆÆ 
.
ÆÆ 

RepaintAll
ÆÆ  
(
ÆÆ  !
)
ÆÆ! "
;
ÆÆ" #
overrideTile
∞∞ 
.
∞∞ 
Override
∞∞ !
(
∞∞! "
)
∞∞" #
;
∞∞# $
}
±± 	
private
≥≥ 
void
≥≥ 
DrawSpriteElement
≥≥ &
(
≥≥& '
Rect
≥≥' +
rect
≥≥, 0
,
≥≥0 1
int
≥≥2 5
index
≥≥6 ;
,
≥≥; <
bool
≥≥= A
selected
≥≥B J
,
≥≥J K
bool
≥≥L P
focused
≥≥Q X
)
≥≥X Y
{
¥¥ 	
Sprite
µµ 
originalSprite
µµ !
=
µµ" #
	m_Sprites
µµ$ -
[
µµ- .
index
µµ. 3
]
µµ3 4
.
µµ4 5
Key
µµ5 8
;
µµ8 9
Sprite
∂∂ 
overrideSprite
∂∂ !
=
∂∂" #
	m_Sprites
∂∂$ -
[
∂∂- .
index
∂∂. 3
]
∂∂3 4
.
∂∂4 5
Value
∂∂5 :
;
∂∂: ;
rect
∏∏ 
.
∏∏ 
y
∏∏ 
+=
∏∏ 
$num
∏∏ 
;
∏∏ 
rect
ππ 
.
ππ 
height
ππ 
-=
ππ #
k_PaddingBetweenRules
ππ 0
;
ππ0 1
rect
ªª 
.
ªª 
xMax
ªª 
=
ªª 
rect
ªª 
.
ªª 
xMax
ªª !
/
ªª" #
$num
ªª$ (
;
ªª( )
using
ºº 
(
ºº 
new
ºº 
	EditorGUI
ºº  
.
ºº  !
DisabledScope
ºº! .
(
ºº. /
true
ºº/ 3
)
ºº3 4
)
ºº4 5
	EditorGUI
ΩΩ 
.
ΩΩ 
ObjectField
ΩΩ %
(
ΩΩ% &
new
ΩΩ& )
Rect
ΩΩ* .
(
ΩΩ. /
rect
ΩΩ/ 3
.
ΩΩ3 4
xMin
ΩΩ4 8
,
ΩΩ8 9
rect
ΩΩ: >
.
ΩΩ> ?
yMin
ΩΩ? C
,
ΩΩC D
rect
ΩΩE I
.
ΩΩI J
height
ΩΩJ P
,
ΩΩP Q
rect
ΩΩR V
.
ΩΩV W
height
ΩΩW ]
)
ΩΩ] ^
,
ΩΩ^ _
originalSprite
ΩΩ` n
,
ΩΩn o
typeof
ΩΩp v
(
ΩΩv w
Sprite
ΩΩw }
)
ΩΩ} ~
,
ΩΩ~ 
falseΩΩÄ Ö
)ΩΩÖ Ü
;ΩΩÜ á
rect
ææ 
.
ææ 
xMin
ææ 
=
ææ 
rect
ææ 
.
ææ 
xMax
ææ !
;
ææ! "
rect
øø 
.
øø 
xMax
øø 
*=
øø 
$num
øø 
;
øø 
	EditorGUI
¡¡ 
.
¡¡ 
BeginChangeCheck
¡¡ &
(
¡¡& '
)
¡¡' (
;
¡¡( )
overrideSprite
¬¬ 
=
¬¬ 
	EditorGUI
¬¬ &
.
¬¬& '
ObjectField
¬¬' 2
(
¬¬2 3
new
¬¬3 6
Rect
¬¬7 ;
(
¬¬; <
rect
¬¬< @
.
¬¬@ A
xMin
¬¬A E
,
¬¬E F
rect
¬¬G K
.
¬¬K L
yMin
¬¬L P
,
¬¬P Q
rect
¬¬R V
.
¬¬V W
height
¬¬W ]
,
¬¬] ^
rect
¬¬_ c
.
¬¬c d
height
¬¬d j
)
¬¬j k
,
¬¬k l
overrideSprite
¬¬m {
,
¬¬{ |
typeof¬¬} É
(¬¬É Ñ
Sprite¬¬Ñ ä
)¬¬ä ã
,¬¬ã å
false¬¬ç í
)¬¬í ì
as¬¬î ñ
Sprite¬¬ó ù
;¬¬ù û
if
√√ 
(
√√ 
	EditorGUI
√√ 
.
√√ 
EndChangeCheck
√√ (
(
√√( )
)
√√) *
)
√√* +
{
ƒƒ 
	m_Sprites
≈≈ 
[
≈≈ 
index
≈≈ 
]
≈≈  
=
≈≈! "
new
≈≈# &
KeyValuePair
≈≈' 3
<
≈≈3 4
Sprite
≈≈4 :
,
≈≈: ;
Sprite
≈≈< B
>
≈≈B C
(
≈≈C D
originalSprite
≈≈D R
,
≈≈R S
overrideSprite
≈≈T b
)
≈≈b c
;
≈≈c d
}
∆∆ 
}
«« 	
private
»» 
void
»» 
DrawSpriteHeader
»» %
(
»»% &
Rect
»»& *
rect
»»+ /
)
»»/ 0
{
…… 	
float
   
xMax
   
=
   
rect
   
.
   
xMax
   "
;
  " #
rect
ÀÀ 
.
ÀÀ 
xMax
ÀÀ 
=
ÀÀ 
rect
ÀÀ 
.
ÀÀ 
xMax
ÀÀ !
/
ÀÀ" #
$num
ÀÀ$ (
;
ÀÀ( )
GUI
ÃÃ 
.
ÃÃ 
Label
ÃÃ 
(
ÃÃ 
rect
ÃÃ 
,
ÃÃ 
$str
ÃÃ &
,
ÃÃ& '
EditorStyles
ÃÃ( 4
.
ÃÃ4 5
label
ÃÃ5 :
)
ÃÃ: ;
;
ÃÃ; <
rect
ÕÕ 
.
ÕÕ 
xMin
ÕÕ 
=
ÕÕ 
rect
ÕÕ 
.
ÕÕ 
xMax
ÕÕ !
;
ÕÕ! "
rect
ŒŒ 
.
ŒŒ 
xMax
ŒŒ 
=
ŒŒ 
xMax
ŒŒ 
;
ŒŒ 
GUI
œœ 
.
œœ 
Label
œœ 
(
œœ 
rect
œœ 
,
œœ 
$str
œœ &
,
œœ& '
EditorStyles
œœ( 4
.
œœ4 5
label
œœ5 :
)
œœ: ;
;
œœ; <
}
–– 	
private
““ 
void
““ 
DrawRuleElement
““ $
(
““$ %
Rect
““% )
rect
““* .
,
““. /
int
““0 3
index
““4 9
,
““9 :
bool
““; ?
selected
““@ H
,
““H I
bool
““J N
focused
““O V
)
““V W
{
”” 	
RuleTile
‘‘ 
.
‘‘ 

TilingRule
‘‘ 
originalRule
‘‘  ,
=
‘‘- .
m_Rules
‘‘/ 6
[
‘‘6 7
index
‘‘7 <
]
‘‘< =
.
‘‘= >
Key
‘‘> A
;
‘‘A B
RuleTile
’’ 
.
’’ 

TilingRule
’’ 
overrideRule
’’  ,
=
’’- .
m_Rules
’’/ 6
[
’’6 7
index
’’7 <
]
’’< =
.
’’= >
Value
’’> C
;
’’C D
float
◊◊ 
matrixWidth
◊◊ 
=
◊◊ $
k_DefaultElementHeight
◊◊  6
;
◊◊6 7
float
ŸŸ 
xMax
ŸŸ 
=
ŸŸ 
rect
ŸŸ 
.
ŸŸ 
xMax
ŸŸ "
;
ŸŸ" #
rect
⁄⁄ 
.
⁄⁄ 
xMax
⁄⁄ 
=
⁄⁄ 
rect
⁄⁄ 
.
⁄⁄ 
xMax
⁄⁄ !
/
⁄⁄" #
$num
⁄⁄$ (
+
⁄⁄) *
matrixWidth
⁄⁄+ 6
-
⁄⁄7 8
$num
⁄⁄9 <
;
⁄⁄< =
if
‹‹ 
(
‹‹ 
index
‹‹ 
!=
‹‹ 
overrideTile
‹‹ %
.
‹‹% &
m_Tile
‹‹& ,
.
‹‹, -
m_TilingRules
‹‹- :
.
‹‹: ;
Count
‹‹; @
)
‹‹@ A%
DrawOriginalRuleElement
›› '
(
››' (
rect
››( ,
,
››, -
originalRule
››. :
)
››: ;
;
››; <
else
ﬁﬁ %
DrawOriginalRuleElement
ﬂﬂ '
(
ﬂﬂ' (
rect
ﬂﬂ( ,
,
ﬂﬂ, -
originalRule
ﬂﬂ. :
,
ﬂﬂ: ;
true
ﬂﬂ< @
)
ﬂﬂ@ A
;
ﬂﬂA B
rect
·· 
.
·· 
xMin
·· 
=
·· 
rect
·· 
.
·· 
xMax
·· !
;
··! "
rect
‚‚ 
.
‚‚ 
xMax
‚‚ 
=
‚‚ 
xMax
‚‚ 
;
‚‚ 
	EditorGUI
‰‰ 
.
‰‰ 
BeginChangeCheck
‰‰ &
(
‰‰& '
)
‰‰' (
;
‰‰( )
if
ÂÂ 
(
ÂÂ 
index
ÂÂ 
!=
ÂÂ 
overrideTile
ÂÂ %
.
ÂÂ% &
m_Tile
ÂÂ& ,
.
ÂÂ, -
m_TilingRules
ÂÂ- :
.
ÂÂ: ;
Count
ÂÂ; @
)
ÂÂ@ A!
DrawOverrideElement
ÊÊ #
(
ÊÊ# $
rect
ÊÊ$ (
,
ÊÊ( )
originalRule
ÊÊ* 6
)
ÊÊ6 7
;
ÊÊ7 8
else
ÁÁ (
DrawOverrideDefaultElement
ËË *
(
ËË* +
rect
ËË+ /
,
ËË/ 0
overrideRule
ËË1 =
)
ËË= >
;
ËË> ?
if
ÈÈ 
(
ÈÈ 
	EditorGUI
ÈÈ 
.
ÈÈ 
EndChangeCheck
ÈÈ (
(
ÈÈ( )
)
ÈÈ) *
)
ÈÈ* +
SaveTile
ÍÍ 
(
ÍÍ 
)
ÍÍ 
;
ÍÍ 
}
ÎÎ 	
public
ÏÏ 
void
ÏÏ %
DrawOriginalRuleElement
ÏÏ +
(
ÏÏ+ ,
Rect
ÏÏ, 0
rect
ÏÏ1 5
,
ÏÏ5 6
RuleTile
ÏÏ7 ?
.
ÏÏ? @

TilingRule
ÏÏ@ J
originalRule
ÏÏK W
,
ÏÏW X
bool
ÏÏY ]
	isDefault
ÏÏ^ g
=
ÏÏh i
false
ÏÏj o
)
ÏÏo p
{
ÌÌ 	
using
ÓÓ 
(
ÓÓ 
new
ÓÓ 
	EditorGUI
ÓÓ  
.
ÓÓ  !
DisabledScope
ÓÓ! .
(
ÓÓ. /
true
ÓÓ/ 3
)
ÓÓ3 4
)
ÓÓ4 5
{
ÔÔ 
float
 
yPos
 
=
 
rect
 !
.
! "
yMin
" &
+
' (
$num
) +
;
+ ,
float
ÒÒ 
height
ÒÒ 
=
ÒÒ 
rect
ÒÒ #
.
ÒÒ# $
height
ÒÒ$ *
-
ÒÒ+ ,#
k_PaddingBetweenRules
ÒÒ- B
;
ÒÒB C
float
ÚÚ 
matrixWidth
ÚÚ !
=
ÚÚ" #$
k_DefaultElementHeight
ÚÚ$ :
;
ÚÚ: ;
	BoundsInt
ÙÙ 

ruleBounds
ÙÙ $
=
ÙÙ% &
originalRule
ÙÙ' 3
.
ÙÙ3 4
	GetBounds
ÙÙ4 =
(
ÙÙ= >
)
ÙÙ> ?
;
ÙÙ? @
	BoundsInt
ıı 
ruleGuiBounds
ıı '
=
ıı( )
ruleTileEditor
ıı* 8
.
ıı8 9
GetRuleGUIBounds
ıı9 I
(
ııI J

ruleBounds
ııJ T
,
ııT U
originalRule
ııV b
)
ııb c
;
ııc d
Vector2
ˆˆ 

matrixSize
ˆˆ "
=
ˆˆ# $
ruleTileEditor
ˆˆ% 3
.
ˆˆ3 4
GetMatrixSize
ˆˆ4 A
(
ˆˆA B
ruleGuiBounds
ˆˆB O
)
ˆˆO P
;
ˆˆP Q
Vector2
˜˜ 
matrixSizeRate
˜˜ &
=
˜˜' (

matrixSize
˜˜) 3
/
˜˜4 5
Mathf
˜˜6 ;
.
˜˜; <
Max
˜˜< ?
(
˜˜? @

matrixSize
˜˜@ J
.
˜˜J K
x
˜˜K L
,
˜˜L M

matrixSize
˜˜N X
.
˜˜X Y
y
˜˜Y Z
)
˜˜Z [
;
˜˜[ \
Vector2
¯¯ 
matrixRectSize
¯¯ &
=
¯¯' (
new
¯¯) ,
Vector2
¯¯- 4
(
¯¯4 5
matrixWidth
¯¯5 @
*
¯¯A B
matrixSizeRate
¯¯C Q
.
¯¯Q R
x
¯¯R S
,
¯¯S T$
k_DefaultElementHeight
¯¯U k
*
¯¯l m
matrixSizeRate
¯¯n |
.
¯¯| }
y
¯¯} ~
)
¯¯~ 
;¯¯ Ä
Vector2
˘˘  
matrixRectPosition
˘˘ *
=
˘˘+ ,
new
˘˘- 0
Vector2
˘˘1 8
(
˘˘8 9
rect
˘˘9 =
.
˘˘= >
xMax
˘˘> B
-
˘˘C D
matrixWidth
˘˘E P
*
˘˘Q R
$num
˘˘S U
-
˘˘V W
$num
˘˘X [
,
˘˘[ \
yPos
˘˘] a
)
˘˘a b
;
˘˘b c 
matrixRectPosition
˙˙ "
.
˙˙" #
x
˙˙# $
+=
˙˙% '
(
˙˙( )
matrixWidth
˙˙) 4
-
˙˙5 6
matrixRectSize
˙˙7 E
.
˙˙E F
x
˙˙F G
)
˙˙G H
*
˙˙I J
$num
˙˙K O
;
˙˙O P 
matrixRectPosition
˚˚ "
.
˚˚" #
y
˚˚# $
+=
˚˚% '
(
˚˚( )$
k_DefaultElementHeight
˚˚) ?
-
˚˚@ A
matrixRectSize
˚˚B P
.
˚˚P Q
y
˚˚Q R
)
˚˚R S
*
˚˚T U
$num
˚˚V Z
;
˚˚Z [
Rect
˝˝ 
inspectorRect
˝˝ "
=
˝˝# $
new
˝˝% (
Rect
˝˝) -
(
˝˝- .
rect
˝˝. 2
.
˝˝2 3
xMin
˝˝3 7
,
˝˝7 8
yPos
˝˝9 =
,
˝˝= >
rect
˝˝? C
.
˝˝C D
width
˝˝D I
-
˝˝J K
matrixWidth
˝˝L W
*
˝˝X Y
$num
˝˝Z \
-
˝˝] ^
$num
˝˝_ b
,
˝˝b c
height
˝˝d j
)
˝˝j k
;
˝˝k l
Rect
˛˛ 

matrixRect
˛˛ 
=
˛˛  !
new
˛˛" %
Rect
˛˛& *
(
˛˛* + 
matrixRectPosition
˛˛+ =
,
˛˛= >
matrixRectSize
˛˛? M
)
˛˛M N
;
˛˛N O
Rect
ˇˇ 

spriteRect
ˇˇ 
=
ˇˇ  !
new
ˇˇ" %
Rect
ˇˇ& *
(
ˇˇ* +
rect
ˇˇ+ /
.
ˇˇ/ 0
xMax
ˇˇ0 4
-
ˇˇ5 6
matrixWidth
ˇˇ7 B
-
ˇˇC D
$num
ˇˇE G
,
ˇˇG H
yPos
ˇˇI M
,
ˇˇM N
matrixWidth
ˇˇO Z
,
ˇˇZ [$
k_DefaultElementHeight
ˇˇ\ r
)
ˇˇr s
;
ˇˇs t
if
ÇÇ 
(
ÇÇ 
!
ÇÇ 
	isDefault
ÇÇ 
)
ÇÇ 
{
ÉÉ 
ruleTileEditor
ÑÑ "
.
ÑÑ" # 
RuleInspectorOnGUI
ÑÑ# 5
(
ÑÑ5 6
inspectorRect
ÑÑ6 C
,
ÑÑC D
originalRule
ÑÑE Q
)
ÑÑQ R
;
ÑÑR S
ruleTileEditor
ÖÖ "
.
ÖÖ" #
RuleMatrixOnGUI
ÖÖ# 2
(
ÖÖ2 3
overrideTile
ÖÖ3 ?
.
ÖÖ? @
m_Tile
ÖÖ@ F
,
ÖÖF G

matrixRect
ÖÖH R
,
ÖÖR S
ruleGuiBounds
ÖÖT a
,
ÖÖa b
originalRule
ÖÖc o
)
ÖÖo p
;
ÖÖp q
}
ÜÜ 
else
áá 
{
àà /
!RuleOriginalDefaultInspectorOnGUI
ââ 5
(
ââ5 6
inspectorRect
ââ6 C
,
ââC D
originalRule
ââE Q
)
ââQ R
;
ââR S
}
ää 
ruleTileEditor
åå 
.
åå 
SpriteOnGUI
åå *
(
åå* +

spriteRect
åå+ 5
,
åå5 6
originalRule
åå7 C
)
ååC D
;
ååD E
}
çç 
}
éé 	
private
èè 
void
èè !
DrawOverrideElement
èè (
(
èè( )
Rect
èè) -
rect
èè. 2
,
èè2 3
RuleTile
èè4 <
.
èè< =

TilingRule
èè= G
originalRule
èèH T
)
èèT U
{
êê 	
float
ëë 
yPos
ëë 
=
ëë 
rect
ëë 
.
ëë 
yMin
ëë "
+
ëë# $
$num
ëë% '
;
ëë' (
float
íí 
height
íí 
=
íí 
rect
íí 
.
íí  
height
íí  &
-
íí' (#
k_PaddingBetweenRules
íí) >
;
íí> ?
float
ìì 
matrixWidth
ìì 
=
ìì $
k_DefaultElementHeight
ìì  6
;
ìì6 7
Rect
ïï 
inspectorRect
ïï 
=
ïï  
new
ïï! $
Rect
ïï% )
(
ïï) *
rect
ïï* .
.
ïï. /
xMin
ïï/ 3
,
ïï3 4
yPos
ïï5 9
,
ïï9 :
rect
ïï; ?
.
ïï? @
width
ïï@ E
-
ïïF G
matrixWidth
ïïH S
-
ïïT U
$num
ïïV Y
,
ïïY Z
height
ïï[ a
)
ïïa b
;
ïïb c
Rect
ññ 

spriteRect
ññ 
=
ññ 
new
ññ !
Rect
ññ" &
(
ññ& '
rect
ññ' +
.
ññ+ ,
xMax
ññ, 0
-
ññ1 2
matrixWidth
ññ3 >
-
ññ? @
$num
ññA C
,
ññC D
yPos
ññE I
,
ññI J
matrixWidth
ññK V
,
ññV W$
k_DefaultElementHeight
ññX n
)
ññn o
;
ñño p(
RuleOverrideInspectorOnGUI
òò &
(
òò& '
inspectorRect
òò' 4
,
òò4 5
originalRule
òò6 B
)
òòB C
;
òòC D
RuleTile
ôô 
.
ôô 

TilingRule
ôô 
overrideRule
ôô  ,
=
ôô- .
overrideTile
ôô/ ;
[
ôô; <
originalRule
ôô< H
]
ôôH I
;
ôôI J
if
öö 
(
öö 
overrideRule
öö 
!=
öö 
null
öö  $
)
öö$ %
ruleTileEditor
õõ 
.
õõ 
SpriteOnGUI
õõ *
(
õõ* +

spriteRect
õõ+ 5
,
õõ5 6
overrideRule
õõ7 C
)
õõC D
;
õõD E
}
úú 	
private
ùù 
void
ùù /
!RuleOriginalDefaultInspectorOnGUI
ùù 6
(
ùù6 7
Rect
ùù7 ;
rect
ùù< @
,
ùù@ A
RuleTile
ùùB J
.
ùùJ K

TilingRule
ùùK U
originalRule
ùùV b
)
ùùb c
{
ûû 	
float
üü 
y
üü 
=
üü 
rect
üü 
.
üü 
yMin
üü 
;
üü  
GUI
°° 
.
°° 
Label
°° 
(
°° 
new
°° 
Rect
°° 
(
°° 
rect
°° #
.
°°# $
xMin
°°$ (
,
°°( )
y
°°* +
,
°°+ ,
k_LabelWidth
°°- 9
,
°°9 : 
k_SingleLineHeight
°°; M
)
°°M N
,
°°N O
$str
°°P V
)
°°V W
;
°°W X
	EditorGUI
¢¢ 
.
¢¢ 

LabelField
¢¢  
(
¢¢  !
new
¢¢! $
Rect
¢¢% )
(
¢¢) *
rect
¢¢* .
.
¢¢. /
xMin
¢¢/ 3
+
¢¢4 5
k_LabelWidth
¢¢6 B
,
¢¢B C
y
¢¢D E
,
¢¢E F
rect
¢¢G K
.
¢¢K L
width
¢¢L Q
-
¢¢R S
k_LabelWidth
¢¢T `
,
¢¢` a 
k_SingleLineHeight
¢¢b t
)
¢¢t u
,
¢¢u v
$str¢¢w Ä
)¢¢Ä Å
;¢¢Å Ç
y
££ 
+=
££  
k_SingleLineHeight
££ #
;
££# $
GUI
•• 
.
•• 
Label
•• 
(
•• 
new
•• 
Rect
•• 
(
•• 
rect
•• #
.
••# $
xMin
••$ (
,
••( )
y
••* +
,
••+ ,
k_LabelWidth
••- 9
,
••9 : 
k_SingleLineHeight
••; M
)
••M N
,
••N O
$str
••P Z
)
••Z [
;
••[ \
	EditorGUI
¶¶ 
.
¶¶ 
	EnumPopup
¶¶ 
(
¶¶  
new
¶¶  #
Rect
¶¶$ (
(
¶¶( )
rect
¶¶) -
.
¶¶- .
xMin
¶¶. 2
+
¶¶3 4
k_LabelWidth
¶¶5 A
,
¶¶A B
y
¶¶C D
,
¶¶D E
rect
¶¶F J
.
¶¶J K
width
¶¶K P
-
¶¶Q R
k_LabelWidth
¶¶S _
,
¶¶_ ` 
k_SingleLineHeight
¶¶a s
)
¶¶s t
,
¶¶t u
originalRule¶¶v Ç
.¶¶Ç É
m_ColliderType¶¶É ë
)¶¶ë í
;¶¶í ì
y
ßß 
+=
ßß  
k_SingleLineHeight
ßß #
;
ßß# $
}
®® 	
private
©© 
void
©© (
RuleOverrideInspectorOnGUI
©© /
(
©©/ 0
Rect
©©0 4
rect
©©5 9
,
©©9 :
RuleTile
©©; C
.
©©C D

TilingRule
©©D N
originalRule
©©O [
)
©©[ \
{
™™ 	
RuleTile
´´ 
.
´´ 

TilingRule
´´ 
overrideRule
´´  ,
=
´´- .
overrideTile
´´/ ;
[
´´; <
originalRule
´´< H
]
´´H I
;
´´I J
float
≠≠ 
y
≠≠ 
=
≠≠ 
rect
≠≠ 
.
≠≠ 
yMin
≠≠ 
;
≠≠  
	EditorGUI
ÆÆ 
.
ÆÆ 
BeginChangeCheck
ÆÆ &
(
ÆÆ& '
)
ÆÆ' (
;
ÆÆ( )
GUI
∞∞ 
.
∞∞ 
Label
∞∞ 
(
∞∞ 
new
∞∞ 
Rect
∞∞ 
(
∞∞ 
rect
∞∞ #
.
∞∞# $
xMin
∞∞$ (
,
∞∞( )
y
∞∞* +
,
∞∞+ ,
k_LabelWidth
∞∞- 9
,
∞∞9 : 
k_SingleLineHeight
∞∞; M
)
∞∞M N
,
∞∞N O
$str
∞∞P Y
)
∞∞Y Z
;
∞∞Z [
bool
±± 
enabled
±± 
=
±± 
	EditorGUI
±± $
.
±±$ %
Toggle
±±% +
(
±±+ ,
new
±±, /
Rect
±±0 4
(
±±4 5
rect
±±5 9
.
±±9 :
xMin
±±: >
+
±±? @
k_LabelWidth
±±A M
,
±±M N
y
±±O P
,
±±P Q
rect
±±R V
.
±±V W
width
±±W \
-
±±] ^
k_LabelWidth
±±_ k
,
±±k l 
k_SingleLineHeight
±±m 
)±± Ä
,±±Ä Å
overrideRule±±Ç é
!=±±è ë
null±±í ñ
)±±ñ ó
;±±ó ò
y
≤≤ 
+=
≤≤  
k_SingleLineHeight
≤≤ #
;
≤≤# $
if
¥¥ 
(
¥¥ 
	EditorGUI
¥¥ 
.
¥¥ 
EndChangeCheck
¥¥ (
(
¥¥( )
)
¥¥) *
)
¥¥* +
{
µµ 
if
∂∂ 
(
∂∂ 
enabled
∂∂ 
)
∂∂ 
overrideTile
∑∑  
[
∑∑  !
originalRule
∑∑! -
]
∑∑- .
=
∑∑/ 0
originalRule
∑∑1 =
;
∑∑= >
else
∏∏ 
overrideTile
ππ  
[
ππ  !
originalRule
ππ! -
]
ππ- .
=
ππ/ 0
null
ππ1 5
;
ππ5 6
overrideRule
∫∫ 
=
∫∫ 
overrideTile
∫∫ +
[
∫∫+ ,
originalRule
∫∫, 8
]
∫∫8 9
;
∫∫9 :
}
ªª 
if
ΩΩ 
(
ΩΩ 
overrideRule
ΩΩ 
==
ΩΩ 
null
ΩΩ  $
)
ΩΩ$ %
return
ææ 
;
ææ 
GUI
¿¿ 
.
¿¿ 
Label
¿¿ 
(
¿¿ 
new
¿¿ 
Rect
¿¿ 
(
¿¿ 
rect
¿¿ #
.
¿¿# $
xMin
¿¿$ (
,
¿¿( )
y
¿¿* +
,
¿¿+ ,
k_LabelWidth
¿¿- 9
,
¿¿9 : 
k_SingleLineHeight
¿¿; M
)
¿¿M N
,
¿¿N O
$str
¿¿P ]
)
¿¿] ^
;
¿¿^ _
overrideRule
¡¡ 
.
¡¡ 
m_GameObject
¡¡ %
=
¡¡& '
(
¡¡( )

GameObject
¡¡) 3
)
¡¡3 4
	EditorGUI
¡¡4 =
.
¡¡= >
ObjectField
¡¡> I
(
¡¡I J
new
¡¡J M
Rect
¡¡N R
(
¡¡R S
rect
¡¡S W
.
¡¡W X
xMin
¡¡X \
+
¡¡] ^
k_LabelWidth
¡¡_ k
,
¡¡k l
y
¡¡m n
,
¡¡n o
rect
¡¡p t
.
¡¡t u
width
¡¡u z
-
¡¡{ |
k_LabelWidth¡¡} â
,¡¡â ä"
k_SingleLineHeight¡¡ã ù
)¡¡ù û
,¡¡û ü
$str¡¡† ¢
,¡¡¢ £
overrideRule¡¡§ ∞
.¡¡∞ ±
m_GameObject¡¡± Ω
,¡¡Ω æ
typeof¡¡ø ≈
(¡¡≈ ∆

GameObject¡¡∆ –
)¡¡– —
,¡¡— “
false¡¡” ÿ
)¡¡ÿ Ÿ
;¡¡Ÿ ⁄
y
¬¬ 
+=
¬¬  
k_SingleLineHeight
¬¬ #
;
¬¬# $
GUI
√√ 
.
√√ 
Label
√√ 
(
√√ 
new
√√ 
Rect
√√ 
(
√√ 
rect
√√ #
.
√√# $
xMin
√√$ (
,
√√( )
y
√√* +
,
√√+ ,
k_LabelWidth
√√- 9
,
√√9 : 
k_SingleLineHeight
√√; M
)
√√M N
,
√√N O
$str
√√P Z
)
√√Z [
;
√√[ \
overrideRule
ƒƒ 
.
ƒƒ 
m_ColliderType
ƒƒ '
=
ƒƒ( )
(
ƒƒ* +
Tile
ƒƒ+ /
.
ƒƒ/ 0
ColliderType
ƒƒ0 <
)
ƒƒ< =
	EditorGUI
ƒƒ= F
.
ƒƒF G
	EnumPopup
ƒƒG P
(
ƒƒP Q
new
ƒƒQ T
Rect
ƒƒU Y
(
ƒƒY Z
rect
ƒƒZ ^
.
ƒƒ^ _
xMin
ƒƒ_ c
+
ƒƒd e
k_LabelWidth
ƒƒf r
,
ƒƒr s
y
ƒƒt u
,
ƒƒu v
rect
ƒƒw {
.
ƒƒ{ |
widthƒƒ| Å
-ƒƒÇ É
k_LabelWidthƒƒÑ ê
,ƒƒê ë"
k_SingleLineHeightƒƒí §
)ƒƒ§ •
,ƒƒ• ¶
overrideRuleƒƒß ≥
.ƒƒ≥ ¥
m_ColliderTypeƒƒ¥ ¬
)ƒƒ¬ √
;ƒƒ√ ƒ
y
≈≈ 
+=
≈≈  
k_SingleLineHeight
≈≈ #
;
≈≈# $
GUI
∆∆ 
.
∆∆ 
Label
∆∆ 
(
∆∆ 
new
∆∆ 
Rect
∆∆ 
(
∆∆ 
rect
∆∆ #
.
∆∆# $
xMin
∆∆$ (
,
∆∆( )
y
∆∆* +
,
∆∆+ ,
k_LabelWidth
∆∆- 9
,
∆∆9 : 
k_SingleLineHeight
∆∆; M
)
∆∆M N
,
∆∆N O
$str
∆∆P X
)
∆∆X Y
;
∆∆Y Z
overrideRule
«« 
.
«« 
m_Output
«« !
=
««" #
(
««$ %
RuleTile
««% -
.
««- .

TilingRule
««. 8
.
««8 9
OutputSprite
««9 E
)
««E F
	EditorGUI
««F O
.
««O P
	EnumPopup
««P Y
(
««Y Z
new
««Z ]
Rect
««^ b
(
««b c
rect
««c g
.
««g h
xMin
««h l
+
««m n
k_LabelWidth
««o {
,
««{ |
y
««} ~
,
««~ 
rect««Ä Ñ
.««Ñ Ö
width««Ö ä
-««ã å
k_LabelWidth««ç ô
,««ô ö"
k_SingleLineHeight««õ ≠
)««≠ Æ
,««Æ Ø
overrideRule««∞ º
.««º Ω
m_Output««Ω ≈
)««≈ ∆
;««∆ «
y
»» 
+=
»»  
k_SingleLineHeight
»» #
;
»»# $
if
   
(
   
overrideRule
   
.
   
m_Output
   %
==
  & (
RuleTile
  ) 1
.
  1 2

TilingRule
  2 <
.
  < =
OutputSprite
  = I
.
  I J
	Animation
  J S
)
  S T
{
ÀÀ 
GUI
ÃÃ 
.
ÃÃ 
Label
ÃÃ 
(
ÃÃ 
new
ÃÃ 
Rect
ÃÃ "
(
ÃÃ" #
rect
ÃÃ# '
.
ÃÃ' (
xMin
ÃÃ( ,
,
ÃÃ, -
y
ÃÃ. /
,
ÃÃ/ 0
k_LabelWidth
ÃÃ1 =
,
ÃÃ= > 
k_SingleLineHeight
ÃÃ? Q
)
ÃÃQ R
,
ÃÃR S
$str
ÃÃT [
)
ÃÃ[ \
;
ÃÃ\ ]
overrideRule
ÕÕ 
.
ÕÕ 
m_AnimationSpeed
ÕÕ -
=
ÕÕ. /
	EditorGUI
ÕÕ0 9
.
ÕÕ9 :

FloatField
ÕÕ: D
(
ÕÕD E
new
ÕÕE H
Rect
ÕÕI M
(
ÕÕM N
rect
ÕÕN R
.
ÕÕR S
xMin
ÕÕS W
+
ÕÕX Y
k_LabelWidth
ÕÕZ f
,
ÕÕf g
y
ÕÕh i
,
ÕÕi j
rect
ÕÕk o
.
ÕÕo p
width
ÕÕp u
-
ÕÕv w
k_LabelWidthÕÕx Ñ
,ÕÕÑ Ö"
k_SingleLineHeightÕÕÜ ò
)ÕÕò ô
,ÕÕô ö
overrideRuleÕÕõ ß
.ÕÕß ® 
m_AnimationSpeedÕÕ® ∏
)ÕÕ∏ π
;ÕÕπ ∫
y
ŒŒ 
+=
ŒŒ  
k_SingleLineHeight
ŒŒ '
;
ŒŒ' (
}
œœ 
if
–– 
(
–– 
overrideRule
–– 
.
–– 
m_Output
–– %
==
––& (
RuleTile
––) 1
.
––1 2

TilingRule
––2 <
.
––< =
OutputSprite
––= I
.
––I J
Random
––J P
)
––P Q
{
—— 
GUI
““ 
.
““ 
Label
““ 
(
““ 
new
““ 
Rect
““ "
(
““" #
rect
““# '
.
““' (
xMin
““( ,
,
““, -
y
““. /
,
““/ 0
k_LabelWidth
““1 =
,
““= > 
k_SingleLineHeight
““? Q
)
““Q R
,
““R S
$str
““T [
)
““[ \
;
““\ ]
overrideRule
”” 
.
”” 
m_PerlinScale
”” *
=
””+ ,
	EditorGUI
””- 6
.
””6 7
Slider
””7 =
(
””= >
new
””> A
Rect
””B F
(
””F G
rect
””G K
.
””K L
xMin
””L P
+
””Q R
k_LabelWidth
””S _
,
””_ `
y
””a b
,
””b c
rect
””d h
.
””h i
width
””i n
-
””o p
k_LabelWidth
””q }
,
””} ~!
k_SingleLineHeight”” ë
)””ë í
,””í ì
overrideRule””î †
.””† °
m_PerlinScale””° Æ
,””Æ Ø
$num””∞ ∂
,””∂ ∑
$num””∏ æ
)””æ ø
;””ø ¿
y
‘‘ 
+=
‘‘  
k_SingleLineHeight
‘‘ '
;
‘‘' (
GUI
÷÷ 
.
÷÷ 
Label
÷÷ 
(
÷÷ 
new
÷÷ 
Rect
÷÷ "
(
÷÷" #
rect
÷÷# '
.
÷÷' (
xMin
÷÷( ,
,
÷÷, -
y
÷÷. /
,
÷÷/ 0
k_LabelWidth
÷÷1 =
,
÷÷= > 
k_SingleLineHeight
÷÷? Q
)
÷÷Q R
,
÷÷R S
$str
÷÷T ]
)
÷÷] ^
;
÷÷^ _
overrideRule
◊◊ 
.
◊◊ 
m_RandomTransform
◊◊ .
=
◊◊/ 0
(
◊◊1 2
RuleTile
◊◊2 :
.
◊◊: ;

TilingRule
◊◊; E
.
◊◊E F
	Transform
◊◊F O
)
◊◊O P
	EditorGUI
◊◊P Y
.
◊◊Y Z
	EnumPopup
◊◊Z c
(
◊◊c d
new
◊◊d g
Rect
◊◊h l
(
◊◊l m
rect
◊◊m q
.
◊◊q r
xMin
◊◊r v
+
◊◊w x
k_LabelWidth◊◊y Ö
,◊◊Ö Ü
y◊◊á à
,◊◊à â
rect◊◊ä é
.◊◊é è
width◊◊è î
-◊◊ï ñ
k_LabelWidth◊◊ó £
,◊◊£ §"
k_SingleLineHeight◊◊• ∑
)◊◊∑ ∏
,◊◊∏ π
overrideRule◊◊∫ ∆
.◊◊∆ «!
m_RandomTransform◊◊« ÿ
)◊◊ÿ Ÿ
;◊◊Ÿ ⁄
y
ÿÿ 
+=
ÿÿ  
k_SingleLineHeight
ÿÿ '
;
ÿÿ' (
}
ŸŸ 
if
€€ 
(
€€ 
overrideRule
€€ 
.
€€ 
m_Output
€€ %
!=
€€& (
RuleTile
€€) 1
.
€€1 2

TilingRule
€€2 <
.
€€< =
OutputSprite
€€= I
.
€€I J
Single
€€J P
)
€€P Q
{
‹‹ 
GUI
›› 
.
›› 
Label
›› 
(
›› 
new
›› 
Rect
›› "
(
››" #
rect
››# '
.
››' (
xMin
››( ,
,
››, -
y
››. /
,
››/ 0
k_LabelWidth
››1 =
,
››= > 
k_SingleLineHeight
››? Q
)
››Q R
,
››R S
$str
››T Z
)
››Z [
;
››[ \
	EditorGUI
ﬁﬁ 
.
ﬁﬁ 
BeginChangeCheck
ﬁﬁ *
(
ﬁﬁ* +
)
ﬁﬁ+ ,
;
ﬁﬁ, -
int
ﬂﬂ 
	newLength
ﬂﬂ 
=
ﬂﬂ 
	EditorGUI
ﬂﬂ  )
.
ﬂﬂ) *
DelayedIntField
ﬂﬂ* 9
(
ﬂﬂ9 :
new
ﬂﬂ: =
Rect
ﬂﬂ> B
(
ﬂﬂB C
rect
ﬂﬂC G
.
ﬂﬂG H
xMin
ﬂﬂH L
+
ﬂﬂM N
k_LabelWidth
ﬂﬂO [
,
ﬂﬂ[ \
y
ﬂﬂ] ^
,
ﬂﬂ^ _
rect
ﬂﬂ` d
.
ﬂﬂd e
width
ﬂﬂe j
-
ﬂﬂk l
k_LabelWidth
ﬂﬂm y
,
ﬂﬂy z!
k_SingleLineHeightﬂﬂ{ ç
)ﬂﬂç é
,ﬂﬂé è
overrideRuleﬂﬂê ú
.ﬂﬂú ù
	m_Spritesﬂﬂù ¶
.ﬂﬂ¶ ß
Lengthﬂﬂß ≠
)ﬂﬂ≠ Æ
;ﬂﬂÆ Ø
if
‡‡ 
(
‡‡ 
	EditorGUI
‡‡ 
.
‡‡ 
EndChangeCheck
‡‡ ,
(
‡‡, -
)
‡‡- .
)
‡‡. /
Array
·· 
.
·· 
Resize
··  
(
··  !
ref
··! $
overrideRule
··% 1
.
··1 2
	m_Sprites
··2 ;
,
··; <
Math
··= A
.
··A B
Max
··B E
(
··E F
	newLength
··F O
,
··O P
$num
··Q R
)
··R S
)
··S T
;
··T U
y
‚‚ 
+=
‚‚  
k_SingleLineHeight
‚‚ '
;
‚‚' (
for
‰‰ 
(
‰‰ 
int
‰‰ 
i
‰‰ 
=
‰‰ 
$num
‰‰ 
;
‰‰ 
i
‰‰  !
<
‰‰" #
overrideRule
‰‰$ 0
.
‰‰0 1
	m_Sprites
‰‰1 :
.
‰‰: ;
Length
‰‰; A
;
‰‰A B
i
‰‰C D
++
‰‰D F
)
‰‰F G
{
ÂÂ 
overrideRule
ÊÊ  
.
ÊÊ  !
	m_Sprites
ÊÊ! *
[
ÊÊ* +
i
ÊÊ+ ,
]
ÊÊ, -
=
ÊÊ. /
	EditorGUI
ÊÊ0 9
.
ÊÊ9 :
ObjectField
ÊÊ: E
(
ÊÊE F
new
ÊÊF I
Rect
ÊÊJ N
(
ÊÊN O
rect
ÊÊO S
.
ÊÊS T
xMin
ÊÊT X
+
ÊÊY Z
k_LabelWidth
ÊÊ[ g
,
ÊÊg h
y
ÊÊi j
,
ÊÊj k
rect
ÊÊl p
.
ÊÊp q
width
ÊÊq v
-
ÊÊw x
k_LabelWidthÊÊy Ö
,ÊÊÖ Ü"
k_SingleLineHeightÊÊá ô
)ÊÊô ö
,ÊÊö õ
overrideRuleÊÊú ®
.ÊÊ® ©
	m_SpritesÊÊ© ≤
[ÊÊ≤ ≥
iÊÊ≥ ¥
]ÊÊ¥ µ
,ÊÊµ ∂
typeofÊÊ∑ Ω
(ÊÊΩ æ
SpriteÊÊæ ƒ
)ÊÊƒ ≈
,ÊÊ≈ ∆
falseÊÊ« Ã
)ÊÊÃ Õ
asÊÊŒ –
SpriteÊÊ— ◊
;ÊÊ◊ ÿ
y
ÁÁ 
+=
ÁÁ  
k_SingleLineHeight
ÁÁ +
;
ÁÁ+ ,
}
ËË 
}
ÈÈ 
}
ÍÍ 	
private
ÎÎ 
void
ÎÎ (
DrawOverrideDefaultElement
ÎÎ /
(
ÎÎ/ 0
Rect
ÎÎ0 4
rect
ÎÎ5 9
,
ÎÎ9 :
RuleTile
ÎÎ; C
.
ÎÎC D

TilingRule
ÎÎD N
originalRule
ÎÎO [
)
ÎÎ[ \
{
ÏÏ 	
float
ÌÌ 
yPos
ÌÌ 
=
ÌÌ 
rect
ÌÌ 
.
ÌÌ 
yMin
ÌÌ "
+
ÌÌ# $
$num
ÌÌ% '
;
ÌÌ' (
float
ÓÓ 
height
ÓÓ 
=
ÓÓ 
rect
ÓÓ 
.
ÓÓ  
height
ÓÓ  &
-
ÓÓ' (#
k_PaddingBetweenRules
ÓÓ) >
;
ÓÓ> ?
float
ÔÔ 
matrixWidth
ÔÔ 
=
ÔÔ $
k_DefaultElementHeight
ÔÔ  6
;
ÔÔ6 7
Rect
ÒÒ 
inspectorRect
ÒÒ 
=
ÒÒ  
new
ÒÒ! $
Rect
ÒÒ% )
(
ÒÒ) *
rect
ÒÒ* .
.
ÒÒ. /
xMin
ÒÒ/ 3
,
ÒÒ3 4
yPos
ÒÒ5 9
,
ÒÒ9 :
rect
ÒÒ; ?
.
ÒÒ? @
width
ÒÒ@ E
-
ÒÒF G
matrixWidth
ÒÒH S
-
ÒÒT U
$num
ÒÒV Y
,
ÒÒY Z
height
ÒÒ[ a
)
ÒÒa b
;
ÒÒb c
Rect
ÚÚ 

spriteRect
ÚÚ 
=
ÚÚ 
new
ÚÚ !
Rect
ÚÚ" &
(
ÚÚ& '
rect
ÚÚ' +
.
ÚÚ+ ,
xMax
ÚÚ, 0
-
ÚÚ1 2
matrixWidth
ÚÚ3 >
-
ÚÚ? @
$num
ÚÚA C
,
ÚÚC D
yPos
ÚÚE I
,
ÚÚI J
matrixWidth
ÚÚK V
,
ÚÚV W$
k_DefaultElementHeight
ÚÚX n
)
ÚÚn o
;
ÚÚo p/
!RuleOverrideDefaultInspectorOnGUI
ÙÙ -
(
ÙÙ- .
inspectorRect
ÙÙ. ;
,
ÙÙ; <
originalRule
ÙÙ= I
)
ÙÙI J
;
ÙÙJ K
if
ıı 
(
ıı 
overrideTile
ıı 
.
ıı 
m_OverrideDefault
ıı .
.
ıı. /
	m_Enabled
ıı/ 8
)
ıı8 9
ruleTileEditor
ˆˆ 
.
ˆˆ 
SpriteOnGUI
ˆˆ *
(
ˆˆ* +

spriteRect
ˆˆ+ 5
,
ˆˆ5 6
overrideTile
ˆˆ7 C
.
ˆˆC D
m_OverrideDefault
ˆˆD U
.
ˆˆU V
m_TilingRule
ˆˆV b
)
ˆˆb c
;
ˆˆc d
}
˜˜ 	
private
¯¯ 
void
¯¯ /
!RuleOverrideDefaultInspectorOnGUI
¯¯ 6
(
¯¯6 7
Rect
¯¯7 ;
rect
¯¯< @
,
¯¯@ A
RuleTile
¯¯B J
.
¯¯J K

TilingRule
¯¯K U
overrideRule
¯¯V b
)
¯¯b c
{
˘˘ 	
float
˙˙ 
y
˙˙ 
=
˙˙ 
rect
˙˙ 
.
˙˙ 
yMin
˙˙ 
;
˙˙  
	EditorGUI
˚˚ 
.
˚˚ 
BeginChangeCheck
˚˚ &
(
˚˚& '
)
˚˚' (
;
˚˚( )
GUI
˝˝ 
.
˝˝ 
Label
˝˝ 
(
˝˝ 
new
˝˝ 
Rect
˝˝ 
(
˝˝ 
rect
˝˝ #
.
˝˝# $
xMin
˝˝$ (
,
˝˝( )
y
˝˝* +
,
˝˝+ ,
k_LabelWidth
˝˝- 9
,
˝˝9 : 
k_SingleLineHeight
˝˝; M
)
˝˝M N
,
˝˝N O
$str
˝˝P Y
)
˝˝Y Z
;
˝˝Z [
bool
˛˛ 
enabled
˛˛ 
=
˛˛ 
	EditorGUI
˛˛ $
.
˛˛$ %
Toggle
˛˛% +
(
˛˛+ ,
new
˛˛, /
Rect
˛˛0 4
(
˛˛4 5
rect
˛˛5 9
.
˛˛9 :
xMin
˛˛: >
+
˛˛? @
k_LabelWidth
˛˛A M
,
˛˛M N
y
˛˛O P
,
˛˛P Q
rect
˛˛R V
.
˛˛V W
width
˛˛W \
-
˛˛] ^
k_LabelWidth
˛˛_ k
,
˛˛k l 
k_SingleLineHeight
˛˛m 
)˛˛ Ä
,˛˛Ä Å
overrideTile˛˛Ç é
.˛˛é è!
m_OverrideDefault˛˛è †
.˛˛† °
	m_Enabled˛˛° ™
)˛˛™ ´
;˛˛´ ¨
y
ˇˇ 
+=
ˇˇ  
k_SingleLineHeight
ˇˇ #
;
ˇˇ# $
if
ÅÅ 
(
ÅÅ 
	EditorGUI
ÅÅ 
.
ÅÅ 
EndChangeCheck
ÅÅ (
(
ÅÅ( )
)
ÅÅ) *
)
ÅÅ* +
{
ÇÇ 
overrideTile
ÉÉ 
.
ÉÉ 
m_OverrideDefault
ÉÉ .
.
ÉÉ. /
	m_Enabled
ÉÉ/ 8
=
ÉÉ9 :
enabled
ÉÉ; B
;
ÉÉB C
overrideTile
ÑÑ 
.
ÑÑ 
m_OverrideDefault
ÑÑ .
.
ÑÑ. /
m_TilingRule
ÑÑ/ ;
=
ÑÑ< =
overrideTile
ÑÑ> J
.
ÑÑJ K
m_OriginalDefault
ÑÑK \
;
ÑÑ\ ]
}
ÖÖ 
if
áá 
(
áá 
!
áá 
enabled
áá 
)
áá 
return
àà 
;
àà 
GUI
ää 
.
ää 
Label
ää 
(
ää 
new
ää 
Rect
ää 
(
ää 
rect
ää #
.
ää# $
xMin
ää$ (
,
ää( )
y
ää* +
,
ää+ ,
k_LabelWidth
ää- 9
,
ää9 : 
k_SingleLineHeight
ää; M
)
ääM N
,
ääN O
$str
ääP Z
)
ääZ [
;
ää[ \
overrideRule
ãã 
.
ãã 
m_ColliderType
ãã '
=
ãã( )
(
ãã* +
Tile
ãã+ /
.
ãã/ 0
ColliderType
ãã0 <
)
ãã< =
	EditorGUI
ãã= F
.
ããF G
	EnumPopup
ããG P
(
ããP Q
new
ããQ T
Rect
ããU Y
(
ããY Z
rect
ããZ ^
.
ãã^ _
xMin
ãã_ c
+
ããd e
k_LabelWidth
ããf r
,
ããr s
y
ããt u
,
ããu v
rect
ããw {
.
ãã{ |
widthãã| Å
-ããÇ É
k_LabelWidthããÑ ê
,ããê ë"
k_SingleLineHeightããí §
)ãã§ •
,ãã• ¶
overrideRuleããß ≥
.ãã≥ ¥
m_ColliderTypeãã¥ ¬
)ãã¬ √
;ãã√ ƒ
y
åå 
+=
åå  
k_SingleLineHeight
åå #
;
åå# $
}
çç 	
private
éé 
void
éé 
DrawRuleHeader
éé #
(
éé# $
Rect
éé$ (
rect
éé) -
)
éé- .
{
èè 	
float
êê 
matrixWidth
êê 
=
êê $
k_DefaultElementHeight
êê  6
;
êê6 7
float
íí 
xMax
íí 
=
íí 
rect
íí 
.
íí 
xMax
íí "
;
íí" #
rect
ìì 
.
ìì 
xMax
ìì 
=
ìì 
rect
ìì 
.
ìì 
xMax
ìì !
/
ìì" #
$num
ìì$ (
+
ìì) *
matrixWidth
ìì+ 6
-
ìì7 8
$num
ìì9 <
;
ìì< =
GUI
îî 
.
îî 
Label
îî 
(
îî 
rect
îî 
,
îî 
$str
îî &
,
îî& '
EditorStyles
îî( 4
.
îî4 5
label
îî5 :
)
îî: ;
;
îî; <
rect
ïï 
.
ïï 
xMin
ïï 
=
ïï 
rect
ïï 
.
ïï 
xMax
ïï !
;
ïï! "
rect
ññ 
.
ññ 
xMax
ññ 
=
ññ 
xMax
ññ 
;
ññ 
GUI
óó 
.
óó 
Label
óó 
(
óó 
rect
óó 
,
óó 
$str
óó &
,
óó& '
EditorStyles
óó( 4
.
óó4 5
label
óó5 :
)
óó: ;
;
óó; <
}
òò 	
private
ôô 
float
ôô "
GetRuleElementHeight
ôô *
(
ôô* +
int
ôô+ .
index
ôô/ 4
)
ôô4 5
{
öö 	
if
õõ 
(
õõ 
index
õõ 
!=
õõ 
overrideTile
õõ %
.
õõ% &
m_Tile
õõ& ,
.
õõ, -
m_TilingRules
õõ- :
.
õõ: ;
Count
õõ; @
)
õõ@ A
{
úú 
var
ùù 
overrideRule
ùù  
=
ùù! "
overrideTile
ùù# /
[
ùù/ 0
overrideTile
ùù0 <
.
ùù< =
m_Tile
ùù= C
.
ùùC D
m_TilingRules
ùùD Q
[
ùùQ R
index
ùùR W
]
ùùW X
]
ùùX Y
;
ùùY Z
float
ûû 
overrideHeight
ûû $
=
ûû% &"
GetRuleElementHeight
ûû' ;
(
ûû; <
overrideRule
ûû< H
)
ûûH I
;
ûûI J
float
üü 
originalHeight
üü $
=
üü% &"
GetRuleElementHeight
üü' ;
(
üü; <
overrideTile
üü< H
.
üüH I
m_Tile
üüI O
.
üüO P
m_TilingRules
üüP ]
[
üü] ^
index
üü^ c
]
üüc d
)
üüd e
;
üüe f
return
†† 
Mathf
†† 
.
†† 
Max
††  
(
††  !
overrideHeight
††! /
,
††/ 0
originalHeight
††1 ?
)
††? @
;
††@ A
}
°° 
else
¢¢ 
{
££ 
var
§§ 
overrideRule
§§  
=
§§! "
overrideTile
§§# /
.
§§/ 0
m_OverrideDefault
§§0 A
.
§§A B
	m_Enabled
§§B K
?
§§L M
overrideTile
§§N Z
.
§§Z [
m_OverrideDefault
§§[ l
.
§§l m
m_TilingRule
§§m y
:
§§z {
null§§| Ä
;§§Ä Å
float
•• 
overrideHeight
•• $
=
••% &"
GetRuleElementHeight
••' ;
(
••; <
overrideRule
••< H
)
••H I
;
••I J
float
¶¶ 
originalHeight
¶¶ $
=
¶¶% &"
GetRuleElementHeight
¶¶' ;
(
¶¶; <
new
¶¶< ?
RuleTile
¶¶@ H
.
¶¶H I

TilingRule
¶¶I S
(
¶¶S T
)
¶¶T U
)
¶¶U V
;
¶¶V W
return
ßß 
Mathf
ßß 
.
ßß 
Max
ßß  
(
ßß  !
overrideHeight
ßß! /
,
ßß/ 0
originalHeight
ßß1 ?
)
ßß? @
;
ßß@ A
}
®® 
}
©© 	
private
™™ 
float
™™ "
GetRuleElementHeight
™™ *
(
™™* +
RuleTile
™™+ 3
.
™™3 4

TilingRule
™™4 >
rule
™™? C
)
™™C D
{
´´ 	
float
¨¨ 
height
¨¨ 
=
¨¨ $
k_DefaultElementHeight
¨¨ 1
+
¨¨2 3#
k_PaddingBetweenRules
¨¨4 I
;
¨¨I J
if
≠≠ 
(
≠≠ 
rule
≠≠ 
!=
≠≠ 
null
≠≠ 
)
≠≠ 
{
ÆÆ 
switch
ØØ 
(
ØØ 
rule
ØØ 
.
ØØ 
m_Output
ØØ %
)
ØØ% &
{
∞∞ 
case
±± 
RuleTile
±± !
.
±±! "

TilingRule
±±" ,
.
±±, -
OutputSprite
±±- 9
.
±±9 :
Random
±±: @
:
±±@ A
height
≤≤ 
=
≤≤  $
k_DefaultElementHeight
≤≤! 7
+
≤≤8 9 
k_SingleLineHeight
≤≤: L
*
≤≤M N
(
≤≤O P
rule
≤≤P T
.
≤≤T U
	m_Sprites
≤≤U ^
.
≤≤^ _
Length
≤≤_ e
+
≤≤f g
$num
≤≤h i
)
≤≤i j
+
≤≤k l$
k_PaddingBetweenRules≤≤m Ç
;≤≤Ç É
break
≥≥ 
;
≥≥ 
case
¥¥ 
RuleTile
¥¥ !
.
¥¥! "

TilingRule
¥¥" ,
.
¥¥, -
OutputSprite
¥¥- 9
.
¥¥9 :
	Animation
¥¥: C
:
¥¥C D
height
µµ 
=
µµ  $
k_DefaultElementHeight
µµ! 7
+
µµ8 9 
k_SingleLineHeight
µµ: L
*
µµM N
(
µµO P
rule
µµP T
.
µµT U
	m_Sprites
µµU ^
.
µµ^ _
Length
µµ_ e
+
µµf g
$num
µµh i
)
µµi j
+
µµk l$
k_PaddingBetweenRulesµµm Ç
;µµÇ É
break
∂∂ 
;
∂∂ 
}
∑∑ 
}
∏∏ 
return
ππ 
height
ππ 
;
ππ 
}
∫∫ 	
}
ªª 
}ºº æ
ùC:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Editor\Tiles\RuleTile\CustomRuleTileMenu.cs
	namespace 	
UnityEditor
 
{ 
static 

class 
CustomRuleTileMenu #
{ 
[ 	
MenuItem	 
( 
$str 9
,9 :
false; @
,@ A
$numB D
)D E
]E F
static 
void  
CreateCustomRuleTile (
(( )
)) *
{ 	
ProjectWindowUtil 
. -
!CreateScriptAssetFromTemplateFile ?
(? @
$str	@ •
,
• ¶
$str
ß Ω
)
Ω æ
;
æ ø
}		 	
}

 
} ‹
ôC:\Users\Davis\Desktop\Facultad\5to Periodo\Tecnologias\Pacman\ClientePacman\Packages\com.unity.2d.tilemap.extras\Editor\Tiles\RuleTile\RuleTileEditor.cs
	namespace

 	
UnityEditor


 
{ 
[ 
CustomEditor 
( 
typeof 
( 
RuleTile !
)! "
," #
true$ (
)( )
]) *
[ "
CanEditMultipleObjects 
] 
public 

class 
RuleTileEditor 
:  !
Editor" (
{ 
private 
const 
string 
s_XIconString *
=+ ,
$str	- ˚
;
˚ ¸
private 
const 
string 
s_Arrow0 %
=& '
$str	( ∂
;
∂ ∑
private 
const 
string 
s_Arrow1 %
=& '
$str	( ˆ
;
ˆ ˜
private 
const 
string 
s_Arrow2 %
=& '
$str	( ⁄
;
⁄ €
private 
const 
string 
s_Arrow3 %
=& '
$str	( Ü
;
Ü á
private 
const 
string 
s_Arrow5 %
=& '
$str	( ˆ
;
ˆ ˜
private 
const 
string 
s_Arrow6 %
=& '
$str	( ∂
;
∂ ∑
private 
const 
string 
s_Arrow7 %
=& '
$str	( ÷
;
÷ ◊
private 
const 
string 
s_Arrow8 %
=& '
$str	( ∂
;
∂ ∑
private 
const 
string 
	s_MirrorX &
=' (
$str	) Î
;
Î Ï
private 
const 
string 
	s_MirrorY &
=' (
$str	) Ô
;
Ô 
private 
const 
string 

s_MirrorXY '
=( )
$str	* ‡
;
‡ ·
private 
const 
string 
	s_Rotated &
=' (
$str	) ˜
;
˜ ¯
private 
const 
string 
s_Fixed $
=% &
$str	' ù
;
ù û
private 
static 
	Texture2D  
[  !
]! "
s_Arrows# +
;+ ,
public   
static   
	Texture2D   
[    
]    !
arrows  " (
{!! 	
get"" 
{## 
if$$ 
($$ 
s_Arrows$$ 
==$$ 
null$$  $
)$$$ %
{%% 
s_Arrows&& 
=&& 
new&& "
	Texture2D&&# ,
[&&, -
$num&&- /
]&&/ 0
;&&0 1
s_Arrows'' 
['' 
$num'' 
]'' 
=''  !
Base64ToTexture''" 1
(''1 2
s_Arrow0''2 :
)'': ;
;''; <
s_Arrows(( 
[(( 
$num(( 
](( 
=((  !
Base64ToTexture((" 1
(((1 2
s_Arrow1((2 :
)((: ;
;((; <
s_Arrows)) 
[)) 
$num)) 
])) 
=))  !
Base64ToTexture))" 1
())1 2
s_Arrow2))2 :
))): ;
;)); <
s_Arrows** 
[** 
$num** 
]** 
=**  !
Base64ToTexture**" 1
(**1 2
s_Arrow3**2 :
)**: ;
;**; <
s_Arrows++ 
[++ 
$num++ 
]++ 
=++  !
Base64ToTexture++" 1
(++1 2
s_Arrow5++2 :
)++: ;
;++; <
s_Arrows,, 
[,, 
$num,, 
],, 
=,,  !
Base64ToTexture,," 1
(,,1 2
s_Arrow6,,2 :
),,: ;
;,,; <
s_Arrows-- 
[-- 
$num-- 
]-- 
=--  !
Base64ToTexture--" 1
(--1 2
s_Arrow7--2 :
)--: ;
;--; <
s_Arrows.. 
[.. 
$num.. 
].. 
=..  !
Base64ToTexture.." 1
(..1 2
s_Arrow8..2 :
)..: ;
;..; <
s_Arrows// 
[// 
$num// 
]// 
=//  !
Base64ToTexture//" 1
(//1 2
s_XIconString//2 ?
)//? @
;//@ A
}00 
return11 
s_Arrows11 
;11  
}22 
}33 	
private55 
static55 
	Texture2D55  
[55  !
]55! "
s_AutoTransforms55# 3
;553 4
public66 
static66 
	Texture2D66 
[66  
]66  !
autoTransforms66" 0
{77 	
get88 
{99 
if:: 
(:: 
s_AutoTransforms:: $
==::% '
null::( ,
)::, -
{;; 
s_AutoTransforms<< $
=<<% &
new<<' *
	Texture2D<<+ 4
[<<4 5
$num<<5 6
]<<6 7
;<<7 8
s_AutoTransforms== $
[==$ %
$num==% &
]==& '
===( )
Base64ToTexture==* 9
(==9 :
	s_Rotated==: C
)==C D
;==D E
s_AutoTransforms>> $
[>>$ %
$num>>% &
]>>& '
=>>( )
Base64ToTexture>>* 9
(>>9 :
	s_MirrorX>>: C
)>>C D
;>>D E
s_AutoTransforms?? $
[??$ %
$num??% &
]??& '
=??( )
Base64ToTexture??* 9
(??9 :
	s_MirrorY??: C
)??C D
;??D E
s_AutoTransforms@@ $
[@@$ %
$num@@% &
]@@& '
=@@( )
Base64ToTexture@@* 9
(@@9 :
s_Fixed@@: A
)@@A B
;@@B C
s_AutoTransformsAA $
[AA$ %
$numAA% &
]AA& '
=AA( )
Base64ToTextureAA* 9
(AA9 :

s_MirrorXYAA: D
)AAD E
;AAE F
}BB 
returnCC 
s_AutoTransformsCC '
;CC' (
}DD 
}EE 	
publicGG 
RuleTileGG 
tileGG 
{GG 
getGG "
{GG# $
returnGG% +
(GG, -
targetGG- 3
asGG4 6
RuleTileGG7 ?
)GG? @
;GG@ A
}GGB C
}GGD E
privateHH 
ReorderableListHH 
m_ReorderableListHH  1
;HH1 2
publicII 
boolII 
extendNeighborII "
;II" #
publicKK 
constKK 
floatKK "
k_DefaultElementHeightKK 1
=KK2 3
$numKK4 7
;KK7 8
publicLL 
constLL 
floatLL !
k_PaddingBetweenRulesLL 0
=LL1 2
$numLL3 6
;LL6 7
publicMM 
constMM 
floatMM 
k_SingleLineHeightMM -
=MM. /
$numMM0 3
;MM3 4
publicNN 
constNN 
floatNN 
k_LabelWidthNN '
=NN( )
$numNN* -
;NN- .
publicPP 
voidPP 
OnEnablePP 
(PP 
)PP 
{QQ 	
m_ReorderableListRR 
=RR 
newRR  #
ReorderableListRR$ 3
(RR3 4
tileRR4 8
.RR8 9
m_TilingRulesRR9 F
,RRF G
typeofRRH N
(RRN O
RuleTileRRO W
.RRW X

TilingRuleRRX b
)RRb c
,RRc d
trueRRe i
,RRi j
trueRRk o
,RRo p
trueRRq u
,RRu v
trueRRw {
)RR{ |
;RR| }
m_ReorderableListSS 
.SS 
drawHeaderCallbackSS 0
=SS1 2
OnDrawHeaderSS3 ?
;SS? @
m_ReorderableListTT 
.TT 
drawElementCallbackTT 1
=TT2 3
OnDrawElementTT4 A
;TTA B
m_ReorderableListUU 
.UU !
elementHeightCallbackUU 3
=UU4 5
GetElementHeightUU6 F
;UUF G
m_ReorderableListVV 
.VV 
onChangedCallbackVV /
=VV0 1
ListUpdatedVV2 =
;VV= >
m_ReorderableListWW 
.WW 
onAddCallbackWW +
=WW, -
OnAddElementWW. :
;WW: ;
}XX 	
publicZZ 
virtualZZ 
	BoundsIntZZ  
GetRuleGUIBoundsZZ! 1
(ZZ1 2
	BoundsIntZZ2 ;
boundsZZ< B
,ZZB C
RuleTileZZD L
.ZZL M

TilingRuleZZM W
ruleZZX \
)ZZ\ ]
{[[ 	
if\\ 
(\\ 
extendNeighbor\\ 
)\\ 
{]] 
bounds^^ 
.^^ 
xMin^^ 
--^^ 
;^^ 
bounds__ 
.__ 
yMin__ 
--__ 
;__ 
bounds`` 
.`` 
xMax`` 
++`` 
;`` 
boundsaa 
.aa 
yMaxaa 
++aa 
;aa 
}bb 
boundscc 
.cc 
xMincc 
=cc 
Mathfcc 
.cc  
Mincc  #
(cc# $
boundscc$ *
.cc* +
xMincc+ /
,cc/ 0
-cc1 2
$numcc2 3
)cc3 4
;cc4 5
boundsdd 
.dd 
yMindd 
=dd 
Mathfdd 
.dd  
Mindd  #
(dd# $
boundsdd$ *
.dd* +
yMindd+ /
,dd/ 0
-dd1 2
$numdd2 3
)dd3 4
;dd4 5
boundsee 
.ee 
xMaxee 
=ee 
Mathfee 
.ee  
Maxee  #
(ee# $
boundsee$ *
.ee* +
xMaxee+ /
,ee/ 0
$numee1 2
)ee2 3
;ee3 4
boundsff 
.ff 
yMaxff 
=ff 
Mathfff 
.ff  
Maxff  #
(ff# $
boundsff$ *
.ff* +
yMaxff+ /
,ff/ 0
$numff1 2
)ff2 3
;ff3 4
returngg 
boundsgg 
;gg 
}hh 	
privatejj 
voidjj 
ListUpdatedjj  
(jj  !
ReorderableListjj! 0
listjj1 5
)jj5 6
{kk 	
SaveTilell 
(ll 
)ll 
;ll 
}mm 	
privateoo 
floatoo 
GetElementHeightoo &
(oo& '
intoo' *
indexoo+ 0
)oo0 1
{pp 	
RuleTileqq 
.qq 

TilingRuleqq 
ruleqq  $
=qq% &
tileqq' +
.qq+ ,
m_TilingRulesqq, 9
[qq9 :
indexqq: ?
]qq? @
;qq@ A
	BoundsIntrr 
boundsrr 
=rr 
GetRuleGUIBoundsrr /
(rr/ 0
rulerr0 4
.rr4 5
	GetBoundsrr5 >
(rr> ?
)rr? @
,rr@ A
rulerrB F
)rrF G
;rrG H
floattt 
inspectorHeighttt !
=tt" #"
k_DefaultElementHeighttt$ :
+tt; <!
k_PaddingBetweenRulestt= R
;ttR S
floatuu 
matrixHeightuu 
=uu  
GetMatrixSizeuu! .
(uu. /
boundsuu/ 5
)uu5 6
.uu6 7
yuu7 8
+uu9 :
$numuu; >
;uu> ?
ifww 
(ww 
indexww 
<ww 
tileww 
.ww 
m_TilingRulesww *
.ww* +
Countww+ 0
)ww0 1
{xx 
switchyy 
(yy 
tileyy 
.yy 
m_TilingRulesyy *
[yy* +
indexyy+ 0
]yy0 1
.yy1 2
m_Outputyy2 :
)yy: ;
{zz 
case{{ 
RuleTile{{ !
.{{! "

TilingRule{{" ,
.{{, -
OutputSprite{{- 9
.{{9 :
Random{{: @
:{{@ A
inspectorHeight|| '
=||( )"
k_DefaultElementHeight||* @
+||A B
k_SingleLineHeight||C U
*||V W
(||X Y
tile||Y ]
.||] ^
m_TilingRules||^ k
[||k l
index||l q
]||q r
.||r s
	m_Sprites||s |
.||| }
Length	||} É
+
||Ñ Ö
$num
||Ü á
)
||á à
+
||â ä#
k_PaddingBetweenRules
||ã †
;
||† °
break}} 
;}} 
case~~ 
RuleTile~~ !
.~~! "

TilingRule~~" ,
.~~, -
OutputSprite~~- 9
.~~9 :
	Animation~~: C
:~~C D
inspectorHeight '
=( )"
k_DefaultElementHeight* @
+A B
k_SingleLineHeightC U
*V W
(X Y
tileY ]
.] ^
m_TilingRules^ k
[k l
indexl q
]q r
.r s
	m_Spritess |
.| }
Length	} É
+
Ñ Ö
$num
Ü á
)
á à
+
â ä#
k_PaddingBetweenRules
ã †
;
† °
break
ÄÄ 
;
ÄÄ 
}
ÅÅ 
}
ÇÇ 
return
ÑÑ 
Mathf
ÑÑ 
.
ÑÑ 
Max
ÑÑ 
(
ÑÑ 
inspectorHeight
ÑÑ ,
,
ÑÑ, -
matrixHeight
ÑÑ. :
)
ÑÑ: ;
;
ÑÑ; <
}
ÖÖ 	
public
áá 
virtual
áá 
Vector2
áá 
GetMatrixSize
áá ,
(
áá, -
	BoundsInt
áá- 6
bounds
áá7 =
)
áá= >
{
àà 	
return
ââ 
new
ââ 
Vector2
ââ 
(
ââ 
bounds
ââ %
.
ââ% &
size
ââ& *
.
ââ* +
x
ââ+ ,
*
ââ- . 
k_SingleLineHeight
ââ/ A
,
ââA B
bounds
ââC I
.
ââI J
size
ââJ N
.
ââN O
y
ââO P
*
ââQ R 
k_SingleLineHeight
ââS e
)
ââe f
;
ââf g
}
ää 	
	protected
åå 
virtual
åå 
void
åå 
OnDrawElement
åå ,
(
åå, -
Rect
åå- 1
rect
åå2 6
,
åå6 7
int
åå8 ;
index
åå< A
,
ååA B
bool
ååC G
isactive
ååH P
,
ååP Q
bool
ååR V
	isfocused
ååW `
)
åå` a
{
çç 	
RuleTile
éé 
.
éé 

TilingRule
éé 
rule
éé  $
=
éé% &
tile
éé' +
.
éé+ ,
m_TilingRules
éé, 9
[
éé9 :
index
éé: ?
]
éé? @
;
éé@ A
	BoundsInt
èè 
bounds
èè 
=
èè 
GetRuleGUIBounds
èè /
(
èè/ 0
rule
èè0 4
.
èè4 5
	GetBounds
èè5 >
(
èè> ?
)
èè? @
,
èè@ A
rule
èèB F
)
èèF G
;
èèG H
float
ëë 
yPos
ëë 
=
ëë 
rect
ëë 
.
ëë 
yMin
ëë "
+
ëë# $
$num
ëë% '
;
ëë' (
float
íí 
height
íí 
=
íí 
rect
íí 
.
íí  
height
íí  &
-
íí' (#
k_PaddingBetweenRules
íí) >
;
íí> ?
Vector2
ìì 

matrixSize
ìì 
=
ìì  
GetMatrixSize
ìì! .
(
ìì. /
bounds
ìì/ 5
)
ìì5 6
;
ìì6 7
Rect
ïï 

spriteRect
ïï 
=
ïï 
new
ïï !
Rect
ïï" &
(
ïï& '
rect
ïï' +
.
ïï+ ,
xMax
ïï, 0
-
ïï1 2$
k_DefaultElementHeight
ïï3 I
-
ïïJ K
$num
ïïL N
,
ïïN O
yPos
ïïP T
,
ïïT U$
k_DefaultElementHeight
ïïV l
,
ïïl m%
k_DefaultElementHeightïïn Ñ
)ïïÑ Ö
;ïïÖ Ü
Rect
ññ 

matrixRect
ññ 
=
ññ 
new
ññ !
Rect
ññ" &
(
ññ& '
rect
ññ' +
.
ññ+ ,
xMax
ññ, 0
-
ññ1 2

matrixSize
ññ3 =
.
ññ= >
x
ññ> ?
-
ññ@ A

spriteRect
ññB L
.
ññL M
width
ññM R
-
ññS T
$num
ññU X
,
ññX Y
yPos
ññZ ^
,
ññ^ _

matrixSize
ññ` j
.
ññj k
x
ññk l
,
ññl m

matrixSize
ññn x
.
ññx y
y
ññy z
)
ññz {
;
ññ{ |
Rect
óó 
inspectorRect
óó 
=
óó  
new
óó! $
Rect
óó% )
(
óó) *
rect
óó* .
.
óó. /
xMin
óó/ 3
,
óó3 4
yPos
óó5 9
,
óó9 :
rect
óó; ?
.
óó? @
width
óó@ E
-
óóF G

matrixSize
óóH R
.
óóR S
x
óóS T
-
óóU V

spriteRect
óóW a
.
óóa b
width
óób g
-
óóh i
$num
óój m
,
óóm n
height
óóo u
)
óóu v
;
óóv w
	EditorGUI
ôô 
.
ôô 
BeginChangeCheck
ôô &
(
ôô& '
)
ôô' (
;
ôô( ) 
RuleInspectorOnGUI
öö 
(
öö 
inspectorRect
öö ,
,
öö, -
rule
öö. 2
)
öö2 3
;
öö3 4
RuleMatrixOnGUI
õõ 
(
õõ 
tile
õõ  
,
õõ  !

matrixRect
õõ" ,
,
õõ, -
bounds
õõ. 4
,
õõ4 5
rule
õõ6 :
)
õõ: ;
;
õõ; <
SpriteOnGUI
úú 
(
úú 

spriteRect
úú "
,
úú" #
rule
úú$ (
)
úú( )
;
úú) *
if
ùù 
(
ùù 
	EditorGUI
ùù 
.
ùù 
EndChangeCheck
ùù (
(
ùù( )
)
ùù) *
)
ùù* +
SaveTile
ûû 
(
ûû 
)
ûû 
;
ûû 
}
üü 	
private
°° 
void
°° 
OnAddElement
°° !
(
°°! "
ReorderableList
°°" 1
list
°°2 6
)
°°6 7
{
¢¢ 	
RuleTile
££ 
.
££ 

TilingRule
££ 
rule
££  $
=
££% &
new
££' *
RuleTile
££+ 3
.
££3 4

TilingRule
££4 >
(
££> ?
)
££? @
;
££@ A
rule
§§ 
.
§§ 
m_Output
§§ 
=
§§ 
RuleTile
§§ $
.
§§$ %

TilingRule
§§% /
.
§§/ 0
OutputSprite
§§0 <
.
§§< =
Single
§§= C
;
§§C D
rule
•• 
.
•• 
	m_Sprites
•• 
[
•• 
$num
•• 
]
•• 
=
•• 
tile
••  $
.
••$ %
m_DefaultSprite
••% 4
;
••4 5
rule
¶¶ 
.
¶¶ 
m_GameObject
¶¶ 
=
¶¶ 
tile
¶¶  $
.
¶¶$ %!
m_DefaultGameObject
¶¶% 8
;
¶¶8 9
rule
ßß 
.
ßß 
m_ColliderType
ßß 
=
ßß  !
tile
ßß" &
.
ßß& '#
m_DefaultColliderType
ßß' <
;
ßß< =
tile
®® 
.
®® 
m_TilingRules
®® 
.
®® 
Add
®® "
(
®®" #
rule
®®# '
)
®®' (
;
®®( )
}
©© 	
public
´´ 
void
´´ 
SaveTile
´´ 
(
´´ 
)
´´ 
{
¨¨ 	
EditorUtility
≠≠ 
.
≠≠ 
SetDirty
≠≠ "
(
≠≠" #
target
≠≠# )
)
≠≠) *
;
≠≠* +
	SceneView
ÆÆ 
.
ÆÆ 

RepaintAll
ÆÆ  
(
ÆÆ  !
)
ÆÆ! "
;
ÆÆ" #!
UpdateOverrideTiles
∞∞ 
(
∞∞  
)
∞∞  !
;
∞∞! "
}
±± 	
private
≥≥ 
void
≥≥ !
UpdateOverrideTiles
≥≥ (
(
≥≥( )
)
≥≥) *
{
¥¥ 	
string
µµ 
[
µµ 
]
µµ 
overrideTileGuids
µµ &
=
µµ' (
AssetDatabase
µµ) 6
.
µµ6 7

FindAssets
µµ7 A
(
µµA B
$str
µµB V
)
µµV W
;
µµW X
foreach
∂∂ 
(
∂∂ 
string
∂∂ 
overrideTileGuid
∂∂ ,
in
∂∂- /
overrideTileGuids
∂∂0 A
)
∂∂A B
{
∑∑ 
string
∏∏ 
overrideTilePath
∏∏ '
=
∏∏( )
AssetDatabase
∏∏* 7
.
∏∏7 8
GUIDToAssetPath
∏∏8 G
(
∏∏G H
overrideTileGuid
∏∏H X
)
∏∏X Y
;
∏∏Y Z
RuleOverrideTile
ππ  
overrideTile
ππ! -
=
ππ. /
AssetDatabase
ππ0 =
.
ππ= >
LoadAssetAtPath
ππ> M
<
ππM N
RuleOverrideTile
ππN ^
>
ππ^ _
(
ππ_ `
overrideTilePath
ππ` p
)
ππp q
;
ππq r
if
∫∫ 
(
∫∫ 
overrideTile
∫∫  
.
∫∫  !
m_Tile
∫∫! '
==
∫∫( *
target
∫∫+ 1
)
∫∫1 2
overrideTile
ªª  
.
ªª  !
Override
ªª! )
(
ªª) *
)
ªª* +
;
ªª+ ,
}
ºº 
}
ΩΩ 	
private
øø 
void
øø 
OnDrawHeader
øø !
(
øø! "
Rect
øø" &
rect
øø' +
)
øø+ ,
{
¿¿ 	
GUI
¡¡ 
.
¡¡ 
Label
¡¡ 
(
¡¡ 
rect
¡¡ 
,
¡¡ 
$str
¡¡ *
)
¡¡* +
;
¡¡+ ,
Rect
√√ 

toggleRect
√√ 
=
√√ 
new
√√ !
Rect
√√" &
(
√√& '
rect
√√' +
.
√√+ ,
xMax
√√, 0
-
√√1 2
rect
√√3 7
.
√√7 8
height
√√8 >
,
√√> ?
rect
√√@ D
.
√√D E
y
√√E F
,
√√F G
rect
√√H L
.
√√L M
height
√√M S
,
√√S T
rect
√√U Y
.
√√Y Z
height
√√Z `
)
√√` a
;
√√a b
Rect
ƒƒ 
toggleLabelRect
ƒƒ  
=
ƒƒ! "
new
ƒƒ# &
Rect
ƒƒ' +
(
ƒƒ+ ,
rect
ƒƒ, 0
.
ƒƒ0 1
x
ƒƒ1 2
,
ƒƒ2 3
rect
ƒƒ4 8
.
ƒƒ8 9
y
ƒƒ9 :
,
ƒƒ: ;
rect
ƒƒ< @
.
ƒƒ@ A
width
ƒƒA F
-
ƒƒG H

toggleRect
ƒƒI S
.
ƒƒS T
width
ƒƒT Y
-
ƒƒZ [
$num
ƒƒ\ ^
,
ƒƒ^ _
rect
ƒƒ` d
.
ƒƒd e
height
ƒƒe k
)
ƒƒk l
;
ƒƒl m
extendNeighbor
∆∆ 
=
∆∆ 
	EditorGUI
∆∆ &
.
∆∆& '
Toggle
∆∆' -
(
∆∆- .

toggleRect
∆∆. 8
,
∆∆8 9
extendNeighbor
∆∆: H
)
∆∆H I
;
∆∆I J
	EditorGUI
«« 
.
«« 

LabelField
««  
(
««  !
toggleLabelRect
««! 0
,
««0 1
$str
««2 C
,
««C D
new
««E H
GUIStyle
««I Q
(
««Q R
)
««R S
{
»» 
	alignment
…… 
=
…… 

TextAnchor
…… &
.
……& '
MiddleRight
……' 2
,
……2 3
	fontStyle
   
=
   
	FontStyle
   %
.
  % &
Bold
  & *
,
  * +
fontSize
ÀÀ 
=
ÀÀ 
$num
ÀÀ 
,
ÀÀ 
}
ÃÃ 
)
ÃÃ 
;
ÃÃ 
}
ÕÕ 	
public
œœ 
override
œœ 
void
œœ 
OnInspectorGUI
œœ +
(
œœ+ ,
)
œœ, -
{
–– 	
	EditorGUI
—— 
.
—— 
BeginChangeCheck
—— &
(
——& '
)
——' (
;
——( )
tile
““ 
.
““ 
m_DefaultSprite
““  
=
““! "
EditorGUILayout
““# 2
.
““2 3
ObjectField
““3 >
(
““> ?
$str
““? O
,
““O P
tile
““Q U
.
““U V
m_DefaultSprite
““V e
,
““e f
typeof
““g m
(
““m n
Sprite
““n t
)
““t u
,
““u v
false
““w |
)
““| }
as““~ Ä
Sprite““Å á
;““á à
tile
”” 
.
”” !
m_DefaultGameObject
”” $
=
””% &
EditorGUILayout
””' 6
.
””6 7
ObjectField
””7 B
(
””B C
$str
””C X
,
””X Y
tile
””Z ^
.
””^ _!
m_DefaultGameObject
””_ r
,
””r s
typeof
””t z
(
””z {

GameObject””{ Ö
)””Ö Ü
,””Ü á
false””à ç
)””ç é
as””è ë

GameObject””í ú
;””ú ù
tile
‘‘ 
.
‘‘ #
m_DefaultColliderType
‘‘ &
=
‘‘' (
(
‘‘) *
Tile
‘‘* .
.
‘‘. /
ColliderType
‘‘/ ;
)
‘‘; <
EditorGUILayout
‘‘< K
.
‘‘K L
	EnumPopup
‘‘L U
(
‘‘U V
$str
‘‘V h
,
‘‘h i
tile
‘‘j n
.
‘‘n o$
m_DefaultColliderType‘‘o Ñ
)‘‘Ñ Ö
;‘‘Ö Ü
if
’’ 
(
’’ 
	EditorGUI
’’ 
.
’’ 
EndChangeCheck
’’ (
(
’’( )
)
’’) *
)
’’* +
EditorUtility
÷÷ 
.
÷÷ 
SetDirty
÷÷ &
(
÷÷& '
tile
÷÷' +
)
÷÷+ ,
;
÷÷, -
serializedObject
ÿÿ 
.
ÿÿ 
Update
ÿÿ #
(
ÿÿ# $
)
ÿÿ$ %
;
ÿÿ% &
	EditorGUI
ŸŸ 
.
ŸŸ 
BeginChangeCheck
ŸŸ &
(
ŸŸ& '
)
ŸŸ' (
;
ŸŸ( )
DrawCustomFields
⁄⁄ 
(
⁄⁄ 
tile
⁄⁄ !
,
⁄⁄! "
serializedObject
⁄⁄# 3
)
⁄⁄3 4
;
⁄⁄4 5
if
€€ 
(
€€ 
	EditorGUI
€€ 
.
€€ 
EndChangeCheck
€€ (
(
€€( )
)
€€) *
)
€€* +
serializedObject
‹‹  
.
‹‹  !%
ApplyModifiedProperties
‹‹! 8
(
‹‹8 9
)
‹‹9 :
;
‹‹: ;
EditorGUILayout
ﬁﬁ 
.
ﬁﬁ 
Space
ﬁﬁ !
(
ﬁﬁ! "
)
ﬁﬁ" #
;
ﬁﬁ# $
if
‡‡ 
(
‡‡ 
m_ReorderableList
‡‡ !
!=
‡‡" $
null
‡‡% )
)
‡‡) *
m_ReorderableList
·· !
.
··! "
DoLayoutList
··" .
(
··. /
)
··/ 0
;
··0 1
}
‚‚ 	
public
‰‰ 
static
‰‰ 
void
‰‰ 
DrawCustomFields
‰‰ +
(
‰‰+ ,
Object
‰‰, 2
tile
‰‰3 7
,
‰‰7 8
SerializedObject
‰‰9 I
serializedObject
‰‰J Z
)
‰‰Z [
{
ÂÂ 	
var
ÊÊ 
customFields
ÊÊ 
=
ÊÊ 
tile
ÊÊ #
.
ÊÊ# $
GetType
ÊÊ$ +
(
ÊÊ+ ,
)
ÊÊ, -
.
ÊÊ- .
	GetFields
ÊÊ. 7
(
ÊÊ7 8
)
ÊÊ8 9
.
ÁÁ 
Where
ÁÁ 
(
ÁÁ 
field
ÁÁ 
=>
ÁÁ 
typeof
ÁÁ  &
(
ÁÁ& '
RuleTile
ÁÁ' /
)
ÁÁ/ 0
.
ÁÁ0 1
GetField
ÁÁ1 9
(
ÁÁ9 :
field
ÁÁ: ?
.
ÁÁ? @
Name
ÁÁ@ D
)
ÁÁD E
==
ÁÁF H
null
ÁÁI M
)
ÁÁM N
.
ËË 
Where
ËË 
(
ËË 
field
ËË 
=>
ËË 
!
ËË  !
field
ËË! &
.
ËË& '
IsStatic
ËË' /
)
ËË/ 0
.
ÈÈ 
Where
ÈÈ 
(
ÈÈ 
field
ÈÈ 
=>
ÈÈ 
field
ÈÈ  %
.
ÈÈ% &
	FieldType
ÈÈ& /
.
ÈÈ/ 0
IsSerializable
ÈÈ0 >
)
ÈÈ> ?
;
ÈÈ? @
foreach
ÍÍ 
(
ÍÍ 
var
ÍÍ 
field
ÍÍ 
in
ÍÍ !
customFields
ÍÍ" .
)
ÍÍ. /
EditorGUILayout
ÎÎ 
.
ÎÎ  
PropertyField
ÎÎ  -
(
ÎÎ- .
serializedObject
ÎÎ. >
.
ÎÎ> ?
FindProperty
ÎÎ? K
(
ÎÎK L
field
ÎÎL Q
.
ÎÎQ R
Name
ÎÎR V
)
ÎÎV W
,
ÎÎW X
true
ÎÎY ]
)
ÎÎ] ^
;
ÎÎ^ _
}
ÏÏ 	
public
ÓÓ 
virtual
ÓÓ 
int
ÓÓ 
GetArrowIndex
ÓÓ (
(
ÓÓ( )

Vector3Int
ÓÓ) 3
position
ÓÓ4 <
)
ÓÓ< =
{
ÔÔ 	
if
 
(
 
Mathf
 
.
 
Abs
 
(
 
position
 "
.
" #
x
# $
)
$ %
==
& (
Mathf
) .
.
. /
Abs
/ 2
(
2 3
position
3 ;
.
; <
y
< =
)
= >
)
> ?
{
ÒÒ 
if
ÚÚ 
(
ÚÚ 
position
ÚÚ 
.
ÚÚ 
x
ÚÚ 
<
ÚÚ  
$num
ÚÚ! "
&&
ÚÚ# %
position
ÚÚ& .
.
ÚÚ. /
y
ÚÚ/ 0
>
ÚÚ1 2
$num
ÚÚ3 4
)
ÚÚ4 5
return
ÛÛ 
$num
ÛÛ 
;
ÛÛ 
else
ÙÙ 
if
ÙÙ 
(
ÙÙ 
position
ÙÙ !
.
ÙÙ! "
x
ÙÙ" #
>
ÙÙ$ %
$num
ÙÙ& '
&&
ÙÙ( *
position
ÙÙ+ 3
.
ÙÙ3 4
y
ÙÙ4 5
>
ÙÙ6 7
$num
ÙÙ8 9
)
ÙÙ9 :
return
ıı 
$num
ıı 
;
ıı 
else
ˆˆ 
if
ˆˆ 
(
ˆˆ 
position
ˆˆ !
.
ˆˆ! "
x
ˆˆ" #
<
ˆˆ$ %
$num
ˆˆ& '
&&
ˆˆ( *
position
ˆˆ+ 3
.
ˆˆ3 4
y
ˆˆ4 5
<
ˆˆ6 7
$num
ˆˆ8 9
)
ˆˆ9 :
return
˜˜ 
$num
˜˜ 
;
˜˜ 
else
¯¯ 
if
¯¯ 
(
¯¯ 
position
¯¯ !
.
¯¯! "
x
¯¯" #
>
¯¯$ %
$num
¯¯& '
&&
¯¯( *
position
¯¯+ 3
.
¯¯3 4
y
¯¯4 5
<
¯¯6 7
$num
¯¯8 9
)
¯¯9 :
return
˘˘ 
$num
˘˘ 
;
˘˘ 
}
˙˙ 
else
˚˚ 
if
˚˚ 
(
˚˚ 
Mathf
˚˚ 
.
˚˚ 
Abs
˚˚ 
(
˚˚ 
position
˚˚ '
.
˚˚' (
x
˚˚( )
)
˚˚) *
>
˚˚+ ,
Mathf
˚˚- 2
.
˚˚2 3
Abs
˚˚3 6
(
˚˚6 7
position
˚˚7 ?
.
˚˚? @
y
˚˚@ A
)
˚˚A B
)
˚˚B C
{
¸¸ 
if
˝˝ 
(
˝˝ 
position
˝˝ 
.
˝˝ 
x
˝˝ 
>
˝˝  
$num
˝˝! "
)
˝˝" #
return
˛˛ 
$num
˛˛ 
;
˛˛ 
else
ˇˇ 
return
ÄÄ 
$num
ÄÄ 
;
ÄÄ 
}
ÅÅ 
else
ÇÇ 
{
ÉÉ 
if
ÑÑ 
(
ÑÑ 
position
ÑÑ 
.
ÑÑ 
y
ÑÑ 
>
ÑÑ  
$num
ÑÑ! "
)
ÑÑ" #
return
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
else
ÜÜ 
return
áá 
$num
áá 
;
áá 
}
àà 
return
ââ 
-
ââ 
$num
ââ 
;
ââ 
}
ää 	
public
åå 
virtual
åå 
void
åå 
	RuleOnGUI
åå %
(
åå% &
Rect
åå& *
rect
åå+ /
,
åå/ 0

Vector3Int
åå1 ;
position
åå< D
,
ååD E
int
ååF I
neighbor
ååJ R
)
ååR S
{
çç 	
switch
éé 
(
éé 
neighbor
éé 
)
éé 
{
èè 
case
êê 
RuleTile
êê 
.
êê 

TilingRule
êê (
.
êê( )
Neighbor
êê) 1
.
êê1 2
This
êê2 6
:
êê6 7
GUI
ëë 
.
ëë 
DrawTexture
ëë #
(
ëë# $
rect
ëë$ (
,
ëë( )
arrows
ëë* 0
[
ëë0 1
GetArrowIndex
ëë1 >
(
ëë> ?
position
ëë? G
)
ëëG H
]
ëëH I
)
ëëI J
;
ëëJ K
break
íí 
;
íí 
case
ìì 
RuleTile
ìì 
.
ìì 

TilingRule
ìì (
.
ìì( )
Neighbor
ìì) 1
.
ìì1 2
NotThis
ìì2 9
:
ìì9 :
GUI
îî 
.
îî 
DrawTexture
îî #
(
îî# $
rect
îî$ (
,
îî( )
arrows
îî* 0
[
îî0 1
$num
îî1 2
]
îî2 3
)
îî3 4
;
îî4 5
break
ïï 
;
ïï 
default
ññ 
:
ññ 
var
óó 
style
óó 
=
óó 
new
óó  #
GUIStyle
óó$ ,
(
óó, -
)
óó- .
;
óó. /
style
òò 
.
òò 
	alignment
òò #
=
òò$ %

TextAnchor
òò& 0
.
òò0 1
MiddleCenter
òò1 =
;
òò= >
style
ôô 
.
ôô 
fontSize
ôô "
=
ôô# $
$num
ôô% '
;
ôô' (
GUI
öö 
.
öö 
Label
öö 
(
öö 
rect
öö "
,
öö" #
neighbor
öö$ ,
.
öö, -
ToString
öö- 5
(
öö5 6
)
öö6 7
,
öö7 8
style
öö9 >
)
öö> ?
;
öö? @
break
õõ 
;
õõ 
}
úú 
}
ùù 	
public
üü 
void
üü 
RuleTooltipOnGUI
üü $
(
üü$ %
Rect
üü% )
rect
üü* .
,
üü. /
int
üü0 3
neighbor
üü4 <
)
üü< =
{
†† 	
var
°° 
	allConsts
°° 
=
°° 
tile
°°  
.
°°  !
m_NeighborType
°°! /
.
°°/ 0
	GetFields
°°0 9
(
°°9 :
System
°°: @
.
°°@ A

Reflection
°°A K
.
°°K L
BindingFlags
°°L X
.
°°X Y
Public
°°Y _
|
°°` a
System
°°b h
.
°°h i

Reflection
°°i s
.
°°s t
BindingFlags°°t Ä
.°°Ä Å
Static°°Å á
|°°à â
System°°ä ê
.°°ê ë

Reflection°°ë õ
.°°õ ú
BindingFlags°°ú ®
.°°® © 
FlattenHierarchy°°© π
)°°π ∫
;°°∫ ª
foreach
¢¢ 
(
¢¢ 
var
¢¢ 
c
¢¢ 
in
¢¢ 
	allConsts
¢¢ '
)
¢¢' (
{
££ 
if
§§ 
(
§§ 
(
§§ 
int
§§ 
)
§§ 
c
§§ 
.
§§ 
GetValue
§§ #
(
§§# $
null
§§$ (
)
§§( )
==
§§* ,
neighbor
§§- 5
)
§§5 6
{
•• 
GUI
¶¶ 
.
¶¶ 
Label
¶¶ 
(
¶¶ 
rect
¶¶ "
,
¶¶" #
new
¶¶$ '

GUIContent
¶¶( 2
(
¶¶2 3
$str
¶¶3 5
,
¶¶5 6
c
¶¶7 8
.
¶¶8 9
Name
¶¶9 =
)
¶¶= >
)
¶¶> ?
;
¶¶? @
break
ßß 
;
ßß 
}
®® 
}
©© 
}
™™ 	
public
¨¨ 
virtual
¨¨ 
void
¨¨  
RuleTransformOnGUI
¨¨ .
(
¨¨. /
Rect
¨¨/ 3
rect
¨¨4 8
,
¨¨8 9
RuleTile
¨¨: B
.
¨¨B C

TilingRule
¨¨C M
.
¨¨M N
	Transform
¨¨N W
ruleTransform
¨¨X e
)
¨¨e f
{
≠≠ 	
switch
ÆÆ 
(
ÆÆ 
ruleTransform
ÆÆ !
)
ÆÆ! "
{
ØØ 
case
∞∞ 
RuleTile
∞∞ 
.
∞∞ 

TilingRule
∞∞ (
.
∞∞( )
	Transform
∞∞) 2
.
∞∞2 3
Rotated
∞∞3 :
:
∞∞: ;
GUI
±± 
.
±± 
DrawTexture
±± #
(
±±# $
rect
±±$ (
,
±±( )
autoTransforms
±±* 8
[
±±8 9
$num
±±9 :
]
±±: ;
)
±±; <
;
±±< =
break
≤≤ 
;
≤≤ 
case
≥≥ 
RuleTile
≥≥ 
.
≥≥ 

TilingRule
≥≥ (
.
≥≥( )
	Transform
≥≥) 2
.
≥≥2 3
MirrorX
≥≥3 :
:
≥≥: ;
GUI
¥¥ 
.
¥¥ 
DrawTexture
¥¥ #
(
¥¥# $
rect
¥¥$ (
,
¥¥( )
autoTransforms
¥¥* 8
[
¥¥8 9
$num
¥¥9 :
]
¥¥: ;
)
¥¥; <
;
¥¥< =
break
µµ 
;
µµ 
case
∂∂ 
RuleTile
∂∂ 
.
∂∂ 

TilingRule
∂∂ (
.
∂∂( )
	Transform
∂∂) 2
.
∂∂2 3
MirrorY
∂∂3 :
:
∂∂: ;
GUI
∑∑ 
.
∑∑ 
DrawTexture
∑∑ #
(
∑∑# $
rect
∑∑$ (
,
∑∑( )
autoTransforms
∑∑* 8
[
∑∑8 9
$num
∑∑9 :
]
∑∑: ;
)
∑∑; <
;
∑∑< =
break
∏∏ 
;
∏∏ 
case
ππ 
RuleTile
ππ 
.
ππ 

TilingRule
ππ (
.
ππ( )
	Transform
ππ) 2
.
ππ2 3
Fixed
ππ3 8
:
ππ8 9
GUI
∫∫ 
.
∫∫ 
DrawTexture
∫∫ #
(
∫∫# $
rect
∫∫$ (
,
∫∫( )
autoTransforms
∫∫* 8
[
∫∫8 9
$num
∫∫9 :
]
∫∫: ;
)
∫∫; <
;
∫∫< =
break
ªª 
;
ªª 
case
ºº 
RuleTile
ºº 
.
ºº 

TilingRule
ºº (
.
ºº( )
	Transform
ºº) 2
.
ºº2 3
MirrorXY
ºº3 ;
:
ºº; <
GUI
ΩΩ 
.
ΩΩ 
DrawTexture
ΩΩ #
(
ΩΩ# $
rect
ΩΩ$ (
,
ΩΩ( )
autoTransforms
ΩΩ* 8
[
ΩΩ8 9
$num
ΩΩ9 :
]
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
break
ææ 
;
ææ 
}
øø 
}
¿¿ 	
public
¬¬ 
bool
¬¬  
RuleNeighborUpdate
¬¬ &
(
¬¬& '
Rect
¬¬' +
rect
¬¬, 0
,
¬¬0 1
RuleTile
¬¬2 :
.
¬¬: ;

TilingRule
¬¬; E

tilingRule
¬¬F P
,
¬¬P Q

Dictionary
¬¬R \
<
¬¬\ ]

Vector3Int
¬¬] g
,
¬¬g h
int
¬¬i l
>
¬¬l m
	neighbors
¬¬n w
,√√ 

Vector3Int
√√ 
position
√√ 
)
√√ 
{
ƒƒ 	
if
≈≈ 
(
≈≈ 
Event
≈≈ 
.
≈≈ 
current
≈≈ 
.
≈≈ 
type
≈≈ "
==
≈≈# %
	EventType
≈≈& /
.
≈≈/ 0
	MouseDown
≈≈0 9
&&
≈≈: <#
ContainsMousePosition
≈≈= R
(
≈≈R S
rect
≈≈S W
)
≈≈W X
)
≈≈X Y
{
∆∆ 
var
«« 
	allConsts
«« 
=
«« 
tile
««  $
.
««$ %
m_NeighborType
««% 3
.
««3 4
	GetFields
««4 =
(
««= >
BindingFlags
««> J
.
««J K
Public
««K Q
|
««R S
BindingFlags
««T `
.
««` a
Static
««a g
|
««h i
BindingFlags
««j v
.
««v w
FlattenHierarchy««w á
)««á à
;««à â
var
»» 
neighborConsts
»» "
=
»»# $
	allConsts
»»% .
.
»». /
Select
»»/ 5
(
»»5 6
c
»»6 7
=>
»»8 :
(
»»; <
int
»»< ?
)
»»? @
c
»»@ A
.
»»A B
GetValue
»»B J
(
»»J K
null
»»K O
)
»»O P
)
»»P Q
.
»»Q R
ToList
»»R X
(
»»X Y
)
»»Y Z
;
»»Z [
neighborConsts
…… 
.
…… 
Sort
…… #
(
……# $
)
……$ %
;
……% &
if
ÀÀ 
(
ÀÀ 
	neighbors
ÀÀ 
.
ÀÀ 
ContainsKey
ÀÀ )
(
ÀÀ) *
position
ÀÀ* 2
)
ÀÀ2 3
)
ÀÀ3 4
{
ÃÃ 
int
ÕÕ 
oldIndex
ÕÕ  
=
ÕÕ! "
neighborConsts
ÕÕ# 1
.
ÕÕ1 2
IndexOf
ÕÕ2 9
(
ÕÕ9 :
	neighbors
ÕÕ: C
[
ÕÕC D
position
ÕÕD L
]
ÕÕL M
)
ÕÕM N
;
ÕÕN O
int
ŒŒ 
newIndex
ŒŒ  
=
ŒŒ! "
oldIndex
ŒŒ# +
+
ŒŒ, -
GetMouseChange
ŒŒ. <
(
ŒŒ< =
)
ŒŒ= >
;
ŒŒ> ?
if
œœ 
(
œœ 
newIndex
œœ  
>=
œœ! #
$num
œœ$ %
&&
œœ& (
newIndex
œœ) 1
<
œœ2 3
neighborConsts
œœ4 B
.
œœB C
Count
œœC H
)
œœH I
{
–– 
newIndex
——  
=
——! "
(
——# $
int
——$ '
)
——' (
Mathf
——( -
.
——- .
Repeat
——. 4
(
——4 5
newIndex
——5 =
,
——= >
neighborConsts
——? M
.
——M N
Count
——N S
)
——S T
;
——T U
	neighbors
““ !
[
““! "
position
““" *
]
““* +
=
““, -
neighborConsts
““. <
[
““< =
newIndex
““= E
]
““E F
;
““F G
}
”” 
else
‘‘ 
{
’’ 
	neighbors
÷÷ !
.
÷÷! "
Remove
÷÷" (
(
÷÷( )
position
÷÷) 1
)
÷÷1 2
;
÷÷2 3
}
◊◊ 
}
ÿÿ 
else
ŸŸ 
{
⁄⁄ 
int
€€ 
mouseChange
€€ #
=
€€$ %
GetMouseChange
€€& 4
(
€€4 5
)
€€5 6
;
€€6 7
if
‹‹ 
(
‹‹ 
mouseChange
‹‹ #
==
‹‹$ &
$num
‹‹' (
)
‹‹( )
{
›› 
	neighbors
ﬁﬁ !
.
ﬁﬁ! "
Add
ﬁﬁ" %
(
ﬁﬁ% &
position
ﬁﬁ& .
,
ﬁﬁ. /
neighborConsts
ﬁﬁ0 >
[
ﬁﬁ> ?
$num
ﬁﬁ? @
]
ﬁﬁ@ A
)
ﬁﬁA B
;
ﬁﬁB C
}
ﬂﬂ 
else
‡‡ 
{
·· 
	neighbors
‚‚ !
.
‚‚! "
Add
‚‚" %
(
‚‚% &
position
‚‚& .
,
‚‚. /
neighborConsts
‚‚0 >
[
‚‚> ?
neighborConsts
‚‚? M
.
‚‚M N
Count
‚‚N S
-
‚‚T U
$num
‚‚V W
]
‚‚W X
)
‚‚X Y
;
‚‚Y Z
}
„„ 
}
‰‰ 

tilingRule
ÂÂ 
.
ÂÂ 
ApplyNeighbors
ÂÂ )
(
ÂÂ) *
	neighbors
ÂÂ* 3
)
ÂÂ3 4
;
ÂÂ4 5
GUI
ÁÁ 
.
ÁÁ 
changed
ÁÁ 
=
ÁÁ 
true
ÁÁ "
;
ÁÁ" #
Event
ËË 
.
ËË 
current
ËË 
.
ËË 
Use
ËË !
(
ËË! "
)
ËË" #
;
ËË# $
return
ÍÍ 
true
ÍÍ 
;
ÍÍ 
}
ÎÎ 
return
ÌÌ 
false
ÌÌ 
;
ÌÌ 
}
ÓÓ 	
public
 
bool
 !
RuleTransformUpdate
 '
(
' (
Rect
( ,
rect
- 1
,
1 2
RuleTile
3 ;
.
; <

TilingRule
< F

tilingRule
G Q
)
Q R
{
ÒÒ 	
if
ÚÚ 
(
ÚÚ 
Event
ÚÚ 
.
ÚÚ 
current
ÚÚ 
.
ÚÚ 
type
ÚÚ "
==
ÚÚ# %
	EventType
ÚÚ& /
.
ÚÚ/ 0
	MouseDown
ÚÚ0 9
&&
ÚÚ: <#
ContainsMousePosition
ÚÚ= R
(
ÚÚR S
rect
ÚÚS W
)
ÚÚW X
)
ÚÚX Y
{
ÛÛ 

tilingRule
ÙÙ 
.
ÙÙ 
m_RuleTransform
ÙÙ *
=
ÙÙ+ ,
(
ÙÙ- .
RuleTile
ÙÙ. 6
.
ÙÙ6 7

TilingRule
ÙÙ7 A
.
ÙÙA B
	Transform
ÙÙB K
)
ÙÙK L
(
ÙÙL M
int
ÙÙM P
)
ÙÙP Q
Mathf
ÙÙQ V
.
ÙÙV W
Repeat
ÙÙW ]
(
ÙÙ] ^
(
ÙÙ^ _
int
ÙÙ_ b
)
ÙÙb c

tilingRule
ÙÙc m
.
ÙÙm n
m_RuleTransform
ÙÙn }
+
ÙÙ~ 
GetMouseChangeÙÙÄ é
(ÙÙé è
)ÙÙè ê
,ÙÙê ë
EnumÙÙí ñ
.ÙÙñ ó
	GetValuesÙÙó †
(ÙÙ† °
typeofÙÙ° ß
(ÙÙß ®
RuleTileÙÙ® ∞
.ÙÙ∞ ±

TilingRuleÙÙ± ª
.ÙÙª º
	TransformÙÙº ≈
)ÙÙ≈ ∆
)ÙÙ∆ «
.ÙÙ« »
LengthÙÙ» Œ
)ÙÙŒ œ
;ÙÙœ –
GUI
ıı 
.
ıı 
changed
ıı 
=
ıı 
true
ıı "
;
ıı" #
Event
ˆˆ 
.
ˆˆ 
current
ˆˆ 
.
ˆˆ 
Use
ˆˆ !
(
ˆˆ! "
)
ˆˆ" #
;
ˆˆ# $
return
¯¯ 
true
¯¯ 
;
¯¯ 
}
˘˘ 
return
˚˚ 
false
˚˚ 
;
˚˚ 
}
¸¸ 	
public
˛˛ 
virtual
˛˛ 
bool
˛˛ #
ContainsMousePosition
˛˛ 1
(
˛˛1 2
Rect
˛˛2 6
rect
˛˛7 ;
)
˛˛; <
{
ˇˇ 	
return
ÄÄ 
rect
ÄÄ 
.
ÄÄ 
Contains
ÄÄ  
(
ÄÄ  !
Event
ÄÄ! &
.
ÄÄ& '
current
ÄÄ' .
.
ÄÄ. /
mousePosition
ÄÄ/ <
)
ÄÄ< =
;
ÄÄ= >
}
ÅÅ 	
private
ÉÉ 
static
ÉÉ 
int
ÉÉ 
GetMouseChange
ÉÉ )
(
ÉÉ) *
)
ÉÉ* +
{
ÑÑ 	
return
ÖÖ 
Event
ÖÖ 
.
ÖÖ 
current
ÖÖ  
.
ÖÖ  !
button
ÖÖ! '
==
ÖÖ( *
$num
ÖÖ+ ,
?
ÖÖ- .
-
ÖÖ/ 0
$num
ÖÖ0 1
:
ÖÖ2 3
$num
ÖÖ4 5
;
ÖÖ5 6
}
ÜÜ 	
public
àà 
virtual
àà 
void
àà 
RuleMatrixOnGUI
àà +
(
àà+ ,
RuleTile
àà, 4
tile
àà5 9
,
àà9 :
Rect
àà; ?
rect
àà@ D
,
ààD E
	BoundsInt
ààF O
bounds
ààP V
,
ààV W
RuleTile
ààX `
.
àà` a

TilingRule
ààa k

tilingRule
ààl v
)
ààv w
{
ââ 	
Handles
ää 
.
ää 
color
ää 
=
ää 
EditorGUIUtility
ää ,
.
ää, -
	isProSkin
ää- 6
?
ää7 8
new
ää9 <
Color
ää= B
(
ääB C
$num
ääC E
,
ääE F
$num
ääG I
,
ääI J
$num
ääK M
,
ääM N
$num
ääO S
)
ääS T
:
ääU V
new
ääW Z
Color
ää[ `
(
ää` a
$num
ääa c
,
ääc d
$num
ääe g
,
ääg h
$num
ääi k
,
ääk l
$num
ääm q
)
ääq r
;
äär s
float
ãã 
w
ãã 
=
ãã 
rect
ãã 
.
ãã 
width
ãã  
/
ãã! "
bounds
ãã# )
.
ãã) *
size
ãã* .
.
ãã. /
x
ãã/ 0
;
ãã0 1
float
åå 
h
åå 
=
åå 
rect
åå 
.
åå 
height
åå !
/
åå" #
bounds
åå$ *
.
åå* +
size
åå+ /
.
åå/ 0
y
åå0 1
;
åå1 2
for
éé 
(
éé 
int
éé 
y
éé 
=
éé 
$num
éé 
;
éé 
y
éé 
<=
éé  
bounds
éé! '
.
éé' (
size
éé( ,
.
éé, -
y
éé- .
;
éé. /
y
éé0 1
++
éé1 3
)
éé3 4
{
èè 
float
êê 
top
êê 
=
êê 
rect
êê  
.
êê  !
yMin
êê! %
+
êê& '
y
êê( )
*
êê* +
h
êê, -
;
êê- .
Handles
ëë 
.
ëë 
DrawLine
ëë  
(
ëë  !
new
ëë! $
Vector3
ëë% ,
(
ëë, -
rect
ëë- 1
.
ëë1 2
xMin
ëë2 6
,
ëë6 7
top
ëë8 ;
)
ëë; <
,
ëë< =
new
ëë> A
Vector3
ëëB I
(
ëëI J
rect
ëëJ N
.
ëëN O
xMax
ëëO S
,
ëëS T
top
ëëU X
)
ëëX Y
)
ëëY Z
;
ëëZ [
}
íí 
for
ìì 
(
ìì 
int
ìì 
x
ìì 
=
ìì 
$num
ìì 
;
ìì 
x
ìì 
<=
ìì  
bounds
ìì! '
.
ìì' (
size
ìì( ,
.
ìì, -
x
ìì- .
;
ìì. /
x
ìì0 1
++
ìì1 3
)
ìì3 4
{
îî 
float
ïï 
left
ïï 
=
ïï 
rect
ïï !
.
ïï! "
xMin
ïï" &
+
ïï' (
x
ïï) *
*
ïï+ ,
w
ïï- .
;
ïï. /
Handles
ññ 
.
ññ 
DrawLine
ññ  
(
ññ  !
new
ññ! $
Vector3
ññ% ,
(
ññ, -
left
ññ- 1
,
ññ1 2
rect
ññ3 7
.
ññ7 8
yMin
ññ8 <
)
ññ< =
,
ññ= >
new
ññ? B
Vector3
ññC J
(
ññJ K
left
ññK O
,
ññO P
rect
ññQ U
.
ññU V
yMax
ññV Z
)
ññZ [
)
ññ[ \
;
ññ\ ]
}
óó 
Handles
òò 
.
òò 
color
òò 
=
òò 
Color
òò !
.
òò! "
white
òò" '
;
òò' (
var
öö 
	neighbors
öö 
=
öö 

tilingRule
öö &
.
öö& '
GetNeighbors
öö' 3
(
öö3 4
)
öö4 5
;
öö5 6
for
úú 
(
úú 
int
úú 
y
úú 
=
úú 
bounds
úú 
.
úú  
yMin
úú  $
;
úú$ %
y
úú& '
<
úú( )
bounds
úú* 0
.
úú0 1
yMax
úú1 5
;
úú5 6
y
úú7 8
++
úú8 :
)
úú: ;
{
ùù 
for
ûû 
(
ûû 
int
ûû 
x
ûû 
=
ûû 
bounds
ûû #
.
ûû# $
xMin
ûû$ (
;
ûû( )
x
ûû* +
<
ûû, -
bounds
ûû. 4
.
ûû4 5
xMax
ûû5 9
;
ûû9 :
x
ûû; <
++
ûû< >
)
ûû> ?
{
üü 

Vector3Int
†† 
pos
†† "
=
††# $
new
††% (

Vector3Int
††) 3
(
††3 4
x
††4 5
,
††5 6
y
††7 8
,
††8 9
$num
††: ;
)
††; <
;
††< =
Rect
°° 
r
°° 
=
°° 
new
°°  
Rect
°°! %
(
°°% &
rect
°°& *
.
°°* +
xMin
°°+ /
+
°°0 1
(
°°2 3
x
°°3 4
-
°°5 6
bounds
°°7 =
.
°°= >
xMin
°°> B
)
°°B C
*
°°D E
w
°°F G
,
°°G H
rect
°°I M
.
°°M N
yMin
°°N R
+
°°S T
(
°°U V
-
°°V W
y
°°W X
+
°°Y Z
bounds
°°[ a
.
°°a b
yMax
°°b f
-
°°g h
$num
°°i j
)
°°j k
*
°°l m
h
°°n o
,
°°o p
w
°°q r
-
°°s t
$num
°°u v
,
°°v w
h
°°x y
-
°°z {
$num
°°| }
)
°°} ~
;
°°~ 
if
¢¢ 
(
¢¢ 
x
¢¢ 
!=
¢¢ 
$num
¢¢ 
||
¢¢ !
y
¢¢" #
!=
¢¢$ &
$num
¢¢' (
)
¢¢( )
{
££ 
if
§§ 
(
§§ 
	neighbors
§§ %
.
§§% &
ContainsKey
§§& 1
(
§§1 2
pos
§§2 5
)
§§5 6
)
§§6 7
{
•• 
	RuleOnGUI
¶¶ %
(
¶¶% &
r
¶¶& '
,
¶¶' (
pos
¶¶) ,
,
¶¶, -
	neighbors
¶¶. 7
[
¶¶7 8
pos
¶¶8 ;
]
¶¶; <
)
¶¶< =
;
¶¶= >
RuleTooltipOnGUI
ßß ,
(
ßß, -
r
ßß- .
,
ßß. /
	neighbors
ßß0 9
[
ßß9 :
pos
ßß: =
]
ßß= >
)
ßß> ?
;
ßß? @
}
®® 
if
©© 
(
©©  
RuleNeighborUpdate
©© .
(
©©. /
r
©©/ 0
,
©©0 1

tilingRule
©©2 <
,
©©< =
	neighbors
©©> G
,
©©G H
pos
©©I L
)
©©L M
)
©©M N
{
™™ 
tile
´´  
.
´´  !%
UpdateNeighborPositions
´´! 8
(
´´8 9
)
´´9 :
;
´´: ;
}
¨¨ 
}
≠≠ 
else
ÆÆ 
{
ØØ  
RuleTransformOnGUI
∞∞ *
(
∞∞* +
r
∞∞+ ,
,
∞∞, -

tilingRule
∞∞. 8
.
∞∞8 9
m_RuleTransform
∞∞9 H
)
∞∞H I
;
∞∞I J
if
±± 
(
±± !
RuleTransformUpdate
±± /
(
±±/ 0
r
±±0 1
,
±±1 2

tilingRule
±±3 =
)
±±= >
)
±±> ?
{
≤≤ 
tile
≥≥  
.
≥≥  !%
UpdateNeighborPositions
≥≥! 8
(
≥≥8 9
)
≥≥9 :
;
≥≥: ;
}
¥¥ 
}
µµ 
}
∂∂ 
}
∑∑ 
}
∏∏ 	
public
∫∫ 
virtual
∫∫ 
void
∫∫ 
SpriteOnGUI
∫∫ '
(
∫∫' (
Rect
∫∫( ,
rect
∫∫- 1
,
∫∫1 2
RuleTile
∫∫3 ;
.
∫∫; <

TilingRule
∫∫< F

tilingRule
∫∫G Q
)
∫∫Q R
{
ªª 	

tilingRule
ºº 
.
ºº 
	m_Sprites
ºº  
[
ºº  !
$num
ºº! "
]
ºº" #
=
ºº$ %
	EditorGUI
ºº& /
.
ºº/ 0
ObjectField
ºº0 ;
(
ºº; <
new
ºº< ?
Rect
ºº@ D
(
ººD E
rect
ººE I
.
ººI J
xMax
ººJ N
-
ººO P
rect
ººQ U
.
ººU V
height
ººV \
,
ºº\ ]
rect
ºº^ b
.
ººb c
yMin
ººc g
,
ººg h
rect
ººi m
.
ººm n
height
ººn t
,
ººt u
rect
ººv z
.
ººz {
heightºº{ Å
)ººÅ Ç
,ººÇ É

tilingRuleººÑ é
.ººé è
	m_Spritesººè ò
[ººò ô
$numººô ö
]ººö õ
,ººõ ú
typeofººù £
(ºº£ §
Spriteºº§ ™
)ºº™ ´
,ºº´ ¨
falseºº≠ ≤
)ºº≤ ≥
asºº¥ ∂
Spriteºº∑ Ω
;ººΩ æ
}
ΩΩ 	
public
øø 
virtual
øø 
void
øø  
RuleInspectorOnGUI
øø .
(
øø. /
Rect
øø/ 3
rect
øø4 8
,
øø8 9
RuleTile
øø: B
.
øøB C

TilingRule
øøC M

tilingRule
øøN X
)
øøX Y
{
¿¿ 	
float
¡¡ 
y
¡¡ 
=
¡¡ 
rect
¡¡ 
.
¡¡ 
yMin
¡¡ 
;
¡¡  
	EditorGUI
¬¬ 
.
¬¬ 
BeginChangeCheck
¬¬ &
(
¬¬& '
)
¬¬' (
;
¬¬( )
GUI
√√ 
.
√√ 
Label
√√ 
(
√√ 
new
√√ 
Rect
√√ 
(
√√ 
rect
√√ #
.
√√# $
xMin
√√$ (
,
√√( )
y
√√* +
,
√√+ ,
k_LabelWidth
√√- 9
,
√√9 : 
k_SingleLineHeight
√√; M
)
√√M N
,
√√N O
$str
√√P V
)
√√V W
;
√√W X

tilingRule
ƒƒ 
.
ƒƒ 
m_RuleTransform
ƒƒ &
=
ƒƒ' (
(
ƒƒ) *
RuleTile
ƒƒ* 2
.
ƒƒ2 3

TilingRule
ƒƒ3 =
.
ƒƒ= >
	Transform
ƒƒ> G
)
ƒƒG H
	EditorGUI
ƒƒH Q
.
ƒƒQ R
	EnumPopup
ƒƒR [
(
ƒƒ[ \
new
ƒƒ\ _
Rect
ƒƒ` d
(
ƒƒd e
rect
ƒƒe i
.
ƒƒi j
xMin
ƒƒj n
+
ƒƒo p
k_LabelWidth
ƒƒq }
,
ƒƒ} ~
yƒƒ Ä
,ƒƒÄ Å
rectƒƒÇ Ü
.ƒƒÜ á
widthƒƒá å
-ƒƒç é
k_LabelWidthƒƒè õ
,ƒƒõ ú"
k_SingleLineHeightƒƒù Ø
)ƒƒØ ∞
,ƒƒ∞ ±

tilingRuleƒƒ≤ º
.ƒƒº Ω
m_RuleTransformƒƒΩ Ã
)ƒƒÃ Õ
;ƒƒÕ Œ
y
≈≈ 
+=
≈≈  
k_SingleLineHeight
≈≈ #
;
≈≈# $
GUI
∆∆ 
.
∆∆ 
Label
∆∆ 
(
∆∆ 
new
∆∆ 
Rect
∆∆ 
(
∆∆ 
rect
∆∆ #
.
∆∆# $
xMin
∆∆$ (
,
∆∆( )
y
∆∆* +
,
∆∆+ ,
k_LabelWidth
∆∆- 9
,
∆∆9 : 
k_SingleLineHeight
∆∆; M
)
∆∆M N
,
∆∆N O
$str
∆∆P ]
)
∆∆] ^
;
∆∆^ _

tilingRule
«« 
.
«« 
m_GameObject
«« #
=
««$ %
(
««& '

GameObject
««' 1
)
««1 2
	EditorGUI
««2 ;
.
««; <
ObjectField
««< G
(
««G H
new
««H K
Rect
««L P
(
««P Q
rect
««Q U
.
««U V
xMin
««V Z
+
««[ \
k_LabelWidth
««] i
,
««i j
y
««k l
,
««l m
rect
««n r
.
««r s
width
««s x
-
««y z
k_LabelWidth««{ á
,««á à"
k_SingleLineHeight««â õ
)««õ ú
,««ú ù
$str««û †
,««† °

tilingRule««¢ ¨
.««¨ ≠
m_GameObject««≠ π
,««π ∫
typeof««ª ¡
(««¡ ¬

GameObject««¬ Ã
)««Ã Õ
,««Õ Œ
false««œ ‘
)««‘ ’
;««’ ÷
y
»» 
+=
»»  
k_SingleLineHeight
»» #
;
»»# $
GUI
…… 
.
…… 
Label
…… 
(
…… 
new
…… 
Rect
…… 
(
…… 
rect
…… #
.
……# $
xMin
……$ (
,
……( )
y
……* +
,
……+ ,
k_LabelWidth
……- 9
,
……9 : 
k_SingleLineHeight
……; M
)
……M N
,
……N O
$str
……P Z
)
……Z [
;
……[ \

tilingRule
   
.
   
m_ColliderType
   %
=
  & '
(
  ( )
Tile
  ) -
.
  - .
ColliderType
  . :
)
  : ;
	EditorGUI
  ; D
.
  D E
	EnumPopup
  E N
(
  N O
new
  O R
Rect
  S W
(
  W X
rect
  X \
.
  \ ]
xMin
  ] a
+
  b c
k_LabelWidth
  d p
,
  p q
y
  r s
,
  s t
rect
  u y
.
  y z
width
  z 
-  Ä Å
k_LabelWidth  Ç é
,  é è"
k_SingleLineHeight  ê ¢
)  ¢ £
,  £ §

tilingRule  • Ø
.  Ø ∞
m_ColliderType  ∞ æ
)  æ ø
;  ø ¿
y
ÀÀ 
+=
ÀÀ  
k_SingleLineHeight
ÀÀ #
;
ÀÀ# $
GUI
ÃÃ 
.
ÃÃ 
Label
ÃÃ 
(
ÃÃ 
new
ÃÃ 
Rect
ÃÃ 
(
ÃÃ 
rect
ÃÃ #
.
ÃÃ# $
xMin
ÃÃ$ (
,
ÃÃ( )
y
ÃÃ* +
,
ÃÃ+ ,
k_LabelWidth
ÃÃ- 9
,
ÃÃ9 : 
k_SingleLineHeight
ÃÃ; M
)
ÃÃM N
,
ÃÃN O
$str
ÃÃP X
)
ÃÃX Y
;
ÃÃY Z

tilingRule
ÕÕ 
.
ÕÕ 
m_Output
ÕÕ 
=
ÕÕ  !
(
ÕÕ" #
RuleTile
ÕÕ# +
.
ÕÕ+ ,

TilingRule
ÕÕ, 6
.
ÕÕ6 7
OutputSprite
ÕÕ7 C
)
ÕÕC D
	EditorGUI
ÕÕD M
.
ÕÕM N
	EnumPopup
ÕÕN W
(
ÕÕW X
new
ÕÕX [
Rect
ÕÕ\ `
(
ÕÕ` a
rect
ÕÕa e
.
ÕÕe f
xMin
ÕÕf j
+
ÕÕk l
k_LabelWidth
ÕÕm y
,
ÕÕy z
y
ÕÕ{ |
,
ÕÕ| }
rectÕÕ~ Ç
.ÕÕÇ É
widthÕÕÉ à
-ÕÕâ ä
k_LabelWidthÕÕã ó
,ÕÕó ò"
k_SingleLineHeightÕÕô ´
)ÕÕ´ ¨
,ÕÕ¨ ≠

tilingRuleÕÕÆ ∏
.ÕÕ∏ π
m_OutputÕÕπ ¡
)ÕÕ¡ ¬
;ÕÕ¬ √
y
ŒŒ 
+=
ŒŒ  
k_SingleLineHeight
ŒŒ #
;
ŒŒ# $
if
–– 
(
–– 

tilingRule
–– 
.
–– 
m_Output
–– #
==
––$ &
RuleTile
––' /
.
––/ 0

TilingRule
––0 :
.
––: ;
OutputSprite
––; G
.
––G H
	Animation
––H Q
)
––Q R
{
—— 
GUI
““ 
.
““ 
Label
““ 
(
““ 
new
““ 
Rect
““ "
(
““" #
rect
““# '
.
““' (
xMin
““( ,
,
““, -
y
““. /
,
““/ 0
k_LabelWidth
““1 =
,
““= > 
k_SingleLineHeight
““? Q
)
““Q R
,
““R S
$str
““T [
)
““[ \
;
““\ ]

tilingRule
”” 
.
”” 
m_AnimationSpeed
”” +
=
””, -
	EditorGUI
””. 7
.
””7 8

FloatField
””8 B
(
””B C
new
””C F
Rect
””G K
(
””K L
rect
””L P
.
””P Q
xMin
””Q U
+
””V W
k_LabelWidth
””X d
,
””d e
y
””f g
,
””g h
rect
””i m
.
””m n
width
””n s
-
””t u
k_LabelWidth””v Ç
,””Ç É"
k_SingleLineHeight””Ñ ñ
)””ñ ó
,””ó ò

tilingRule””ô £
.””£ § 
m_AnimationSpeed””§ ¥
)””¥ µ
;””µ ∂
y
‘‘ 
+=
‘‘  
k_SingleLineHeight
‘‘ '
;
‘‘' (
}
’’ 
if
÷÷ 
(
÷÷ 

tilingRule
÷÷ 
.
÷÷ 
m_Output
÷÷ #
==
÷÷$ &
RuleTile
÷÷' /
.
÷÷/ 0

TilingRule
÷÷0 :
.
÷÷: ;
OutputSprite
÷÷; G
.
÷÷G H
Random
÷÷H N
)
÷÷N O
{
◊◊ 
GUI
ÿÿ 
.
ÿÿ 
Label
ÿÿ 
(
ÿÿ 
new
ÿÿ 
Rect
ÿÿ "
(
ÿÿ" #
rect
ÿÿ# '
.
ÿÿ' (
xMin
ÿÿ( ,
,
ÿÿ, -
y
ÿÿ. /
,
ÿÿ/ 0
k_LabelWidth
ÿÿ1 =
,
ÿÿ= > 
k_SingleLineHeight
ÿÿ? Q
)
ÿÿQ R
,
ÿÿR S
$str
ÿÿT [
)
ÿÿ[ \
;
ÿÿ\ ]

tilingRule
ŸŸ 
.
ŸŸ 
m_PerlinScale
ŸŸ (
=
ŸŸ) *
	EditorGUI
ŸŸ+ 4
.
ŸŸ4 5
Slider
ŸŸ5 ;
(
ŸŸ; <
new
ŸŸ< ?
Rect
ŸŸ@ D
(
ŸŸD E
rect
ŸŸE I
.
ŸŸI J
xMin
ŸŸJ N
+
ŸŸO P
k_LabelWidth
ŸŸQ ]
,
ŸŸ] ^
y
ŸŸ_ `
,
ŸŸ` a
rect
ŸŸb f
.
ŸŸf g
width
ŸŸg l
-
ŸŸm n
k_LabelWidth
ŸŸo {
,
ŸŸ{ |!
k_SingleLineHeightŸŸ} è
)ŸŸè ê
,ŸŸê ë

tilingRuleŸŸí ú
.ŸŸú ù
m_PerlinScaleŸŸù ™
,ŸŸ™ ´
$numŸŸ¨ ≤
,ŸŸ≤ ≥
$numŸŸ¥ ∫
)ŸŸ∫ ª
;ŸŸª º
y
⁄⁄ 
+=
⁄⁄  
k_SingleLineHeight
⁄⁄ '
;
⁄⁄' (
GUI
‹‹ 
.
‹‹ 
Label
‹‹ 
(
‹‹ 
new
‹‹ 
Rect
‹‹ "
(
‹‹" #
rect
‹‹# '
.
‹‹' (
xMin
‹‹( ,
,
‹‹, -
y
‹‹. /
,
‹‹/ 0
k_LabelWidth
‹‹1 =
,
‹‹= > 
k_SingleLineHeight
‹‹? Q
)
‹‹Q R
,
‹‹R S
$str
‹‹T ]
)
‹‹] ^
;
‹‹^ _

tilingRule
›› 
.
›› 
m_RandomTransform
›› ,
=
››- .
(
››/ 0
RuleTile
››0 8
.
››8 9

TilingRule
››9 C
.
››C D
	Transform
››D M
)
››M N
	EditorGUI
››N W
.
››W X
	EnumPopup
››X a
(
››a b
new
››b e
Rect
››f j
(
››j k
rect
››k o
.
››o p
xMin
››p t
+
››u v
k_LabelWidth››w É
,››É Ñ
y››Ö Ü
,››Ü á
rect››à å
.››å ç
width››ç í
-››ì î
k_LabelWidth››ï °
,››° ¢"
k_SingleLineHeight››£ µ
)››µ ∂
,››∂ ∑

tilingRule››∏ ¬
.››¬ √!
m_RandomTransform››√ ‘
)››‘ ’
;››’ ÷
y
ﬁﬁ 
+=
ﬁﬁ  
k_SingleLineHeight
ﬁﬁ '
;
ﬁﬁ' (
}
ﬂﬂ 
if
·· 
(
·· 

tilingRule
·· 
.
·· 
m_Output
·· #
!=
··$ &
RuleTile
··' /
.
··/ 0

TilingRule
··0 :
.
··: ;
OutputSprite
··; G
.
··G H
Single
··H N
)
··N O
{
‚‚ 
GUI
„„ 
.
„„ 
Label
„„ 
(
„„ 
new
„„ 
Rect
„„ "
(
„„" #
rect
„„# '
.
„„' (
xMin
„„( ,
,
„„, -
y
„„. /
,
„„/ 0
k_LabelWidth
„„1 =
,
„„= > 
k_SingleLineHeight
„„? Q
)
„„Q R
,
„„R S
$str
„„T Z
)
„„Z [
;
„„[ \
	EditorGUI
‰‰ 
.
‰‰ 
BeginChangeCheck
‰‰ *
(
‰‰* +
)
‰‰+ ,
;
‰‰, -
int
ÂÂ 
	newLength
ÂÂ 
=
ÂÂ 
	EditorGUI
ÂÂ  )
.
ÂÂ) *
DelayedIntField
ÂÂ* 9
(
ÂÂ9 :
new
ÂÂ: =
Rect
ÂÂ> B
(
ÂÂB C
rect
ÂÂC G
.
ÂÂG H
xMin
ÂÂH L
+
ÂÂM N
k_LabelWidth
ÂÂO [
,
ÂÂ[ \
y
ÂÂ] ^
,
ÂÂ^ _
rect
ÂÂ` d
.
ÂÂd e
width
ÂÂe j
-
ÂÂk l
k_LabelWidth
ÂÂm y
,
ÂÂy z!
k_SingleLineHeightÂÂ{ ç
)ÂÂç é
,ÂÂé è

tilingRuleÂÂê ö
.ÂÂö õ
	m_SpritesÂÂõ §
.ÂÂ§ •
LengthÂÂ• ´
)ÂÂ´ ¨
;ÂÂ¨ ≠
if
ÊÊ 
(
ÊÊ 
	EditorGUI
ÊÊ 
.
ÊÊ 
EndChangeCheck
ÊÊ ,
(
ÊÊ, -
)
ÊÊ- .
)
ÊÊ. /
Array
ÁÁ 
.
ÁÁ 
Resize
ÁÁ  
(
ÁÁ  !
ref
ÁÁ! $

tilingRule
ÁÁ% /
.
ÁÁ/ 0
	m_Sprites
ÁÁ0 9
,
ÁÁ9 :
Math
ÁÁ; ?
.
ÁÁ? @
Max
ÁÁ@ C
(
ÁÁC D
	newLength
ÁÁD M
,
ÁÁM N
$num
ÁÁO P
)
ÁÁP Q
)
ÁÁQ R
;
ÁÁR S
y
ËË 
+=
ËË  
k_SingleLineHeight
ËË '
;
ËË' (
for
ÍÍ 
(
ÍÍ 
int
ÍÍ 
i
ÍÍ 
=
ÍÍ 
$num
ÍÍ 
;
ÍÍ 
i
ÍÍ  !
<
ÍÍ" #

tilingRule
ÍÍ$ .
.
ÍÍ. /
	m_Sprites
ÍÍ/ 8
.
ÍÍ8 9
Length
ÍÍ9 ?
;
ÍÍ? @
i
ÍÍA B
++
ÍÍB D
)
ÍÍD E
{
ÎÎ 

tilingRule
ÏÏ 
.
ÏÏ 
	m_Sprites
ÏÏ (
[
ÏÏ( )
i
ÏÏ) *
]
ÏÏ* +
=
ÏÏ, -
	EditorGUI
ÏÏ. 7
.
ÏÏ7 8
ObjectField
ÏÏ8 C
(
ÏÏC D
new
ÏÏD G
Rect
ÏÏH L
(
ÏÏL M
rect
ÏÏM Q
.
ÏÏQ R
xMin
ÏÏR V
+
ÏÏW X
k_LabelWidth
ÏÏY e
,
ÏÏe f
y
ÏÏg h
,
ÏÏh i
rect
ÏÏj n
.
ÏÏn o
width
ÏÏo t
-
ÏÏu v
k_LabelWidthÏÏw É
,ÏÏÉ Ñ"
k_SingleLineHeightÏÏÖ ó
)ÏÏó ò
,ÏÏò ô

tilingRuleÏÏö §
.ÏÏ§ •
	m_SpritesÏÏ• Æ
[ÏÏÆ Ø
iÏÏØ ∞
]ÏÏ∞ ±
,ÏÏ± ≤
typeofÏÏ≥ π
(ÏÏπ ∫
SpriteÏÏ∫ ¿
)ÏÏ¿ ¡
,ÏÏ¡ ¬
falseÏÏ√ »
)ÏÏ» …
asÏÏ  Ã
SpriteÏÏÕ ”
;ÏÏ” ‘
y
ÌÌ 
+=
ÌÌ  
k_SingleLineHeight
ÌÌ +
;
ÌÌ+ ,
}
ÓÓ 
}
ÔÔ 
}
 	
public
ÚÚ 
override
ÚÚ 
	Texture2D
ÚÚ !!
RenderStaticPreview
ÚÚ" 5
(
ÚÚ5 6
string
ÚÚ6 <
	assetPath
ÚÚ= F
,
ÚÚF G
Object
ÚÚH N
[
ÚÚN O
]
ÚÚO P
	subAssets
ÚÚQ Z
,
ÚÚZ [
int
ÚÚ\ _
width
ÚÚ` e
,
ÚÚe f
int
ÚÚg j
height
ÚÚk q
)
ÚÚq r
{
ÛÛ 	
if
ÙÙ 
(
ÙÙ 
tile
ÙÙ 
.
ÙÙ 
m_DefaultSprite
ÙÙ $
!=
ÙÙ% '
null
ÙÙ( ,
)
ÙÙ, -
{
ıı 
Type
ˆˆ 
t
ˆˆ 
=
ˆˆ 
GetType
ˆˆ  
(
ˆˆ  !
$str
ˆˆ! <
)
ˆˆ< =
;
ˆˆ= >
if
˜˜ 
(
˜˜ 
t
˜˜ 
!=
˜˜ 
null
˜˜ 
)
˜˜ 
{
¯¯ 

MethodInfo
˘˘ 
method
˘˘ %
=
˘˘& '
t
˘˘( )
.
˘˘) *
	GetMethod
˘˘* 3
(
˘˘3 4
$str
˘˘4 I
,
˘˘I J
new
˘˘K N
Type
˘˘O S
[
˘˘S T
]
˘˘T U
{
˘˘V W
typeof
˘˘X ^
(
˘˘^ _
Sprite
˘˘_ e
)
˘˘e f
,
˘˘f g
typeof
˘˘h n
(
˘˘n o
Color
˘˘o t
)
˘˘t u
,
˘˘u v
typeof
˘˘w }
(
˘˘} ~
int˘˘~ Å
)˘˘Å Ç
,˘˘Ç É
typeof˘˘Ñ ä
(˘˘ä ã
int˘˘ã é
)˘˘é è
}˘˘ê ë
)˘˘ë í
;˘˘í ì
if
˙˙ 
(
˙˙ 
method
˙˙ 
!=
˙˙ !
null
˙˙" &
)
˙˙& '
{
˚˚ 
object
¸¸ 
ret
¸¸ "
=
¸¸# $
method
¸¸% +
.
¸¸+ ,
Invoke
¸¸, 2
(
¸¸2 3
$str
¸¸3 H
,
¸¸H I
new
¸¸J M
object
¸¸N T
[
¸¸T U
]
¸¸U V
{
¸¸W X
tile
¸¸Y ]
.
¸¸] ^
m_DefaultSprite
¸¸^ m
,
¸¸m n
Color
¸¸o t
.
¸¸t u
white
¸¸u z
,
¸¸z {
width¸¸| Å
,¸¸Å Ç
height¸¸É â
}¸¸ä ã
)¸¸ã å
;¸¸å ç
if
˝˝ 
(
˝˝ 
ret
˝˝ 
is
˝˝  "
	Texture2D
˝˝# ,
)
˝˝, -
return
˛˛ "
ret
˛˛# &
as
˛˛' )
	Texture2D
˛˛* 3
;
˛˛3 4
}
ˇˇ 
}
ÄÄ 
}
ÅÅ 
return
ÇÇ 
base
ÇÇ 
.
ÇÇ !
RenderStaticPreview
ÇÇ +
(
ÇÇ+ ,
	assetPath
ÇÇ, 5
,
ÇÇ5 6
	subAssets
ÇÇ7 @
,
ÇÇ@ A
width
ÇÇB G
,
ÇÇG H
height
ÇÇI O
)
ÇÇO P
;
ÇÇP Q
}
ÉÉ 	
private
ÖÖ 
static
ÖÖ 
Type
ÖÖ 
GetType
ÖÖ #
(
ÖÖ# $
string
ÖÖ$ *
TypeName
ÖÖ+ 3
)
ÖÖ3 4
{
ÜÜ 	
var
áá 
type
áá 
=
áá 
Type
áá 
.
áá 
GetType
áá #
(
áá# $
TypeName
áá$ ,
)
áá, -
;
áá- .
if
àà 
(
àà 
type
àà 
!=
àà 
null
àà 
)
àà 
return
ââ 
type
ââ 
;
ââ 
if
ãã 
(
ãã 
TypeName
ãã 
.
ãã 
Contains
ãã !
(
ãã! "
$str
ãã" %
)
ãã% &
)
ãã& '
{
åå 
var
çç 
assemblyName
çç  
=
çç! "
TypeName
çç# +
.
çç+ ,
	Substring
çç, 5
(
çç5 6
$num
çç6 7
,
çç7 8
TypeName
çç9 A
.
ççA B
IndexOf
ççB I
(
ççI J
$char
ççJ M
)
ççM N
)
ççN O
;
ççO P
var
éé 
assembly
éé 
=
éé 
Assembly
éé '
.
éé' (
Load
éé( ,
(
éé, -
assemblyName
éé- 9
)
éé9 :
;
éé: ;
if
èè 
(
èè 
assembly
èè 
==
èè 
null
èè  $
)
èè$ %
return
êê 
null
êê 
;
êê  
type
ëë 
=
ëë 
assembly
ëë 
.
ëë  
GetType
ëë  '
(
ëë' (
TypeName
ëë( 0
)
ëë0 1
;
ëë1 2
if
íí 
(
íí 
type
íí 
!=
íí 
null
íí  
)
íí  !
return
ìì 
type
ìì 
;
ìì  
}
îî 
var
ññ 
currentAssembly
ññ 
=
ññ  !
Assembly
ññ" *
.
ññ* +"
GetExecutingAssembly
ññ+ ?
(
ññ? @
)
ññ@ A
;
ññA B
var
óó "
referencedAssemblies
óó $
=
óó% &
currentAssembly
óó' 6
.
óó6 7%
GetReferencedAssemblies
óó7 N
(
óóN O
)
óóO P
;
óóP Q
foreach
òò 
(
òò 
var
òò 
assemblyName
òò %
in
òò& ("
referencedAssemblies
òò) =
)
òò= >
{
ôô 
var
öö 
assembly
öö 
=
öö 
Assembly
öö '
.
öö' (
Load
öö( ,
(
öö, -
assemblyName
öö- 9
)
öö9 :
;
öö: ;
if
õõ 
(
õõ 
assembly
õõ 
!=
õõ 
null
õõ  $
)
õõ$ %
{
úú 
type
ùù 
=
ùù 
assembly
ùù #
.
ùù# $
GetType
ùù$ +
(
ùù+ ,
TypeName
ùù, 4
)
ùù4 5
;
ùù5 6
if
ûû 
(
ûû 
type
ûû 
!=
ûû 
null
ûû  $
)
ûû$ %
return
üü 
type
üü #
;
üü# $
}
†† 
}
°° 
return
¢¢ 
null
¢¢ 
;
¢¢ 
}
££ 	
private
•• 
static
•• 
	Texture2D
••  
Base64ToTexture
••! 0
(
••0 1
string
••1 7
base64
••8 >
)
••> ?
{
¶¶ 	
	Texture2D
ßß 
t
ßß 
=
ßß 
new
ßß 
	Texture2D
ßß '
(
ßß' (
$num
ßß( )
,
ßß) *
$num
ßß+ ,
)
ßß, -
;
ßß- .
t
®® 
.
®® 
	hideFlags
®® 
=
®® 
	HideFlags
®® #
.
®®# $
HideAndDontSave
®®$ 3
;
®®3 4
t
©© 
.
©© 
	LoadImage
©© 
(
©© 
System
©© 
.
©© 
Convert
©© &
.
©©& '
FromBase64String
©©' 7
(
©©7 8
base64
©©8 >
)
©©> ?
)
©©? @
;
©©@ A
return
™™ 
t
™™ 
;
™™ 
}
´´ 	
[
≠≠ 	
Serializable
≠≠	 
]
≠≠ 
class
ÆÆ !
RuleTileRuleWrapper
ÆÆ !
{
ØØ 	
[
∞∞ 
SerializeField
∞∞ 
]
∞∞ 
public
±± 
List
±± 
<
±± 
RuleTile
±±  
.
±±  !

TilingRule
±±! +
>
±±+ ,
rules
±±- 2
=
±±3 4
new
±±5 8
List
±±9 =
<
±±= >
RuleTile
±±> F
.
±±F G

TilingRule
±±G Q
>
±±Q R
(
±±R S
)
±±S T
;
±±T U
}
≤≤ 	
[
¥¥ 	
MenuItem
¥¥	 
(
¥¥ 
$str
¥¥ 3
)
¥¥3 4
]
¥¥4 5
private
µµ 
static
µµ 
void
µµ 
CopyAllRules
µµ (
(
µµ( )
MenuCommand
µµ) 4
item
µµ5 9
)
µµ9 :
{
∂∂ 	
RuleTile
∑∑ 
tile
∑∑ 
=
∑∑ 
item
∑∑  
.
∑∑  !
context
∑∑! (
as
∑∑) +
RuleTile
∑∑, 4
;
∑∑4 5
if
∏∏ 
(
∏∏ 
tile
∏∏ 
==
∏∏ 
null
∏∏ 
)
∏∏ 
return
ππ 
;
ππ !
RuleTileRuleWrapper
ªª 
rulesWrapper
ªª  ,
=
ªª- .
new
ªª/ 2!
RuleTileRuleWrapper
ªª3 F
(
ªªF G
)
ªªG H
;
ªªH I
rulesWrapper
ºº 
.
ºº 
rules
ºº 
=
ºº  
tile
ºº! %
.
ºº% &
m_TilingRules
ºº& 3
;
ºº3 4
var
ΩΩ 
	rulesJson
ΩΩ 
=
ΩΩ 
EditorJsonUtility
ΩΩ -
.
ΩΩ- .
ToJson
ΩΩ. 4
(
ΩΩ4 5
rulesWrapper
ΩΩ5 A
)
ΩΩA B
;
ΩΩB C
EditorGUIUtility
ææ 
.
ææ 
systemCopyBuffer
ææ -
=
ææ. /
	rulesJson
ææ0 9
;
ææ9 :
}
øø 	
[
¡¡ 	
MenuItem
¡¡	 
(
¡¡ 
$str
¡¡ 0
)
¡¡0 1
]
¡¡1 2
private
¬¬ 
static
¬¬ 
void
¬¬ 

PasteRules
¬¬ &
(
¬¬& '
MenuCommand
¬¬' 2
item
¬¬3 7
)
¬¬7 8
{
√√ 	
RuleTile
ƒƒ 
tile
ƒƒ 
=
ƒƒ 
item
ƒƒ  
.
ƒƒ  !
context
ƒƒ! (
as
ƒƒ) +
RuleTile
ƒƒ, 4
;
ƒƒ4 5
if
≈≈ 
(
≈≈ 
tile
≈≈ 
==
≈≈ 
null
≈≈ 
)
≈≈ 
return
∆∆ 
;
∆∆ 
try
»» 
{
…… !
RuleTileRuleWrapper
   #
rulesWrapper
  $ 0
=
  1 2
new
  3 6!
RuleTileRuleWrapper
  7 J
(
  J K
)
  K L
;
  L M
EditorJsonUtility
ÀÀ !
.
ÀÀ! "
FromJsonOverwrite
ÀÀ" 3
(
ÀÀ3 4
EditorGUIUtility
ÀÀ4 D
.
ÀÀD E
systemCopyBuffer
ÀÀE U
,
ÀÀU V
rulesWrapper
ÀÀW c
)
ÀÀc d
;
ÀÀd e
tile
ÃÃ 
.
ÃÃ 
m_TilingRules
ÃÃ "
.
ÃÃ" #
AddRange
ÃÃ# +
(
ÃÃ+ ,
rulesWrapper
ÃÃ, 8
.
ÃÃ8 9
rules
ÃÃ9 >
)
ÃÃ> ?
;
ÃÃ? @
}
ÕÕ 
catch
ŒŒ 
(
ŒŒ 
	Exception
ŒŒ 
)
ŒŒ 
{
œœ 
Debug
–– 
.
–– 
LogError
–– 
(
–– 
$str
–– N
)
––N O
;
––O P
}
—— 
}
““ 	
}
”” 
}‘‘ 